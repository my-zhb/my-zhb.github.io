<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>七之月</title>
  
  
  <link href="https://www.isfate.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.isfate.xyz/"/>
  <updated>2022-03-03T15:36:49.909Z</updated>
  <id>https://www.isfate.xyz/</id>
  
  <author>
    <name>七月</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu开启root登录</title>
    <link href="https://www.isfate.xyz/article/a464cc4f.html"/>
    <id>https://www.isfate.xyz/article/a464cc4f.html</id>
    <published>2022-03-03T12:07:43.000Z</published>
    <updated>2022-03-03T15:36:49.909Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu服务器默认的账号ubuntu，我自己是觉得很不方便，虽然它比较的安全，但我更喜欢使用root登录；</p><blockquote><p>具体操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.为root设置密码</span></span><br><span class="line">sudo password root</span><br><span class="line"><span class="meta">#</span><span class="bash">2.进入root账户</span></span><br><span class="line">su root</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">3.编辑sshd_config文件</span></span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到 PermitRootLogin without-password 改为</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.允许密码登录 PasswordAuthentication no 改为</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.最后重启服务</span></span><br><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ubuntu服务器默认的账号ubuntu，我自己是觉得很不方便，虽然它比较的安全，但我更喜欢使用root登录；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="运维" scheme="https://www.isfate.xyz/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="ubuntu" scheme="https://www.isfate.xyz/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Java中文汉字转拼音工具类</title>
    <link href="https://www.isfate.xyz/article/5cf35c25.html"/>
    <id>https://www.isfate.xyz/article/5cf35c25.html</id>
    <published>2021-12-09T05:34:00.000Z</published>
    <updated>2022-02-05T15:08:05.746Z</updated>
    
    <content type="html"><![CDATA[<p>Java汉字转成汉语拼音工具类,需要用到pinyin4j.jar包</p><h1 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拼音转换工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.belerweb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> BadHanyuPinyinOutputFormatCombination </span>&#123;</span><br><span class="line"></span><br><span class="line">    HanyuPinyinOutputFormat pinyinOutputFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">    <span class="comment">//拼音大写还是小写</span></span><br><span class="line">    pinyinOutputFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">    <span class="comment">//是否带声调</span></span><br><span class="line">    pinyinOutputFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">    <span class="comment">//u是否要做转换，在英文中u是v</span></span><br><span class="line">    pinyinOutputFormat.setVCharType(HanyuPinyinVCharType.WITH_U_UNICODE);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 方法参数：</span></span><br><span class="line"><span class="comment">         * 1.String str  要转换的文字</span></span><br><span class="line"><span class="comment">         * 2.HanyuPinyinOutputFormat outputFormat  转换的格式</span></span><br><span class="line"><span class="comment">         * 3.String separate 以什么分割</span></span><br><span class="line"><span class="comment">         * 4.boolean retain 如果有英文数字是否保留</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    String result = PinyinHelper.toHanYuPinyinString(<span class="string">&quot;张三是律师&quot;</span>, pinyinOutputFormat, <span class="string">&quot;-&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhang-san-shi-lü-shi</span><br></pre></td></tr></table></figure></p><div class="tip message"><p>如果需要一个字符一个字符的转换，pinyin4j也提供了对应的方法例如：toHanyuPinyinStringArray()等等</p></div>]]></content>
    
    
    <summary type="html">中文汉字转拼音</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="工具类" scheme="https://www.isfate.xyz/categories/java/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
    <category term="工具类" scheme="https://www.isfate.xyz/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>mybatis中sql语句调用Java代码</title>
    <link href="https://www.isfate.xyz/article/5cf352a9.html"/>
    <id>https://www.isfate.xyz/article/5cf352a9.html</id>
    <published>2021-12-07T03:21:00.000Z</published>
    <updated>2022-01-31T10:24:30.981Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现一个很有意思的东西就是在mybatis的sql语句中去执行Java代码,操作如下：</p><blockquote><p>项目整体结果</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211207131540063.png" alt="image-20211207131540063"></p><h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><blockquote><p>sql文件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pass_word` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pin_yin_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `real_name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><blockquote><p>引入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.belerweb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>创建User实体</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 七月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/12/7 11:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line">    <span class="keyword">private</span> String pinYinName;</span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassWord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassWord</span><span class="params">(String passWord)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPinYinName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pinYinName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPinYinName</span><span class="params">(String pinYinName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pinYinName = pinYinName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRealName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> realName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRealName</span><span class="params">(String realName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realName = realName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, passWord=&#x27;&quot;</span> + passWord + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pinYinName=&#x27;&quot;</span> + pinYinName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, realName=&#x27;&quot;</span> + realName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建UserMapper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 七月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/12/7 11:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建UserMapping.xml</p></blockquote><p>{alert type=”info”}<br><code>&quot;$&#123;@com.example.mybatistest.utils.PinyinUtils@getPinYin(realName)&#125;&quot;</code><br>com.example.mybatistest.utils.PinyinUtils：方法路径<br>getPinYin：方法<br>{/alert}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mybatistest.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.mybatistest.domain.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;passWord&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pin_yin_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pinYinName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;real_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;realName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.mybatistest.domain.User&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">insert into user (user_name,password,pin_yin_name,real_name)</span><br><span class="line">values (</span><br><span class="line">#&#123;userName&#125;,</span><br><span class="line">#&#123;passWord&#125;,</span><br><span class="line">&quot;$&#123;@com.example.mybatistest.utils.PinyinUtils@getPinYin(realName)&#125;&quot;,</span><br><span class="line">    #&#123;realName&#125;</span><br><span class="line">)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>PinyinUtils.java </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PinyinUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将汉字转换为全拼</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPinYin</span><span class="params">(String src)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] t1 = <span class="keyword">null</span>;</span><br><span class="line">        t1 = src.toCharArray();</span><br><span class="line">        String[] t2 = <span class="keyword">new</span> String[t1.length];</span><br><span class="line">        <span class="comment">// 设置汉字拼音输出的格式</span></span><br><span class="line">        HanyuPinyinOutputFormat t3 = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">        t3.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">        t3.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">        t3.setVCharType(HanyuPinyinVCharType.WITH_V);</span><br><span class="line">        StringBuilder t4 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> t0 = t1.length;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t0; i++) &#123;</span><br><span class="line">                <span class="comment">// 判断是否为汉字字符</span></span><br><span class="line">                <span class="keyword">if</span> (Character.toString(t1[i]).matches(<span class="string">&quot;[\\u4E00-\\u9FA5]+&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 将汉字的几种全拼都存到t2数组中</span></span><br><span class="line">                    t2 = PinyinHelper.toHanyuPinyinStringArray(t1[i], t3);</span><br><span class="line">                    <span class="comment">// 取出该汉字全拼的第一种读音并连接到字符串t4后</span></span><br><span class="line">                    t4.append(t2[<span class="number">0</span>]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果不是汉字字符，直接取出字符并连接到字符串t4后</span></span><br><span class="line">                    t4.append(Character.toString(t1[i]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t4.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提取每个汉字的首字母</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPinYinHeadChar</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        StringBuilder convert = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; str.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">char</span> word = str.charAt(j);</span><br><span class="line">            <span class="comment">// 提取汉字的首字母</span></span><br><span class="line">            String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(word);</span><br><span class="line">            <span class="keyword">if</span> (pinyinArray != <span class="keyword">null</span>) &#123;</span><br><span class="line">                convert.append(pinyinArray[<span class="number">0</span>].charAt(<span class="number">0</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                convert.append(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> convert.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串转换成ASCII码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cnStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCnASCII</span><span class="params">(String cnStr)</span> </span>&#123;</span><br><span class="line">        StringBuffer strBuf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">// 将字符串转换成字节序列</span></span><br><span class="line">        <span class="keyword">byte</span>[] bGBK = cnStr.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bGBK.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 将每个字符转换成ASCII码</span></span><br><span class="line">            strBuf.append(Integer.toHexString(bGBK[i] &amp; <span class="number">0xff</span>) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strBuf.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(PinyinUtils.getPinYinHeadChar(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>application.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapping.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.mybatistest.domain</span></span><br><span class="line"><span class="comment">#showSql</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com:</span></span><br><span class="line">      <span class="attr">example:</span></span><br><span class="line">        <span class="attr">mapper :</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisTestApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">testAddUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">&quot;法外狂徒&quot;</span>);</span><br><span class="line">        user.setPassWord(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setRealName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> number = userService.addUser(user);</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211207131355609.png" alt="image-20211207131355609"></p>]]></content>
    
    
    <summary type="html">mybatis中sql语句调用Java代码</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="mybatis" scheme="https://www.isfate.xyz/categories/java/mybatis/"/>
    
    
    <category term="mybatis" scheme="https://www.isfate.xyz/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq学习(三)</title>
    <link href="https://www.isfate.xyz/article/2db9fece.html"/>
    <id>https://www.isfate.xyz/article/2db9fece.html</id>
    <published>2021-08-06T11:20:27.000Z</published>
    <updated>2022-03-04T06:52:00.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发布确认进阶"><a href="#发布确认进阶" class="headerlink" title="发布确认进阶"></a>发布确认进阶</h1><p>​    在生成环境中由于一些不明原因，导致rabbitmq重启，在rabbitmq重启期间生产者消息投递失败，导致消息丢失，需要手动处理和恢复，如果才能进行rabbitmq的消息可靠投递呢？特别时在这样比较极端的情况下，rabbitmq集群不可用的时候，无法投递的消息该如何处理：</p><p><code>org.springframework.amqp.listener.BlockingQueueConsumer:start:620......</code></p><h2 id="确认机制"><a href="#确认机制" class="headerlink" title="确认机制"></a>确认机制</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210801220047886.png" alt="image-20210801220047886"></p><p>如图，如果rabbitmq挂掉，交换机就没有了消息自然就会丢失；</p><h2 id="发布确认基础代码"><a href="#发布确认基础代码" class="headerlink" title="发布确认基础代码"></a>发布确认基础代码</h2><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于笔记：9.2</span></span><br><span class="line"><span class="comment"> * 发布确认（高级）</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_EXCHANGE_NAME = <span class="string">&quot;confirm.exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_QUEUE_NAME = <span class="string">&quot;confirm.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由键名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_ROUTING_KEY = <span class="string">&quot;key1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">confirmExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(CONFIRM_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">confirmQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定交换机和队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> confirmQueue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> confirmExchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">confirmQueueBindingConfirmExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue,<span class="meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange confirmExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于笔记：9.2</span></span><br><span class="line"><span class="comment"> * 发布确认（高级）</span></span><br><span class="line"><span class="comment"> * 接收消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmQueueConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues=ConfirmConfig.CONFIRM_QUEUE_NAME)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(Message message, Channel channel)</span></span>&#123;</span><br><span class="line">        String msg = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;【发布确认高级】：当前时间：&#123;&#125;，收到的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date().toString(),msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/confirm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduectController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于笔记：9.2</span></span><br><span class="line"><span class="comment">     * 发布确认（高级）</span></span><br><span class="line"><span class="comment">     * 开始发消息 测试确认</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,ConfirmConfig.CONFIRM_ROUTING_KEY,message);</span><br><span class="line">        log.info(<span class="string">&quot;【发布确认高级】:发送消息内容：&#123;&#125;&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回调接口"><a href="#回调接口" class="headerlink" title="回调接口"></a>回调接口</h2><p>​    如果交换机挂掉了，导致信息发送失败等错误，可以使用回调接口来解决；</p><h3 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h3><blockquote><p>重写RabbitTemplate.ConfirmCallback方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于笔记：9.3</span></span><br><span class="line"><span class="comment"> * 发布确认（高级）</span></span><br><span class="line"><span class="comment"> * 解决交换机挂掉，消息无法发到交换机的问题</span></span><br><span class="line"><span class="comment"> * 重写RabbitTemplate.ConfirmCallback方法 来判断消息是否成功发送</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallBack</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把我们写的这个方法注入到RabbitTemplate.ConfirmCallback</span></span><br><span class="line"><span class="comment">     * 如果不注入就不会生效</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@PostConstruct</span> 此注解是等其他方法执行完成之后才执行；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机确认回调方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> correlationData 保存回调消息的ID及相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 交换机是否收到消息 true:收到 false：未收到</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 失败的原因，如果成功这个值为null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 备注：correlationData 参数是通过 rabbitTemplate.convertAndSend（）方</span></span><br><span class="line"><span class="comment">     *      法带进来的，如果发送的时候没带，那么这里也接收不到；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> b, String s)</span> </span>&#123;</span><br><span class="line">        String id = correlationData!=<span class="keyword">null</span>?correlationData.getId():<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(b)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;【发布确认高级】：交换机已经收到id为:&#123;&#125;的消息&quot;</span>,id);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.error(<span class="string">&quot;【发布确认高级】：交换机未收到id为:&#123;&#125;的消息，原因是：&#123;&#125;&quot;</span>,id,s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/confirm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduectController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于笔记：9.2</span></span><br><span class="line"><span class="comment">     * 发布确认（高级）</span></span><br><span class="line"><span class="comment">     * 开始发消息 测试确认</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span></span>&#123;</span><br><span class="line">        <span class="comment">//带上参数 方便确认</span></span><br><span class="line">        CorrelationData correlationData = <span class="keyword">new</span> CorrelationData();</span><br><span class="line">        correlationData.setId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">   rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,ConfirmConfig.CONFIRM_ROUTING_KEY,message,correlationData);</span><br><span class="line">        log.info(<span class="string">&quot;【发布确认高级】:发送消息内容：&#123;&#125;&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置类-1"><a href="#配置类-1" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line"><span class="comment">#参数说明</span></span><br><span class="line"><span class="string">correlated：发布消息成功到交换机后触发回调方法；</span></span><br><span class="line"><span class="attr">none:</span> <span class="string">禁用发布确认模型，是默认值；</span></span><br><span class="line"><span class="attr">simple:</span> <span class="string">效果1：和correlated值一样会触发回调方法；</span></span><br><span class="line"><span class="string">效果2：在发布消息成功后使用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法等待broker节点返回消息结果，根据返回结果来判定下一个的逻辑，要注意的点是waitForConfirmsOrDie方法如果返回false则会关闭channel，则接下来无法发送消息到broker</span> </span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">: 【发布确认高级】:发送消息内容：123</span><br><span class="line">: 【发布确认高级】：当前时间：Mon Aug 02 17:48:34 CST 2021，收到的消息：123</span><br><span class="line">: 【发布确认高级】：交换机已经收到id为:1的消息</span><br></pre></td></tr></table></figure><h2 id="回退消息"><a href="#回退消息" class="headerlink" title="回退消息"></a>回退消息</h2><h3 id="Mandatory参数"><a href="#Mandatory参数" class="headerlink" title="Mandatory参数"></a>Mandatory参数</h3><p>​    <code>在仅开启了生产者确认机制的情况下，交换机接收消息后，会直接给消息生产者发送确认信息，如果发现该消息不可路由（不可发送到队列），那么消息会被直接丢弃，此时生产者是不hi到消息被丢弃这件事情的。</code>通过设置mandatory参数可以在当消息传递过程中不可达目的地时候将消息返回给生产者；</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>重写方法</p></blockquote><p><code>重写：RabbitTemplate.ReturnsCallback方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于笔记：9.4.2</span></span><br><span class="line"><span class="comment"> * 发布确认（高级）</span></span><br><span class="line"><span class="comment"> * 解决消息无法重exchange到queue中，如果出现queue挂了，消息返回生产者</span></span><br><span class="line"><span class="comment"> * 重写RabbitTemplate.ReturnsCallback方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReturnCallback</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ReturnsCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把我们写的这个方法注入到RabbitTemplate.ReturnsCallback</span></span><br><span class="line"><span class="comment">     * 如果不注入就不会生效</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@PostConstruct</span> 此注解是等其他方法执行完成之后才执行；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 设置mandatory值为true;</span></span><br><span class="line"><span class="comment">         * true: 交换机无法将消息进行路由时，会将该消息返回给生产者</span></span><br><span class="line"><span class="comment">         * false：如果发现无法进行路由，则直接删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以在消息传递不可达目的地时将消息返回给生产者</span></span><br><span class="line"><span class="comment">     * 只有不可达目的地的时候 才能回退</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returned</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消息&#123;&#125;，被交换机&#123;&#125; 回退，退回原因：&#123;&#125;，路由key：&#123;&#125;&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> String(returned.getMessage().getBody(), StandardCharsets.UTF_8),</span><br><span class="line">                returned.getExchange(),returned.getReplyText(),returned.getRoutingKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/confirm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduectController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于笔记：9.4.2</span></span><br><span class="line"><span class="comment">     * 发布确认（高级）</span></span><br><span class="line"><span class="comment">     * 回退消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/returns/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendReturnsMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,<span class="string">&quot;1234&quot;</span>,message);</span><br><span class="line">        log.info(<span class="string">&quot;【回退消息】:发送消息内容：&#123;&#125;&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">: 【回退消息】:发送消息内容：回退消息</span><br><span class="line">: 消息回退消息，被交换机confirm.exchange 回退，退回原因：NO<span class="built_in">_</span>ROUTE，路由key：1234</span><br><span class="line">: 【发布确认高级】：交换机已经收到id为:的消息</span><br></pre></td></tr></table></figure><h2 id="备份交换机"><a href="#备份交换机" class="headerlink" title="备份交换机"></a>备份交换机</h2><p>​    有了 mandatory 参数和回退消息，<code>虽然我们获得了对无法投递消息的感知能力，有机会在生产者的消息 无法被投递时发现并处理。但是，我们并不知道该如何处理这些无法路由的消息，最多打个日志，然后触发报警，再来手动处理。</code>而通过日志来处理这些无法路由的消息是很不优雅的做法，特别是当生产者 所在的服务有多台机器的时候，手动复制日志会更加麻烦而且容易出错。而且设置 mandatory 参数会增 加生产者的复杂性，需要添加处理这些被退回的消息的逻辑</p><blockquote><p>如果既不想丢失消息，又不想添加生产者的复杂性，该怎么做呢？</p></blockquote><p>​    在RabbitMQ中，有一种备份交换机的机制存在，可以很好的应对这个问题，备份交换机可以理解为汽车的”备胎”，当我们为了某一个交换机声明一个对应的备份交换机时，就是为它创建一个备胎，当交换机收到一条不可路由消息时，将会把这条信息转发到备份交换价中，由备份交换机进行转发和处理，通过备份交换机类型为<code>Fanout</code>，这样就能把所有消息都投递到与其绑定的队列中，然后我们在备份交换机下绑定一个队列，这样所有那些原交换机无法被路由的消息，就会都进入这个队列了，当然，我们还可以创建一个报警队列，用独立的消费者来进行监测和报警；</p><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210803212352220.png" alt="image-20210803212352220"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><h4 id="配置类-2"><a href="#配置类-2" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于笔记：9.5</span></span><br><span class="line"><span class="comment"> * 发布确认（高级）</span></span><br><span class="line"><span class="comment"> * 备份交换机配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmBackupConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_EXCHANGE_NAME = <span class="string">&quot;confirm_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_QUEUE_NAME = <span class="string">&quot;confirm_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由键名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_ROUTING_KEY = <span class="string">&quot;key2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_BACKUP_EXCHANGE_NAME = <span class="string">&quot;confirm_backup_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_BACKUP_QUEUE_NAME = <span class="string">&quot;confirm_backup_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 报警队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_WARNING_QUEUE_NAME = <span class="string">&quot;confirm_warning_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">confirmExchangeBackup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建直接交换机，持久化（durable(true)）</span></span><br><span class="line"><span class="comment">         * withArgument(&quot;alternate-exchange&quot;,CONFIRM_BACKUP_EXCHANGE_NAME) 设置不可路由转发到备份交换机</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(CONFIRM_EXCHANGE_NAME).durable(<span class="keyword">true</span>).</span><br><span class="line">                withArgument(<span class="string">&quot;alternate-exchange&quot;</span>,CONFIRM_BACKUP_EXCHANGE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">confirmQueueBackup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定交换机和队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> confirmQueueBackup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> confirmExchangeBackup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">confirmQueueBindingConfirmExchangeBackup</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmQueueBackup&quot;)</span> Queue confirmQueueBackup,<span class="meta">@Qualifier(&quot;confirmExchangeBackup&quot;)</span> DirectExchange confirmExchangeBackup)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmQueueBackup).to(confirmExchangeBackup).with(CONFIRM_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份交换机声明</span></span><br><span class="line"><span class="comment">     * 类型为：fanout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">confirmBackupExchangeBackup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(CONFIRM_BACKUP_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份队列声明</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">confirmBackupQueueBackup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(CONFIRM_BACKUP_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 报警队列声明</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">confirmWarningQueueBackup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(CONFIRM_WARNING_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份交换机与备份队列绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> confirmBackupQueueBackup 队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> confirmBackupExchangeBackup 交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">confirmBackupExchangeBindingConfirmBackupQueueBackup</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmBackupQueueBackup&quot;)</span>Queue confirmBackupQueueBackup,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Qualifier(&quot;confirmBackupExchangeBackup&quot;)</span>FanoutExchange confirmBackupExchangeBackup)</span></span>&#123;</span><br><span class="line">        <span class="comment">//fanout 扇形交换机没有routingkey</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmBackupQueueBackup).to(confirmBackupExchangeBackup);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份交换机与报警队列绑定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> confirmWarningQueueBackup 队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> confirmBackupExchangeBackup 交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">confirmBackupExchangeBindingConfirmWarningQueueBackup</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmWarningQueueBackup&quot;)</span>Queue confirmWarningQueueBackup,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                  <span class="meta">@Qualifier(&quot;confirmBackupExchangeBackup&quot;)</span>FanoutExchange confirmBackupExchangeBackup)</span></span>&#123;</span><br><span class="line">        <span class="comment">//fanout 扇形交换机没有routingkey</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmWarningQueueBackup).to(confirmBackupExchangeBackup);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于笔记：9.5</span></span><br><span class="line"><span class="comment"> * 发布确认（高级）</span></span><br><span class="line"><span class="comment"> * 报警消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WarningQueueConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues= ConfirmBackupConfig.CONFIRM_WARNING_QUEUE_NAME)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveWarningMsg</span><span class="params">(Message message, Channel channel)</span></span>&#123;</span><br><span class="line">        String msg = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;【报警发现不可路由消息】：当前时间：&#123;&#125;，收到的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date().toString(),msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues=ConfirmBackupConfig.CONFIRM_QUEUE_NAME)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(Message message, Channel channel)</span></span>&#123;</span><br><span class="line">        String msg = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;【正确被消费】：当前时间：&#123;&#125;，收到的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date().toString(),msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues=ConfirmBackupConfig.CONFIRM_BACKUP_QUEUE_NAME)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveBackupMsg</span><span class="params">(Message message, Channel channel)</span></span>&#123;</span><br><span class="line">        String msg = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;【备份消费者】：当前时间：&#123;&#125;，收到的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date().toString(),msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/confirm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduectController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于笔记：9.5</span></span><br><span class="line"><span class="comment">     * 发布确认（高级）</span></span><br><span class="line"><span class="comment">     * 回退消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/backup/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBackMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(ConfirmBackupConfig.CONFIRM_EXCHANGE_NAME,ConfirmBackupConfig.CONFIRM_ROUTING_KEY,message+<span class="string">&quot;：第一条消息&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;【Backup发送第一条消息】:发送消息内容：&#123;&#125;&quot;</span>,message);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(ConfirmBackupConfig.CONFIRM_EXCHANGE_NAME,<span class="string">&quot;1234&quot;</span>,message+<span class="string">&quot;：第二条消息&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;【Backup发送第二条消息】:发送消息内容：&#123;&#125;&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置yml"><a href="#配置yml" class="headerlink" title="配置yml"></a>配置yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="comment"># 开启消息回退</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">: 【Backup发送第一条消息】:发送消息内容：测试备份消息</span><br><span class="line">: 【发布确认高级】：交换机已经收到id为:的消息</span><br><span class="line">: 【Backup发送第二条消息】:发送消息内容：测试备份消息</span><br><span class="line">: 【发布确认高级】：交换机已经收到id为:的消息</span><br><span class="line"></span><br><span class="line">: 【备份消费者】：当前时间：Tue Aug 03 22:46:08 CST 2021，收到的消息：测试备份消息：第二条消息</span><br><span class="line">: 【正确被消费】：当前时间：Tue Aug 03 22:46:08 CST 2021，收到的消息：测试备份消息：第一条消息</span><br><span class="line">: 【报警发现不可路由消息】：当前时间：Tue Aug 03 22:46:08 CST 2021，收到的消息：测试备份消息：第二条消息</span><br></pre></td></tr></table></figure><h1 id="rabbitMQ其他知识"><a href="#rabbitMQ其他知识" class="headerlink" title="rabbitMQ其他知识"></a>rabbitMQ其他知识</h1><h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​    用户对于同一操作发起的因此请求或者多次请求的结果时一致的，不会因为多次点击而产生了副作用，例如：用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户在此点击按钮，此时会进行二次扣款，返回结果成功，用户查询余额发现多扣钱了，流水记录也变成了两条，在单应用系统中，我们只需要把数据库操作放入事务中即可，发送错误立即回滚，但是再响应客户端的时候也有可能出现网络中断或者异常等；</p><h3 id="消息重复消费"><a href="#消息重复消费" class="headerlink" title="消息重复消费"></a>消息重复消费</h3><p>​    消费者在消费MQ中的消息时，MQ已经把消息发送给消费者，消费者在给MQ返回ack时网络中断，故而MQ未收到确认信息，该条消息重写给其他的消费者，或者在网络重连后再次发送给消费者，但实际上该消费者已经成功消费了该条消息，造成消费者消费了重复的消息；</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>​    MQ消费者的幂等性的解决一般使用全局ID或者写一个唯一标识符比如时间戳或者UUID，订单消费者消费MQ中的消息也可以利用MQ的该id来判断，或者可按自己的规则生成一个全局唯一ID，每次消费消息时用该id先判断消息是否已消费过；</p><h3 id="消费端的幂等性保障"><a href="#消费端的幂等性保障" class="headerlink" title="消费端的幂等性保障"></a>消费端的幂等性保障</h3><p>​    在海量订单生成的业务高峰期，生产端有可能重复产生消息，这时候消费端就要实现幂等性，这就意味着我们的消息永远不会被消费多次，即使我们收到了一样的消息，一般常用的幂等性有两种操作：1.唯一ID+指纹码机制，利用数据库主键去重；2.利用redis的原子性实现；</p><h3 id="唯一ID-指纹码机制"><a href="#唯一ID-指纹码机制" class="headerlink" title="唯一ID+指纹码机制"></a>唯一ID+指纹码机制</h3><p>​    指纹码：一些规则或者时间戳加别的服务给到的唯一信息码，它不一定是我们系统生成的，基本都是由我们的业务规则拼接而来，但是一定要保证唯一性，然后就利用查询语句来判断这个id是否存在于数据库，优势就是实现一个拼接，然后是查询判断是否重复；劣势就是高并发时，如果是单个数据库会有写入性能瓶颈，当然可以采用分库分表提升性能，但是不推荐；</p><h3 id="redis原子性"><a href="#redis原子性" class="headerlink" title="redis原子性"></a>redis原子性</h3><p>​    利用redis执行<code>setnx</code>命令，天然具有幂等性，从而实现不重复消费；</p><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>​    在系统中有一个<code>订单催付</code>的场景，我们的客户在天猫下的订单，淘宝会及时将订单推送给我们，如果在系统设定的时间内未付款，那么就会给用户推送一条短信提醒，但是，tmall商家对我们来说，肯定是要分大客户和小客户的，所以大客户的订单必须要得到优先处理；</p><h3 id="如何添加"><a href="#如何添加" class="headerlink" title="如何添加"></a>如何添加</h3><blockquote><p>在队列中添加优先级</p></blockquote><p>优先级取值区间是0-255，这里设置的最大优先级是10，如果优先级越大对服务器负载越大；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; parms = <span class="keyword">new</span> HashMap();</span><br><span class="line">parms.put(<span class="string">&quot;x-max-priority&quot;</span>,<span class="number">10</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,parms);</span><br></pre></td></tr></table></figure><blockquote><p>在消费者添加优先级</p></blockquote><p>消费者这里设置优先级不能大于队列优先级的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AMQP.BasicProperties BasicProperties = <span class="keyword">new</span> AMQP.BasicProperties().builder().priority(<span class="number">5</span>).build()</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>​    要让队列实现优先级需要做的事情：队列需要设置为优先级队列，消息需要设置消息的优先级，消费者需要等待消息已经发送到队列中才能去消费，因为这样才由机会对消息进行排序；</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于笔记：10.2</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * 优先级队列</span></span><br><span class="line"><span class="comment"> * 生产者 发送消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String QUEUE_NAME = <span class="string">&quot;priotiyy_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否对队列的数据持久化（磁盘上），默认消息存储在内存中</span></span><br><span class="line"><span class="comment">         * 参数3：该队列是否只供一个消费者进行消费，true可以多个消费者共享，false只能一个消费者消费</span></span><br><span class="line"><span class="comment">         * 参数4：是否自动删除 最后一个消费者断开连接以后，该队列是否删除，true自动删除，false不删除</span></span><br><span class="line"><span class="comment">         * 参数5：其他参数 如：延时，死信</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//这种优先级 允许优先级0-10，不要设置太大 浪费cpu和内存</span></span><br><span class="line">        Map&lt;String, Object&gt; arguments  = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        arguments.put(<span class="string">&quot;x-max-priority&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,arguments);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            String message = <span class="string">&quot;hello RabbitMQ ===&gt; &quot;</span> +i;</span><br><span class="line">            <span class="comment">//如果是第五个 设置优先级</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">                AMQP.BasicProperties basicProperties = <span class="keyword">new</span> AMQP.BasicProperties().builder().priority(<span class="number">5</span>).build();</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,basicProperties,message.getBytes());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于笔记：10.2</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * 优先级队列</span></span><br><span class="line"><span class="comment"> * 消费者 接收消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String QUEUE_NAME = <span class="string">&quot;priotiyy_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明 接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag,message) -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag) -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费者消费消息----&gt;&gt; 被中断&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消费者消费消息</span></span><br><span class="line"><span class="comment">         * 参数1：消费那个队列</span></span><br><span class="line"><span class="comment">         * 参数2：消费成功之后是否要自动应答 true自动应答 false代表手动应答</span></span><br><span class="line"><span class="comment">         * 参数3：消费者未成功消费消息的回调</span></span><br><span class="line"><span class="comment">         * 参数4：消费者取消消费的回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果</p></blockquote><p>应为我们这只了i等于5的优先级，所以第一个输出；</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hello RabbitMQ ===&gt; 5</span><br><span class="line">hello RabbitMQ ===&gt; 1</span><br><span class="line">hello RabbitMQ ===&gt; 2</span><br><span class="line">hello RabbitMQ ===&gt; 3</span><br><span class="line">hello RabbitMQ ===&gt; 4</span><br><span class="line">hello RabbitMQ ===&gt; 6</span><br><span class="line">hello RabbitMQ ===&gt; 7</span><br><span class="line">hello RabbitMQ ===&gt; 8</span><br><span class="line">hello RabbitMQ ===&gt; 9</span><br><span class="line">hello RabbitMQ ===&gt; 10</span><br></pre></td></tr></table></figure><h2 id="惰性队列"><a href="#惰性队列" class="headerlink" title="惰性队列"></a>惰性队列</h2><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p>​    RabbitMQ3.6.0版本开始引入了惰性队列的概念，惰性队列会尽可能的将消息存入磁盘中，而在消费者到对应的消息时才会被加载到内存中，它的一个重要的设计目标是能后支持更长的队列，即支持更多的消息存储，当消费者由于各种各样的原因（比如消费者下线、宕机亦或者由于维护而关闭等）而致使长时间内不能消费消息造成堆积时，惰性队列就很必要了；</p><p>​    默认情况下，当生产者将消息发送到RabbitMQ的时候，队列中的消息会尽可能的存储在内存之中，这样可以加快速度的将消息发送到消费者，即使时持久化的信息，在被写入磁盘的同时也会在内存中驻留一个备份，当RabbitMQ需要释放内存的时候，会将内存中的消息保存至磁盘中，这个操作会消耗较长的时间，也会阻塞队列的操作，进而无法接受新的消息;</p><h3 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h3><p>​    队列具备两种模式：<code>default</code>和<code>lazy</code>，默认的为default模式，在3.6.0之后的版本无需做任何变更，lazy模式即为惰性队列的模式，可以通过调用channel.queueDeclare方法的时候在参数中设置，也可以通过Policy的方式设置，如果一个队列同时使用这两种方式设置的话，那么Policy的方式具备更高的优先级，如果要通过声明的方式改变已有队列的模式，那么只能先删除队列，然后重新声明一次新的；</p><p>​    在队列声明的时候可以通过参数<code>x-queue-mode</code>来设置队列的模式，取值为<code>default</code>和<code>lazy</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-queue-mode&quot;</span>,<span class="string">&quot;lazy&quot;</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;myqueue&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);</span><br></pre></td></tr></table></figure><h3 id="内存开销对比"><a href="#内存开销对比" class="headerlink" title="内存开销对比"></a>内存开销对比</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210806001653284.png" alt="image-20210806001653284"></p><p>在发送一百万条消息时，每条消息大概占1kb的情况下，普通队列占用内存时1.2GB，而惰性 队列仅仅占用1.5MB;</p><h1 id="rabbitMQ集群"><a href="#rabbitMQ集群" class="headerlink" title="rabbitMQ集群"></a>rabbitMQ集群</h1><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="单台安装"><a href="#单台安装" class="headerlink" title="单台安装"></a>单台安装</h3><p><a href="https://www.rabbitmq.com/download.html">rabbitmq官网</a>，先配置一台服务器装好rabbitmq</p><blockquote><p>1.上传下载好的软件到服务器</p></blockquote><p>软件下载: <a href="https://pan.baidu.com/s/1NShaFIeu8rPZh25qhQ9Yyg">https://pan.baidu.com/s/1NShaFIeu8rPZh25qhQ9Yyg</a>  提取码：yip8</p><p><img src="https://i.loli.net/2021/08/09/T5Zc8YFyOu4LD3k.png" alt="image-20210809154835184"></p><blockquote><p>2.安装文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh erlang-21.3-1.el7.x86_64.rpm</span><br><span class="line">yum install socat -y</span><br><span class="line">rpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><blockquote><p>3.启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加开机启动rabbitmq服务</span></span><br><span class="line">chkconfig rabbitmq-server on</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">/sbin/service rabbitmq-server start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务状态</span></span><br><span class="line">/sbin/service rabbitmq-server status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务</span></span><br><span class="line">/sbin/service rabbitmq-server stop</span><br></pre></td></tr></table></figure><blockquote><p>4.开启web管理插件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><blockquote><p>5.添加用户</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建账号</span></span><br><span class="line">rabbitmqctl add_user 用户名称 密码</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置用户角色</span></span><br><span class="line">rabbitmqctl set_user_tags 用户名称 administrator</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置用户权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> set_permissions [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;<span class="built_in">read</span>&gt;</span></span><br><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; 用户名称 &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><blockquote><p>6.重启</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭应用</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除命令</span></span><br><span class="line">rabbitmqctl reset</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动</span></span><br><span class="line">rabbitmq start_app</span><br></pre></td></tr></table></figure><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><p>将我们搭建好的主力克隆2分</p><div class="table-container"><table><thead><tr><th>ip</th><th>主机名称</th><th>集群顺序</th></tr></thead><tbody><tr><td>192.168.1.120</td><td>node1</td><td>1</td></tr><tr><td>192.168.1.121</td><td>node2</td><td>2</td></tr><tr><td>192.168.1.122</td><td>node3</td><td>3</td></tr></tbody></table></div><blockquote><p>1.修改主机名</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑hostname</span></span><br><span class="line"><span class="meta">#</span><span class="bash">192.168.1.120=node1,192.168.1.121=node2,192.168.1.122=node2;</span></span><br><span class="line">vim /etc/hostname </span><br><span class="line"><span class="meta">#</span><span class="bash"> 分别对应修改 然后重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><blockquote><p>2.配置各个节点的hosts文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑hosts</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在三个主机分别加入</span> </span><br><span class="line">192.168.1.120 node1</span><br><span class="line">192.168.1.121 node2</span><br><span class="line">192.168.1.122 node3</span><br></pre></td></tr></table></figure><blockquote><p>3.保证各个节点的cookie一致</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在node1节点上执行</span></span><br><span class="line">scp /var/lib/rabbitmq/.erlang.cookie root@node2:/var/lib/rabbitmq/.erlang.cookie</span><br><span class="line">scp /var/lib/rabbitmq/.erlang.cookie root@node3:/var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><blockquote><p>4.重启</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启rabbitmq服务，顺带启动erlang虚拟机和rabbitmq应用服务</span></span><br><span class="line">rabbitmq-server -detached</span><br></pre></td></tr></table></figure><blockquote><p>5.集群配置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.在第二个节点上执行</span><br><span class="line"><span class="meta">#</span><span class="bash">停止rabbitmq</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除命令</span></span><br><span class="line">rabbitmqctl reset</span><br><span class="line"><span class="meta">#</span><span class="bash">把node2集群到node1</span></span><br><span class="line">rabbitmqctl join_cluset rabbit@node1</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"></span><br><span class="line">2.在第三个节点上执行</span><br><span class="line"><span class="meta">#</span><span class="bash">停止rabbitmq</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除命令</span></span><br><span class="line">rabbitmqctl reset</span><br><span class="line"><span class="meta">#</span><span class="bash">把node3集群到node2</span></span><br><span class="line">rabbitmqctl join_cluset rabbit@node2</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><blockquote><p>6.集群状态</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/09/xjJ91rHd6XYa8us.png" alt="image-20210809161031441"></p><blockquote><p>7.重新设置账号密码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建账号</span></span><br><span class="line">rabbitmqctl add_user 用户名称 密码</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置用户角色</span></span><br><span class="line">rabbitmqctl set_user_tags 用户名称 administrator</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置用户权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> set_permissions [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;<span class="built_in">read</span>&gt;</span></span><br><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; 用户名称 &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><blockquote><p>8.解除集群节点</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在node2和node3机器分别执行</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">rabbitmqctl cluster_status</span><br><span class="line"><span class="meta">#</span><span class="bash">解除集群</span></span><br><span class="line">rabbitmqctl forger_cluster_node rabbit@node2(在node1主机上执行)</span><br></pre></td></tr></table></figure><blockquote><p>9.集群图</p></blockquote><p><img src="https://i.loli.net/2021/08/09/PoZQwH6FYn72sVW.png" alt="image-20210809161445772"></p><h2 id="镜像队列"><a href="#镜像队列" class="headerlink" title="镜像队列"></a>镜像队列</h2><h3 id="使用镜像队列的原因"><a href="#使用镜像队列的原因" class="headerlink" title="使用镜像队列的原因"></a>使用镜像队列的原因</h3><p>如果rabbitmq集群中只有一个Broker节点，那么该节点的失效将导致整体服务的临时性不可用，并且也可能会导致信息的丢失，可以将所有消息都设置为持久化，并且对应队列的durable属性也设置为true，但是这样仍然无法避免由于缓存导致的问题：因为消息在发送之后和被下入磁盘并执行刷盘动作之间存在一个短暂会产生问题的时间窗，通过publisherconfirm机制能够确保客户端知道那些消息已存入磁盘，尽管如此，一般不希望遇到因单点故障导致的服务不可用；</p><p>引入镜像队列（mirror queue）的机制，可以将队列镜像到集群中的其他broker节点之上，如果集群中的一个节点失效了，队列能自动地切换到镜像中的另外一个节点上以保证服务的可用性；</p><h3 id="配置策略"><a href="#配置策略" class="headerlink" title="配置策略"></a>配置策略</h3><blockquote><p>1.配置备份策略</p></blockquote><p><img src="https://i.loli.net/2021/08/09/mc5PRrKqf97jCnV.png" alt="image-20210809174703935"></p><p><code>Name</code>: 备份的名称</p><p><code>Pattern</code>: 正则表达式以什么开头进行备份</p><p><code>ha-mode</code>: 备份模式（exactly 指定模式)</p><p><code>ha-params</code>: 备份数量</p><p><code>ha-sync-mode</code>: 同步模式（automatic 自动模式）</p><blockquote><p> 2.结果</p></blockquote><p><img src="https://i.loli.net/2021/08/09/mChuc9jlvRABkxs.png" alt="image-20210809175312725"></p><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>这里使用的是Haproxy+Keepalive；</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="https://i.loli.net/2021/08/10/pcTLJ3nmdu4D8Vj.png" alt="image-20210810174841652"></p><div class="table-container"><table><thead><tr><th style="text-align:center">ip</th><th style="text-align:center">名称</th></tr></thead><tbody><tr><td style="text-align:center">192.168.1.120</td><td style="text-align:center">node1(rabbitmq)</td></tr><tr><td style="text-align:center">192.168.1.121</td><td style="text-align:center">node2(rabbitmq)</td></tr><tr><td style="text-align:center">192.168.1.123</td><td style="text-align:center">node3(rabbitmq)</td></tr><tr><td style="text-align:center">192.168.1.118</td><td style="text-align:center">haproxy+Keepalive</td></tr><tr><td style="text-align:center">192.168.1.119</td><td style="text-align:center">haproxy+Keepalive</td></tr><tr><td style="text-align:center">192.168.1.125</td><td style="text-align:center">vip(虚拟ip对外提供服务)</td></tr></tbody></table></div><h3 id="haproxy安装"><a href="#haproxy安装" class="headerlink" title="haproxy安装"></a>haproxy安装</h3><p><code>在192.168.1.118和192.168.1.119分别执行下面步骤</code></p><blockquote><ol><li>下载 haproxy</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装haproxy</span></span><br><span class="line">yum install haproxy</span><br></pre></td></tr></table></figure><blockquote><ol><li>配置haproxy</li></ol></blockquote><p>配置<code>haproxy.cfg</code>,路径为<code>/etc/haproxy/haproxy.cfg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    log         127.0.0.1 local1</span><br><span class="line">    # 改变当前工作目录</span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    # haproxy的pid存放路径,启动进程的用户必须有权限访问此文件</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    # 最大连接数，默认4000</span><br><span class="line">    maxconn     4000</span><br><span class="line">    # 默认用户</span><br><span class="line">    user        haproxy</span><br><span class="line">    # 默认组</span><br><span class="line">    group       haproxy</span><br><span class="line">    # 创建1个进程进入deamon模式运行。此参数要求将运行模式设置为daemon</span><br><span class="line">    daemon</span><br><span class="line">    # 创建监控所用的套接字目录</span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：因为要使用tcp的负载，屏蔽掉与http相关的默认配置</span></span><br><span class="line">defaults</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认的模式mode &#123; tcp|http|health &#125;，tcp是4层，http是7层，health只会返回OK</span></span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    # option httplog       # 采用http日志格式</span><br><span class="line">    option                  httplog</span><br><span class="line">    # 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    # option forwardfor except 127.0.0.0/8  # 如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip</span><br><span class="line">    option forwardfor       except 127.0.0.0/8</span><br><span class="line">    # serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span><br><span class="line">    option                  redispatch</span><br><span class="line">    # 3次连接失败就认为服务不可用，也可以通过后面设置</span><br><span class="line">    retries                 3</span><br><span class="line">    # 超时http请求</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    # 超时队列</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    # 连接超时时间</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    # 客户端连接超时时间</span><br><span class="line">    timeout client          1m</span><br><span class="line">    # 服务器端连接超时时间</span><br><span class="line">    timeout server          1m</span><br><span class="line">    # 超时 http-keep-alive</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    # 超时 查看</span><br><span class="line">    timeout check           10s</span><br><span class="line">    # 最大数</span><br><span class="line">    maxconn                 3000</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################### 打开haproxy的监测界面###############################</span></span>    </span><br><span class="line">listen stats</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置查看路径</span></span><br><span class="line">        bind          0.0.0.0:8888</span><br><span class="line">        mode          http</span><br><span class="line">        stats         enable</span><br><span class="line">        stats         hide-version</span><br><span class="line">        # 设置haproxy监控地址为http://localhost:8888/haproxystats</span><br><span class="line">        stats uri     /haproxystats</span><br><span class="line">        stats realm   Haproxy\ stats</span><br><span class="line">        # 添加用户名密码认证</span><br><span class="line">        stats auth    admin:admin</span><br><span class="line">        stats admin   if TRUE</span><br><span class="line"></span><br><span class="line">frontend http-in</span><br><span class="line">        bind 0.0.0.0:5672</span><br><span class="line">        mode tcp</span><br><span class="line">        log global</span><br><span class="line">        option httplog</span><br><span class="line">        option httpclose</span><br><span class="line">        #默认后端  rabbitmq-server</span><br><span class="line">        default_backend rabbitmq-server</span><br><span class="line"></span><br><span class="line">backend rabbitmq-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置TCP模式</span></span><br><span class="line">        mode tcp</span><br><span class="line">        # 配置TCP模式</span><br><span class="line">        balance roundrobin</span><br><span class="line">        # rabbitmq集群节点配置</span><br><span class="line">        server  rabbitmq1 192.168.1.120:5672 maxconn 2000 weight 1  check inter 5s rise 2 fall 2</span><br><span class="line">        server  rabbitmq2 192.168.1.121:5672 maxconn 2000 weight 1  check inter 5s rise 2 fall 2</span><br><span class="line">        server  rabbitmq3 192.168.1.123:5672 maxconn 2000 weight 1  check inter 5s rise 2 fall 2</span><br></pre></td></tr></table></figure><blockquote><ol><li>Haproxy rsyslog 日志配置</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改</span></span><br><span class="line">vim /etc/rsyslog.conf </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Provides UDP syslog reception</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ModLoad imudp</span></span><br><span class="line"><span class="meta">$</span><span class="bash">UDPServerRun 514</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides TCP syslog reception</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ModLoad imtcp</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputTCPServerRun 514</span></span><br><span class="line"><span class="meta">#</span><span class="bash">路径名称自定义</span></span><br><span class="line">local1.*                                                 /var/log/haproxy/haproxy.log</span><br></pre></td></tr></table></figure><p>修改完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 插件存放目录的文件</span></span><br><span class="line">mkidr /var/log/haproxy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启rsyslog服务</span></span><br><span class="line">systemctl restart rsyslog.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动haproxy服务</span></span><br><span class="line">systemctl start haproxy</span><br></pre></td></tr></table></figure><blockquote><ol><li>查看</li></ol></blockquote><p>进入<code>http://192.168.1.118:8888/haproxystats</code>或者<code>http://192.168.1.119:8888/haproxystats</code>查看</p><p><img src="https://i.loli.net/2021/08/12/zdgKi6LBVZ2eaME.png" alt="image-20210812161353159"></p><h3 id="Keepalive安装"><a href="#Keepalive安装" class="headerlink" title="Keepalive安装"></a>Keepalive安装</h3><p><code>在192.168.1.118和192.168.1.119分别执行下面步骤</code></p><blockquote><ol><li>下载Keepalive</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install Keepalive</span><br></pre></td></tr></table></figure><blockquote><ol><li>配置Keepalive</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编辑/etc/keepalived/keepalived.conf</span></span><br></pre></td></tr></table></figure><p>主节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> 路由id,主备节点不能相同</span></span><br><span class="line">   router_id node1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义监控脚本</span></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    # 脚本位置</span><br><span class="line">    script &quot;/etc/keepalived/haproxy_check.sh&quot; </span><br><span class="line">    # 脚本执行的时间间隔</span><br><span class="line">    interval 5 </span><br><span class="line">    weight 10</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    # Keepalived的角色，MASTER 表示主节点，BACKUP 表示备份节点</span><br><span class="line">    state MASTER  </span><br><span class="line">    # 指定监测的网卡，可以使用 ifconfig或者ip addr 进行查看</span><br><span class="line">    interface ens33</span><br><span class="line">    # 虚拟路由的id，主备节点需要设置为相同</span><br><span class="line">    virtual_router_id 1</span><br><span class="line">    # 优先级，主节点的优先级需要设置比备份节点高</span><br><span class="line">    priority 100 </span><br><span class="line">    # 设置主备之间的检查时间，单位为秒 </span><br><span class="line">    advert_int 1 </span><br><span class="line">    # 定义验证类型和密码</span><br><span class="line">    authentication &#123; </span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 调用上面自定义的监控脚本</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        # 虚拟IP地址，可以设置多个</span><br><span class="line">        192.168.1.125  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备份节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> 路由id,主备节点不能相同</span></span><br><span class="line">   router_id node1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义监控脚本</span></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    # 脚本位置</span><br><span class="line">    script &quot;/etc/keepalived/haproxy_check.sh&quot; </span><br><span class="line">    # 脚本执行的时间间隔</span><br><span class="line">    interval 5 </span><br><span class="line">    weight 10</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    # Keepalived的角色，MASTER 表示主节点，BACKUP 表示备份节点</span><br><span class="line">    state BACKUP  </span><br><span class="line">    # 指定监测的网卡，可以使用 ifconfig或者ip addr 进行查看</span><br><span class="line">    interface ens33</span><br><span class="line">    # 虚拟路由的id，主备节点需要设置为相同</span><br><span class="line">    virtual_router_id 1</span><br><span class="line">    # 优先级，主节点的优先级需要设置比备份节点高</span><br><span class="line">    priority 100 </span><br><span class="line">    # 设置主备之间的检查时间，单位为秒 </span><br><span class="line">    advert_int 1 </span><br><span class="line">    # 定义验证类型和密码</span><br><span class="line">    authentication &#123; </span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 调用上面自定义的监控脚本</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        # 虚拟IP地址，可以设置多个</span><br><span class="line">        192.168.1.125  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>编辑监控脚本</li></ol></blockquote><p>与上文中的<code>/etc/keepalived/haproxy_check.sh</code>对应上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断haproxy是否已经启动</span></span><br><span class="line">if [ $&#123;ps -C haproxy --no-header |wc -l&#125; -eq 0 ] ; then</span><br><span class="line">    #如果没有启动，则启动</span><br><span class="line">    systemctl start keepalived</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">睡眠3秒以便haproxy完全启动</span></span><br><span class="line">sleep 3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果haproxy还是没有启动，此时需要将本机的keepalived服务停掉，以便让VIP自动漂移到另外一台haproxy</span></span><br><span class="line">if [ $&#123;ps -C haproxy --no-header |wc -l&#125; -eq 0 ] ; then</span><br><span class="line">    systemctl stop keepalived</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置脚本执行权限</span></span><br><span class="line">chmod +x /etc/keepalived/haproxy_check.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">systemctl start keepalived</span><br><span class="line"><span class="meta">#</span><span class="bash">开机启动</span></span><br><span class="line">systemctl enable keepalived</span><br></pre></td></tr></table></figure><blockquote><ol><li>验证</li></ol></blockquote><p><code>http://192.168.1.125:8888/haproxystats</code>访问对应的vip（虚拟ip）</p><p><img src="https://i.loli.net/2021/08/12/Q9oCbZyEiISDUga.png" alt="image-20210812170839527"></p><blockquote><ol><li>故障转移测试</li></ol></blockquote><p>主节点</p><p><img src="https://i.loli.net/2021/08/12/pgQXkCaU7yAMVmw.png" alt="image-20210812171044222"></p><p>从节点</p><p><img src="https://i.loli.net/2021/08/12/VJrNOWUnEZ38vpQ.png" alt="image-20210812171109975"></p><p>然后我们在主节点<code>systemctl stop keepalived</code></p><p>主节点</p><p><img src="https://i.loli.net/2021/08/12/5YKjBURghfDIwoz.png" alt="image-20210812171217783"></p><p>从节点</p><p><img src="https://i.loli.net/2021/08/12/ymv8B4Mt3CRe2PU.png" alt="image-20210812171317933"></p><h2 id="Federation-Exchange"><a href="#Federation-Exchange" class="headerlink" title="Federation Exchange"></a>Federation Exchange</h2><h3 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h3><p>​    (broker 北京)、(broker 深圳)彼此之间相距甚远，网络延迟是一个不得不面对的问题，有一个再北京的业务(client 北京)需要连接(broker 北京，向其中的交换器exchangeA发送消息，此时的网络延迟很小，(client 北京)可以迅速将消息发送至exchangeA种，就算在开启了publisherconfirm机制或者事务机制的情况下，也可以迅速收到确认消息，此时又有个在深圳的业务(client 深圳)需要向exchangeA发送消息，那么(client 深圳)(broker 北京)之间有很大的网络延迟，(client 深圳)将发送消息至exchangeA会经历一定的延迟，尤其在开启了publisherconfirm机制或者事务机制的情况下，(client 深圳)会等待很差的延迟时间来接受(broker 北京)的确认消息，进而必然造成这条线程的性能降低，甚至造成一定程度上的阻塞；</p><p>​    将业务(client 深圳)部署到北京的机房可以解决这个问题，但是如果(client 深圳)调用的另外一些服务都部署在深圳，那么又会引发新的时延问题，总不见得将所有业务全部部署在一个机房吧，这里使用Federation插件就可以很好的解决这个问题；</p>]]></content>
    
    
    <summary type="html">rabbitmq</summary>
    
    
    
    <category term="中间件" scheme="https://www.isfate.xyz/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="消息中间件" scheme="https://www.isfate.xyz/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="rabbitmq" scheme="https://www.isfate.xyz/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq学习(二)</title>
    <link href="https://www.isfate.xyz/article/534adee5.html"/>
    <id>https://www.isfate.xyz/article/534adee5.html</id>
    <published>2021-08-06T11:03:10.000Z</published>
    <updated>2022-03-31T07:39:06.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在下图中，”P” 是我们的生产者，”C”是我们的消费者，中间的框是一个队列（rabbitmq）代表使用保留的消息缓冲区</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-one.png" alt=""></p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * hello world （简单模式）</span></span><br><span class="line"><span class="comment"> * 生产者 发送消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//工厂ip连接到RabbitMQ的队列</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;111.231.207.228&quot;</span>);</span><br><span class="line">        <span class="comment">//设置用户名</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;myiszhb&quot;</span>);</span><br><span class="line">        <span class="comment">//设置密码</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;2020Fate!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否对队列的数据持久化（磁盘上），默认消息存储在内存中</span></span><br><span class="line"><span class="comment">         * 参数3：该队列是否只供一个消费者进行消费，true可以多个消费者共享，false只能一个消费者消费</span></span><br><span class="line"><span class="comment">         * 参数4：是否自动删除 最后一个消费者断开连接以后，该队列是否删除，true自动删除，false不删除</span></span><br><span class="line"><span class="comment">         * 参数5：其他参数 如：延时，死信</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        String message = <span class="string">&quot;hello RabbitMQ&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 发送一个消费</span></span><br><span class="line"><span class="comment">         * 参数1：发送到那个交换机</span></span><br><span class="line"><span class="comment">         * 参数2：路由key值是那个  本次的是队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：其他参数信息</span></span><br><span class="line"><span class="comment">         * 参数4：发送的信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * hello world （简单模式）</span></span><br><span class="line"><span class="comment"> * 消费者 接收消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//工厂ip连接到RabbitMQ的队列</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;111.231.207.228&quot;</span>);</span><br><span class="line">        <span class="comment">//设置用户名</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;myiszhb&quot;</span>);</span><br><span class="line">        <span class="comment">//设置密码</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;2020Fate!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明 接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag,message) -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag) -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费者消费消息----&gt;&gt; 被中断&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消费者消费消息</span></span><br><span class="line"><span class="comment">         * 参数1：消费那个队列</span></span><br><span class="line"><span class="comment">         * 参数2：消费成功之后是否要自动应答 true自动应答 false代表手动应答</span></span><br><span class="line"><span class="comment">         * 参数3：消费者成功消费消息的回调</span></span><br><span class="line"><span class="comment">         * 参数4：消费者取消消费的回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h1><h2 id="轮询分发消息"><a href="#轮询分发消息" class="headerlink" title="轮询分发消息"></a>轮询分发消息</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>​    工作队列（又称任务队列）的主要思想是避免立即执行资源密集型任务，而不得不等待它完成，相反我们安排任务在之后执行，我们把任务封装为消息并将其发送到队列，在后台运行的工作进程将弹出任务并最终执行王朝，当有多个工作线程时，这些工作线程将一起处理这些任务；</p><p>​    其中”P”就是生产者，红色的部分是一个队列（rabbitmq）代表使用保留的消息缓冲区，”C1”和”C2”就是我们的消费者；</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-two.png" alt=""></p><h3 id="抽取连接类"><a href="#抽取连接类" class="headerlink" title="抽取连接类"></a>抽取连接类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装rabbitmq连接 返回信道</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Channel <span class="title">getChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//工厂ip连接到RabbitMQ的队列</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;111.231.207.228&quot;</span>);</span><br><span class="line">        <span class="comment">//设置用户名</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;myiszhb&quot;</span>);</span><br><span class="line">        <span class="comment">//设置密码</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;2020Fate!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//获取信道 并返回</span></span><br><span class="line">        <span class="keyword">return</span> connection.createChannel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动两个消费者"><a href="#启动两个消费者" class="headerlink" title="启动两个消费者"></a>启动两个消费者</h3><p>只需要把其中的”C1等待接收消息….”改一下输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * Work Queues（工作模式）</span></span><br><span class="line"><span class="comment"> * 消费消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker_C1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂连接 并返回信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明 接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message) -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到消息: &quot;</span>+ <span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag) -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费者消费消息----&gt;&gt; 被中断&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;C1等待接收消息....&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消费者消费消息</span></span><br><span class="line"><span class="comment">         * 参数1：消费那个队列</span></span><br><span class="line"><span class="comment">         * 参数2：消费成功之后是否要自动应答 true自动应答 false代表手动应答</span></span><br><span class="line"><span class="comment">         * 参数3：消费者成功消费消息的回调</span></span><br><span class="line"><span class="comment">         * 参数4：消费者取消消费的回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * Work Queues（工作模式）</span></span><br><span class="line"><span class="comment"> * 生成大量消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂连接 并返回信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否对队列的数据持久化（磁盘上），默认消息存储在内存中</span></span><br><span class="line"><span class="comment">         * 参数3：该队列是否只供一个消费者进行消费，true可以多个消费者共享，false只能一个消费者消费</span></span><br><span class="line"><span class="comment">         * 参数4：是否自动删除 最后一个消费者断开连接以后，该队列是否删除，true自动删除，false不删除</span></span><br><span class="line"><span class="comment">         * 参数5：其他参数 如：延时，死信</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从控制台输入信息并发送</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String message = scanner.next();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 发送一个消费</span></span><br><span class="line"><span class="comment">             * 参数1：发送到那个交换机</span></span><br><span class="line"><span class="comment">             * 参数2：路由key值是那个  本次的是队列名称</span></span><br><span class="line"><span class="comment">             * 参数3：其他参数信息</span></span><br><span class="line"><span class="comment">             * 参数4：发送的信息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息应答"><a href="#消息应答" class="headerlink" title="消息应答"></a>消息应答</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p><img src="https://www.rabbitmq.com/img/tutorials/python-three.png" alt=""></p><p>​    消费者完成一个任务可能需要一段时间，如果其中一个消费者处理一个长的任务并仅只完成了部分突然它挂掉了，会发生什么情况？RabbitMQ一旦向消费者传递了一条消息，便立即将该消息标记为删除，在这种情况下，突然有个消费者挂掉了，我们将丢失正在处理的消息，以及后续发送给该消费这的消息，因为它无法接收到。</p><p>​    为了保证消息在发送过程中不丢失，RabbitMQ引入了消息应答机制，消息应答就是：<code>消费者在接收到消息并且处理该消息之后，告诉RabbitMQ它已经处理了，RabbitMQ可以把该消息删除了</code>；</p><h3 id="自动应该"><a href="#自动应该" class="headerlink" title="自动应该"></a>自动应该</h3><p>​    消息发送后立即被认为已经传送成功，<code>这种模式需要在高吞吐量和数据传输安全性方面做权衡</code>，因为这种模式如果消息在接收到之前，消费者那边出现连接或者channel关闭，那么消息就丢失了，当然另一方面这种模式消费者那边可以传递过载的消息，<code>没有对传递的消息数量进行限制</code>，当然这种有可能是的消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，最终使得内存消耗，最终这些消费者线程被操作系统杀死，<code>所以这种模式仅适用在消费者可以高效并以某种速率能够处理这些消息的情况下使用</code>；</p><h3 id="消息应答的方法"><a href="#消息应答的方法" class="headerlink" title="消息应答的方法"></a>消息应答的方法</h3><ol><li><p>Channel.basicAck(用于肯定确认)</p><p> RabbitMQ已知道该消息并且成功的处理消息，可以将其丢弃</p></li><li><p>Channel.basicNack（用于否定确认）</p></li><li><p>Channel.basicReject（用于否定确认） </p><p> 与Channel.basicNack相比少一个参数，不处理该消息了直接拒绝，可以将其丢弃了</p></li></ol><h3 id="multiple解释"><a href="#multiple解释" class="headerlink" title="multiple解释"></a>multiple解释</h3><ol><li><p>手动应答的好处可以批量应答并且减少网络拥堵</p></li><li><p>multiple的true和false代表不同的意思</p><p> true代表批量应答channel上未应答的消息（例：比如channel上传送tag消息5,6,7当tag=7时那么5-6这些还未应答的消息都会被确认收到消息应答）</p><p> false代表批量应答channel已应答的消息（例：只应答tag=7的消息，5,6这两个消息依然不会被确认收到应答）</p></li><li><p>实际开发中最好用false，处理完成在应答；</p></li></ol><h3 id="消息自动重新入队"><a href="#消息自动重新入队" class="headerlink" title="消息自动重新入队"></a>消息自动重新入队</h3><p>​    如果消费者用于某些原因丢失连接（其通道已关闭，连接已关闭或TCP连接丢失），导致消息未发送ACK确认，RabbitMQ将了解到消息未完全处理，并将对其重新排队，如果此时其他消费者可以处理，它将很快将其重新分发给另外一个消费者，这样，即使某个消费者偶尔死亡，也可以确保不会丢失任何消息；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/rabbitmq-4.3.5-1.png" alt=""></p><h3 id="消息手动重入队列"><a href="#消息手动重入队列" class="headerlink" title="消息手动重入队列"></a>消息手动重入队列</h3><p>​    默认消息采用的是自动应答，所以我们要想实现消息消费过程中不丢失，需要把自动应该改为手动应答；</p><p>代码：</p><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  生产者</span></span><br><span class="line"><span class="comment"> *  Work Queues（工作模式）</span></span><br><span class="line"><span class="comment"> *  消息在手动应答时是不会丢失的、要放回队列中重新消费</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String TAKS_QUEUE_NAME = <span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(TAKS_QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从控制台输入信息并发送</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String message = scanner.next();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 发送一个消费</span></span><br><span class="line"><span class="comment">             * 参数1：发送到那个交换机</span></span><br><span class="line"><span class="comment">             * 参数2：路由key值是那个  本次的是队列名称</span></span><br><span class="line"><span class="comment">             * 参数3：其他参数信息</span></span><br><span class="line"><span class="comment">             * 参数4：发送的信息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,TAKS_QUEUE_NAME,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发送消息：[&quot;</span>+message+<span class="string">&quot;] 完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者2个</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  消费者</span></span><br><span class="line"><span class="comment"> *  Work Queues（工作模式）</span></span><br><span class="line"><span class="comment"> *  消息在手动应答时是不会丢失的、要放回队列中重新消费</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker_1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String TAKS_QUEUE_NAME = <span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂连接 并返回信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line"><span class="comment">//消费者1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Worker_1 等待接收消息处理 时间较短....&quot;</span>);</span><br><span class="line"> <span class="comment">//消费者：System.out.println(&quot;Worker_2 等待接收消息处理 时间较长....&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明 接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message) -&gt;&#123;</span><br><span class="line">            <span class="comment">//消费者1：睡眠等待 --&gt; 模拟测试业务逻辑处理快</span></span><br><span class="line">            SleepUtils.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//消费者2：SleepUtils.sleep(30);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;接收到消息: &quot;</span>+ <span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">            <span class="comment">//手动应答</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数1：消息的标记 tag</span></span><br><span class="line"><span class="comment">             * 参数2：是否批量应答 true：批量应答  false：不批量应答</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(message.getEnvelope().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag) -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Worker_1 消费者取消消费 --&gt; 回调接口逻辑&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> autoAck = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消费者消费消息</span></span><br><span class="line"><span class="comment">         * 参数1：消费那个队列</span></span><br><span class="line"><span class="comment">         * 参数2：消费成功之后是否要自动应答 true自动应答 false代表手动应答</span></span><br><span class="line"><span class="comment">         * 参数3：消费者成功消费消息的回调</span></span><br><span class="line"><span class="comment">         * 参数4：消费者取消消费的回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel. basicConsume(TAKS_QUEUE_NAME,autoAck,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>测试如果其中一个消费者挂了 没有手动应答的消息将会被回收，由另外的消费者进行消费；</code></p><h2 id="RabbitMQ持久化"><a href="#RabbitMQ持久化" class="headerlink" title="RabbitMQ持久化"></a>RabbitMQ持久化</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>​    如何保证当前RabbitMQ服务停掉以后消息生产者发送过来的消息不丢失，默认情况下RabbitMQ退出或由于某种原因崩溃时，它忽视队列和消息，除非告知它不要这样做，确保消息不会丢失需要做两件事：<code>我们需要将队列和消息都标记为持久化</code>；</p><h3 id="队列如何实现持久化"><a href="#队列如何实现持久化" class="headerlink" title="队列如何实现持久化"></a>队列如何实现持久化</h3><p>​    之前我们创建的队列都是非持久化的，RabbitMQ如果重启，该队列就会被删除掉，如果要队列实现持久化，需要在声明队列的时候把durable参数设置为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(String queue, <span class="keyword">boolean</span> durable, <span class="keyword">boolean</span> exclusive, <span class="keyword">boolean</span> autoDelete, Map&lt;String, Object&gt; arguments) </span><br></pre></td></tr></table></figure><p>​    但是需要注意的就是如果之前声明的队列不是持久化的，需要把原先队列先删除或者重新创建一个持久化的队列，不然就会出现错误.</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210722205212275.png" alt="image-20210722205212275"></p><p>​    持久化队列成功之后，会有一个蓝色的D；</p><h3 id="消息如何实现持久化"><a href="#消息如何实现持久化" class="headerlink" title="消息如何实现持久化"></a>消息如何实现持久化</h3><p>​    要想让消息实现持久化需要在消息生产者修改代码，添加<code>MessageProperties.PERSISTENT_TEXT_PLAIN</code>这个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><p>​    将消息标记为持久化并不能完全保证不会丢失消息，尽管它告诉RabbitMQ将消息保存到磁盘，但是这里依然存在当消息刚准备存储在磁盘的时候，但是还没有存储完，消息还在缓存的一个间隔点，此时并没有真正写入磁盘，持久化保证性并不强，但是对于简单任务队列而言，这个还是可以了；</p><h3 id="不公平分发"><a href="#不公平分发" class="headerlink" title="不公平分发"></a>不公平分发</h3><p>​    在最开始的工作模式中，RabbitMQ分发消息采用的轮询分发，但是在某种场景下这种策略并不是很好，比如说有两个消费者在处理任务，其中有个消费者1处理 任务速度很快，而另外一个消费者2处理消息很慢，这个时候我们还是采用轮询分发的话，消费者1很大一部分时间都处于空闲状态，而处理慢的消费者2就一直干活，这种分配方式在这种情况下其实就不好，但RabbitMQ并不知道这种情况，它依然很公平的进行分发；</p><p>​    在消息接收方，也就是消费者设置<code>channel.basicQos(1)</code>,值为1，默认和0是公平分发；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//设置不公平分发（能者多劳，有的消费者处理速度快，有的处理满，避免处理快的消费者空闲）</span></span><br><span class="line">channel.basicQos(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>​    设置成功以后，在RabbitMQ管理接口的Channels里就能看到</p><p> <img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210723235035791.png" alt="image-20210723235035791"></p><p>​    如果这个任务我还没有处理完成或者我还没有应答你，你先别分配给我，我目前只能处理一个任务，然后RabbitMQ就会把该任务分配给没有那么忙的那个空闲消费者，当然如果所有的消费者都没有完成手上的任务，队列还在不停的添加新任务，队列有可能就会遇到队列被撑爆的情况，这个时候就只能添加新的worker或者改变其他存储任务的策略；</p><h3 id="预取值"><a href="#预取值" class="headerlink" title="预取值"></a>预取值</h3><p>​    本身消息的发送就是异步发送的，所以在任何时候，channel上肯定不止只有一个消息，另外来自消费者的手动确认本质上也是异步的，因此这里就存在一个未确定的消息缓冲区，因此希望开发者能<code>限制此缓冲区的大小，以避免缓冲区里面无限制的未确定消息问题</code>。这个时候就可以通过使用<code>basic.qos</code>方法设置”预取计数”值来完成，<code>该值定义通道上准许未确认消息的最大数量</code>，一旦数量达到配置的数量，RabbitMQ将停止在通道上传递更多消息，除非至少有一个未处理的消息被确认，例如：假设在通道上有未确认的消息5，6，7，8，并且通道的预取计数设置为4，此时RabbitMQ将不会在该通道上在传递任何消息。除非至少有一个未应答的消息被ack，比如说tag=6这个消息刚刚被确认ack，RabbitMQ将会感知这个情况，并在发生一条消息，消息应答和Qos预取值对用户吞吐量有重大影响，通常，增加预取值将提高向消费者传递消息的速度。<code>虽然自动应答传输消息速率是最佳的，但是在这种情况下已传递但尚未处理的信息数量也会添加，从而添加了消费者的RAM消耗（随机存取存储器）</code>应该小心使用具有无限预处理的自动确认模式或者手动确认模式，消费者消费了大量的消息，如果没有确认的话，会导致消费者连接节点的内存消耗变大，所以找到一个合适的预取值，不同的负载该值取值也不同100到300范围内的值通常可提供最佳的吞吐量，并且不会给消费者带来太大的分析，预取值为1最为保守，当然这个将使吞吐量变得很低，特别是消费者连接延迟很严重的情况下，特别是在消费者连接等待时间较长的环境中；（预取值就是提前给消费者设置一个最大的接收量，到达这个量之后，如果没有消息处理完，将不会接收消息）</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210723235035791.png" alt="image-20210723235035791"></p><h1 id="发布确认模式"><a href="#发布确认模式" class="headerlink" title="发布确认模式"></a>发布确认模式</h1><h2 id="发布确认原理"><a href="#发布确认原理" class="headerlink" title="发布确认原理"></a>发布确认原理</h2><p>​    生产者将信道设置成confirm模式，一旦信道进入confirm模式，<code>所有在该信道上面发布的消息都将会被指派一个唯一的ID</code>(从1开始)，一旦消息被投递到所有匹配的队列之后，broker就会发送一个确认给生产者（包含消息的唯一ID），这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker回传给生产者的确认消息中的delivery-tag域中包含了确认消息的序列号，此外broker也可以涉资basic，ack的multiple域，表示到这个序列号之前的所有消息都已经得到了处理。</p><p>​    confirm模式最大的好处在于它是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认信息，如果RabbitMQ因为自身内部错误导致消息丢失，就会发送一条nack消息，生产者应用程序同样可以回调方法中处理该nack消息；</p><h2 id="保证消息不丢失"><a href="#保证消息不丢失" class="headerlink" title="保证消息不丢失"></a>保证消息不丢失</h2><ol><li>设置要求队列必须持久化</li><li>设置要求队列中的消息必须持久化</li><li>发布确认（生产者发布消息到队列，由信道把消息保存在磁盘后回调生产者之后就完成了发布确认）</li></ol><h2 id="发布确策略"><a href="#发布确策略" class="headerlink" title="发布确策略"></a>发布确策略</h2><h3 id="开启发布确认"><a href="#开启发布确认" class="headerlink" title="开启发布确认"></a>开启发布确认</h3><p>​    发布确认默认是没有开启的，如果要开启需要调用方法confirmSelect，每当你想要使用发布确认，都需要在channel上调用该方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.confirmSelect();</span><br></pre></td></tr></table></figure><h3 id="单个发布确认"><a href="#单个发布确认" class="headerlink" title="单个发布确认"></a>单个发布确认</h3><p>​    它是一种<code>同步确认发布</code>的方式，也就是发布一个消息之后只有它被确认发布，后续的消息才能继续发布，<code>waitForConfirmsOrDie(long)</code>这个方法只能在消息被确认的时候才返回，如果在指定时间范围内这个消息没有被确认那么它将抛出异常；</p><blockquote><p><code>缺点</code></p></blockquote><p>​    <code>单个发布确认模式最大的缺点就是：发布速度特别的慢，因为如果没有确认发布的消息就会阻塞所有后续消息的发布，这种方式最多提供每秒不超过数百条发布信息的吞吐量</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量发消息的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_COUNT = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.单个确认</span></span><br><span class="line">        publishMessgeIndivindually();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.单个确认</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publishMessgeIndivindually</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列的声明</span></span><br><span class="line">        String queueName = UUID.randomUUID().toString();</span><br><span class="line">        channel.queueDeclare(queueName,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//开启发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//单个发布确认开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//批量发消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line">            String message = i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="comment">//单个消息就马上进行发布确认</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = channel.waitForConfirms();</span><br><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;单个确认消息发布确认失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//单个发布确认结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;单个发布确认模式 总耗时：&quot;</span>+(endTime - startTime)+<span class="string">&quot;/ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>结果：单个发布确认模式 总耗时：4631/ms</code></p><h3 id="批量发布确认"><a href="#批量发布确认" class="headerlink" title="批量发布确认"></a>批量发布确认</h3><p>​    先发布一批消息然后在一起确认可以极大的提高吞吐量；</p><blockquote><p><code>缺点</code></p></blockquote><p>​    <code>当然这种方式的缺点就是：当发生故障导致发布出现问题时，不知道是那个消息出现问题了，我们必须将整个批量处理保存在内存种，以记录重要的信息而后重新发送消息，当然这种方案也是同步的，也一样阻塞消息的发布</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量发消息的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_COUNT = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 2.批量确认</span></span><br><span class="line">        publishMessgeBatch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.批量确认</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publishMessgeBatch</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列的声明</span></span><br><span class="line">        String queueName = UUID.randomUUID().toString();</span><br><span class="line">        channel.queueDeclare(queueName,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//开启发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//批量发布确认开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//设置批量确认消息大小</span></span><br><span class="line">        <span class="keyword">int</span> batchSize = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量发消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MESSAGE_COUNT; i++) &#123;</span><br><span class="line">            String message = i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="keyword">if</span>(i%batchSize==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//批量消息发布确认</span></span><br><span class="line">                <span class="keyword">boolean</span> flag = channel.waitForConfirms();</span><br><span class="line">                <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;批量确认消息发布确认失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//批量发布确认结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;批量发布确认模式 总耗时：&quot;</span>+(endTime - startTime)+<span class="string">&quot;/ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>结果：批量发布确认模式 总耗时：92/ms</code></p><h3 id="异步发布确认"><a href="#异步发布确认" class="headerlink" title="异步发布确认"></a>异步发布确认</h3><p>​    异步确认虽然编程逻辑比上两个要复杂，但是性价比最高，无论是可靠性还是效率都很高，它是利用回调函数来达到消息可靠性传递的，这个中间件也是通过函数回调来保证是否投递成功；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210724225309456.png" alt="image-20210724225309456"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量发消息的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_COUNT = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 3.异步确认</span></span><br><span class="line">        publishMessgeAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.异步确认</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publishMessgeAsync</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列的声明</span></span><br><span class="line">        String queueName = UUID.randomUUID().toString();</span><br><span class="line">        channel.queueDeclare(queueName,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//开启发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//异步发布确认开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消息确认成功，回调函数</span></span><br><span class="line"><span class="comment">         * 参数1：消息的标记</span></span><br><span class="line"><span class="comment">         * 参数2：是否批量确认</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ConfirmCallback ackCallback = (deliveryTage, multiple) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功确认的消息：&quot;</span>+deliveryTage);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消息确认失败，回调函数</span></span><br><span class="line"><span class="comment">         * 参数1：消息的标记</span></span><br><span class="line"><span class="comment">         * 参数2：是否批量确认</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ConfirmCallback nackCallback = (deliveryTage, multiple) -&gt; &#123;</span><br><span class="line">            <span class="comment">//未能确认的消息进行重发操作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;未能确认的消息：&quot;</span>+deliveryTage);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 准备消息的监听器，监听那些消息成功，那些消息失败了</span></span><br><span class="line"><span class="comment">         * 参数1：成功的消息</span></span><br><span class="line"><span class="comment">         * 参数2：失败的消息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.addConfirmListener(ackCallback,nackCallback);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//异步发消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MESSAGE_COUNT; i++) &#123;</span><br><span class="line">            String message = i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//异步发布确认结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;异步发布确认模式 总耗时：&quot;</span>+(endTime - startTime)+<span class="string">&quot;/ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>结果：异步发布确认模式 总耗时：51/ms</code></p><h3 id="处理异步未确认消息"><a href="#处理异步未确认消息" class="headerlink" title="处理异步未确认消息"></a>处理异步未确认消息</h3><p>​    最好的解决方案就是把未确认的消息放到一个基于内存但能被发布线程访问的队列，比如说用<code>ConcurrentLinkeQueue</code>这个队列在configirm callbacks与发布线程之间进行消息的传递；</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量发消息的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_COUNT = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 3.异步确认</span></span><br><span class="line">        publishMessgeAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.异步确认</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publishMessgeAsync</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//队列的声明</span></span><br><span class="line">        String queueName = UUID.randomUUID().toString();</span><br><span class="line">        channel.queueDeclare(queueName,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//开启发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建一个线程安全有序的一个哈希表，适用于高并发的情况下</span></span><br><span class="line"><span class="comment">         * 1.轻松的将序号与消息进行关联</span></span><br><span class="line"><span class="comment">         * 2.轻松批量删除条目，只要给到序号</span></span><br><span class="line"><span class="comment">         * 3.支持高并发（多线程）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ConcurrentSkipListMap&lt;Long,String&gt; outstandingConfirms = <span class="keyword">new</span> ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//异步发布确认开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消息确认成功，回调函数</span></span><br><span class="line"><span class="comment">         * 参数1：消息的标记</span></span><br><span class="line"><span class="comment">         * 参数2：是否批量确认</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ConfirmCallback ackCallback = (deliveryTage, multiple) -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理未确认消息2：删除队列种成功确认的消息</span></span><br><span class="line">            <span class="keyword">if</span>(multiple)&#123;<span class="comment">//批量删除</span></span><br><span class="line">                ConcurrentNavigableMap&lt;Long, String&gt; confirmed = outstandingConfirms.headMap(deliveryTage);</span><br><span class="line">                confirmed.clear();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//单个删除</span></span><br><span class="line">                outstandingConfirms.remove(deliveryTage);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功确认的消息：&quot;</span>+deliveryTage);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消息确认失败，回调函数</span></span><br><span class="line"><span class="comment">         * 参数1：消息的标记</span></span><br><span class="line"><span class="comment">         * 参数2：是否批量确认</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ConfirmCallback nackCallback = (deliveryTage, multiple) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未能确认的消息：&quot;</span>+deliveryTage);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 准备消息的监听器，监听那些消息成功，那些消息失败了</span></span><br><span class="line"><span class="comment">         * 参数1：成功的消息</span></span><br><span class="line"><span class="comment">         * 参数2：失败的消息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.addConfirmListener(ackCallback,nackCallback);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//异步发消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MESSAGE_COUNT; i++) &#123;</span><br><span class="line">            String message = i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="comment">//处理未确认消息1：此处记录下所有发送的消息，消息的总和</span></span><br><span class="line">            outstandingConfirms.put(channel.getNextPublishSeqNo(),message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//异步发布确认结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;异步发布确认模式 总耗时：&quot;</span>+(endTime - startTime)+<span class="string">&quot;/ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h1><p>​    我们创建了一个工作队列。我们假设的是工作队列背后，每个任务都恰好交付给一个消费者（工作进程），在这一部分种，我们将做一些完全不同的事情，我们将消息传达多个消费者，这种模式称为“发布/订阅”；</p><p>​    例如：我们将构建一个简单的日志系统，它将由两个程序组成：第一个程序将会发出日志消息，第二个程序就是消费者，其中我们会启动两个消费者，其中一个消费者接收到消息后把日志存储在磁盘，另外一个消费者接收到消息后把消息打印在屏幕上，事实上第一个程序发出的日志消息将广播给所有消费者；</p><h2 id="Exchannge"><a href="#Exchannge" class="headerlink" title="Exchannge"></a>Exchannge</h2><h3 id="Exchannge概念"><a href="#Exchannge概念" class="headerlink" title="Exchannge概念"></a>Exchannge概念</h3><p>​    RabbitMQ消息传递模型的核心思想是：<code>生产者生产的消息从不会直接发送到队列</code>；实际上，通常生产者甚至都不知道这些消息传递到了那些队列种；</p><p>​    相反，<code>生产者只能将消息发送到交换机(exchange)</code>，交换机工作的内容非常简单，一方面它接收来自生产者的消息，另外一方面将它们推入队列，交换机必须确切知道如何处理收到的信息，是应该把这些消息放到特定队列还是说把它们放到许多队列中，还是说应该丢弃它们，这就是由交换机的类型来决定的；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210726211218657.png" alt="image-20210726211218657"></p><h3 id="Exchange类型"><a href="#Exchange类型" class="headerlink" title="Exchange类型"></a>Exchange类型</h3><ol><li>直接（direct）</li><li>主题（topic）</li><li>标题（headers）</li><li>扇出（fanout  也叫：发布订阅类型）</li></ol><h3 id="无名exchange"><a href="#无名exchange" class="headerlink" title="无名exchange"></a>无名exchange</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channl.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="keyword">null</span>,message.getBytes())</span><br></pre></td></tr></table></figure><p>​    第一个参数就是交换机的名称，空字符串表示默认或无名称交换机：消息能路由发送到队列中其实是由<code>RoutingKey(bindingkey)</code>绑定key指定的；</p><h2 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列"></a>临时队列</h2><p>​    每当我们连接到RabbitMQ时，我们都需要一个全新的空队列，为此我们可以创建一个具有<code>随机名称的队列</code>，其次<code>一旦我们断开了消费者的连接，队列将被自动删除</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建临时队列，获取临时队列的名称String queueName = channel.queueDeclare().getQueue();</span></span><br></pre></td></tr></table></figure><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210726212424646.png" alt="image-20210726212424646"></p><h2 id="绑定-bindings"><a href="#绑定-bindings" class="headerlink" title="绑定(bindings)"></a>绑定(bindings)</h2><p>​    什么是bindings？bindings其实是exchange和queue之间的桥梁，它告诉我们exchange和那个队列进行绑定关系，比如下图告诉我们的就是X与Q1和Q2进行了绑定</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210726212631829.png" alt="image-20210726212631829"></p><h2 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h2><p>​    Fanout也叫扇出交换机/发布订阅模式</p><p>​    正如名称中的那样，它就是将接收到的所有消息<code>广播</code>到它知道的所有队列中，系统默认这些exchange类型；</p><p>代码：</p><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * fanout （发布订阅模式）</span></span><br><span class="line"><span class="comment"> *  发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmitLog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String EXCHANGE_NAME = <span class="string">&quot;logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 声明一个交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：什么一个什么交换机</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从控制台输入信息并发送</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String message = scanner.next();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 发送一个消费</span></span><br><span class="line"><span class="comment">             * 参数1：发送到那个交换机</span></span><br><span class="line"><span class="comment">             * 参数2：路由key值是那个  本次的是队列名称</span></span><br><span class="line"><span class="comment">             * 参数3：其他参数信息</span></span><br><span class="line"><span class="comment">             * 参数4：发送的信息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME,<span class="string">&quot;&quot;</span>,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发送消息：[&quot;</span>+message+<span class="string">&quot;] 完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者</p></blockquote><p>启动多个消费者，输出内容改一下，其他不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * fanout （发布订阅模式）</span></span><br><span class="line"><span class="comment"> *  接收消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveLogs1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String EXCHANGE_NAME = <span class="string">&quot;logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 声明一个交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：什么一个什么交换机</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个临时队列、队列的名称是随机的</span></span><br><span class="line"><span class="comment">         * 当消费者断开与队列的连接后，队列就自动删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String queueName = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 绑定交换机与队列</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数3：路由键 空串 所有都接收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ReceiveLogs1 等待接收消息.....&quot;</span>);</span><br><span class="line">        <span class="comment">//第二个消费者</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;ReceiveLogs2 等待接收消息.....&quot;);</span></span><br><span class="line"></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTage,message) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ReceiveLogs1 接收到消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">            <span class="comment">//第二个消费者</span></span><br><span class="line">            <span class="comment">//System.out.println(&quot;ReceiveLogs2 接收到消息：&quot;+new String(message.getBody(), StandardCharsets.UTF_8));</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        channel.basicConsume(queueName,<span class="keyword">true</span>,deliverCallback,consumerTage -&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了生产者发送一条消息，两个消费者都能接收到；</p><h2 id="Direct-exchange"><a href="#Direct-exchange" class="headerlink" title="Direct exchange"></a>Direct exchange</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210726220628975.png" alt="image-20210726220628975"></p><p>​    Dorect exchange也叫直接交换机；</p><p>​    在上图中，我们可以看到X绑定了两个队列，绑定类型是<code>direct</code>，队列Q1绑定的路由键为<code>orange</code>，队列Q2绑定的路由键有两个分别是<code>black</code>和<code>green</code>;</p><p>​    在这种绑定情况下，生产者发布消息到exchange上，绑定键为<code>orange</code>的消息会被发布到队列Q1，绑定键为<code>black</code>和<code>green</code>的消息会被发布到队列Q2，其他消息的消息将被丢弃；</p><h3 id="多重绑定"><a href="#多重绑定" class="headerlink" title="多重绑定"></a>多重绑定</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210726221159152.png" alt="image-20210726221159152"></p><p>​    当然如果exchange的绑定类型是direct，<code>但是它绑定的多个队列的key如果相同</code>，这种情况下虽然绑定类型是direct<code>但是它表现的就和fanout有些类型了</code>，就跟广播差不多；</p><h3 id="练习代码"><a href="#练习代码" class="headerlink" title="练习代码"></a>练习代码</h3><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * direct （直连交换机）</span></span><br><span class="line"><span class="comment"> *  发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectLogs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String EXCHANGE_NAME = <span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 声明一个交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：什么一个什么交换机</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从控制台输入信息并发送</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String message = scanner.next();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 发送一个消费</span></span><br><span class="line"><span class="comment">             * 参数1：发送到那个交换机</span></span><br><span class="line"><span class="comment">             * 参数2：路由key值是那个  本次的是队列名称</span></span><br><span class="line"><span class="comment">             * 参数3：其他参数信息</span></span><br><span class="line"><span class="comment">             * 参数4：发送的信息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//注意：这里写的&quot;info&quot;，表示消息只发送到对于的路由键</span></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME,<span class="string">&quot;info&quot;</span>,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发送消息：[&quot;</span>+message+<span class="string">&quot;] 完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * direct （直连交换机）</span></span><br><span class="line"><span class="comment"> *  接收消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveLogsDirect1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String EXCHANGE_NAME = <span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 声明一个交换机</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数2：什么一个什么交换机</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个临时队列、队列的名称是随机的</span></span><br><span class="line"><span class="comment">         * 当消费者断开与队列的连接后，队列就自动删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;console&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 绑定交换机与队列</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数3：路由键</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//这里设置了2个路由键，可以接收对应路由键的信息</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;console&quot;</span>,EXCHANGE_NAME,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        channel.queueBind(<span class="string">&quot;console&quot;</span>,EXCHANGE_NAME,<span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;console 等待接收消息.....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTage,message) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;console 接收到消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;console&quot;</span>,<span class="keyword">true</span>,deliverCallback,consumerTage -&gt;&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Topics（主题交换机）"><a href="#Topics（主题交换机）" class="headerlink" title="Topics（主题交换机）"></a>Topics（主题交换机）</h2><h3 id="之前交换机的问题"><a href="#之前交换机的问题" class="headerlink" title="之前交换机的问题"></a>之前交换机的问题</h3><p>​    尽管使用direct交换机改进了日志收发，但是它仍然存在局限性-比如说我们想接收的日志类型又info.base和info.advantage，某个队列只想接收info.base的信息，那么这个时候direct就无法办到了，这个时候只能使用topic类型；</p><h3 id="Topic要求"><a href="#Topic要求" class="headerlink" title="Topic要求"></a>Topic要求</h3><p>​    发送的类型是topic交换机的信息，routingkey不能随便写，必须满足一定的要求。它<code>必须是一个单纯列表，以逗号分割开</code>。这些单词可以是任意单词，比如说：”stock.usd.nyse”，”quick.orange.rabbit”，这种类型的，当然这个单词列表最多不能超过255个字节；</p><p>​    <code>其中有两个替换符是需要注意的：</code></p><pre><code> 1. `*(星号)可以代替一个单词`2. `#(井号)可以代替零个或者多个单词`</code></pre><h3 id="Topic匹配案例"><a href="#Topic匹配案例" class="headerlink" title="Topic匹配案例"></a>Topic匹配案例</h3><p><img src="https://i.loli.net/2021/07/27/vErtiKeOzFoRJ9a.png" alt="image-20210727170553350"></p><ol><li>上图绑定关系如下：</li></ol><p>​    Q1—-&gt; 绑定的是：</p><p>​                中间带有orange，并且是3个单词的字符串(<code>*.orange.*</code>)</p><p>​    Q2—-&gt; 绑定的是：</p><p>​                最后一个单词是rabbit，并且是3个单词的字符串(<code>*.*.rabbit</code>)</p><p>​                第一个单词是lazy，并且是多个单词(<code>layz.#</code>)</p><ol><li>数据接收关系</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">队列名称</th><th style="text-align:center">收到消息</th></tr></thead><tbody><tr><td style="text-align:center">quick.orange.rabbit</td><td style="text-align:center">Q1，Q2</td></tr><tr><td style="text-align:center">lazy.orange.elephant</td><td style="text-align:center">Q1，Q2</td></tr><tr><td style="text-align:center">quick.orange.fox</td><td style="text-align:center">Q1</td></tr><tr><td style="text-align:center">lazy.brown.fox</td><td style="text-align:center">Q2</td></tr><tr><td style="text-align:center">lazy.pink.rabbit</td><td style="text-align:center">满足两个绑定条件但是只被Q2接收一次</td></tr><tr><td style="text-align:center">quick.brown.fox</td><td style="text-align:center">不满足条件丢弃队列</td></tr><tr><td style="text-align:center">lazy.orange.male.rabbit</td><td style="text-align:center">四个单词，但是匹配Q2</td></tr></tbody></table></div><p>当队列绑定关系是下列这种情况时需要注意：</p><p>​    <code>当一个队列绑定键是#，那么这个队列将被接收所有消息数据，就有点想fancout</code></p><p>​    <code>如果队列绑定键当中没有#和*出现，那么该队列绑定类型就是direct</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * topic （主题交换机）</span></span><br><span class="line"><span class="comment"> *  发送消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmitLogTopic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String EXCHANGE_NAME = <span class="string">&quot;topic_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建路由key</span></span><br><span class="line">        Map&lt;String,String&gt; bindingKey = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        bindingKey.put(<span class="string">&quot;quick.orange.rabbit&quot;</span>,<span class="string">&quot;Q1，Q2接收&quot;</span>);</span><br><span class="line">        bindingKey.put(<span class="string">&quot;lazy.orange.elephant&quot;</span>,<span class="string">&quot;Q1，Q2接收&quot;</span>);</span><br><span class="line">        bindingKey.put(<span class="string">&quot;quick.orange.fox&quot;</span>,<span class="string">&quot;Q1接收&quot;</span>);</span><br><span class="line">        bindingKey.put(<span class="string">&quot;lazy.brown.fox&quot;</span>,<span class="string">&quot;Q2接收&quot;</span>);</span><br><span class="line">        bindingKey.put(<span class="string">&quot;lazy.pink.rabbit&quot;</span>,<span class="string">&quot;满足两个绑定条件但是只被Q2接收一次&quot;</span>);</span><br><span class="line">        bindingKey.put(<span class="string">&quot;quick.brown.fox&quot;</span>,<span class="string">&quot;不满足条件丢弃队列&quot;</span>);</span><br><span class="line">        bindingKey.put(<span class="string">&quot;lazy.orange.male.rabbit&quot;</span>,<span class="string">&quot;四个单词，但是匹配Q2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,String&gt; bindingKeyEntry : bindingKey.entrySet())&#123;</span><br><span class="line">            <span class="comment">//路由key</span></span><br><span class="line">            String routingKey = bindingKeyEntry.getKey();</span><br><span class="line">            <span class="comment">//消息</span></span><br><span class="line">            String message = bindingKeyEntry.getValue();</span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME,routingKey,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot;[EmitLogTopic]发出消息:&quot;</span>+message);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * topic （主题交换机）</span></span><br><span class="line"><span class="comment"> *  接收消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveLogsTopic1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String EXCHANGE_NAME = <span class="string">&quot;topic_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        String queueName = <span class="string">&quot;Q1&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 绑定交换机与队列</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数3：路由键</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;*.orange.*&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;[ReceiveLogsTopic1] 等待接收消息......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag,message) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[ReceiveLogsTopic1]收到消息:&quot;</span>+<span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot;[ReceiveLogsTopic1]接收队列：&quot;</span>+queueName+<span class="string">&quot;  === 路由键：&quot;</span>+message.getEnvelope().getRoutingKey());</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queueName,<span class="keyword">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * topic （主题交换机）</span></span><br><span class="line"><span class="comment"> *  接收消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveLogsTopic2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String EXCHANGE_NAME = <span class="string">&quot;topic_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        String queueName = <span class="string">&quot;Q2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 绑定交换机与队列</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机名称</span></span><br><span class="line"><span class="comment">         * 参数3：路由键</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;*.*.rabbit&quot;</span>);</span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;lazy.#&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;[ReceiveLogsTopic2] 等待接收消息......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag,message) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[ReceiveLogsTopic2]]收到消息:&quot;</span>+<span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot;[ReceiveLogsTopic2]接收队列：&quot;</span>+queueName+<span class="string">&quot;  === 路由键：&quot;</span>+message.getEnvelope().getRoutingKey());</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queueName,<span class="keyword">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">生产者：</span><br><span class="line">[EmitLogTopic]发出消息:不满足条件丢弃队列</span><br><span class="line">[EmitLogTopic]发出消息:Q1，Q2接收</span><br><span class="line">[EmitLogTopic]发出消息:Q2接收</span><br><span class="line">[EmitLogTopic]发出消息:Q1，Q2接收</span><br><span class="line">[EmitLogTopic]发出消息:Q1接收</span><br><span class="line">[EmitLogTopic]发出消息:满足两个绑定条件但是只被Q2接收一次</span><br><span class="line">[EmitLogTopic]发出消息:四个单词，但是匹配Q2</span><br><span class="line"></span><br><span class="line">消费者1：</span><br><span class="line">[ReceiveLogsTopic1] 等待接收消息......</span><br><span class="line">[ReceiveLogsTopic1]收到消息:Q1，Q2接收</span><br><span class="line">[ReceiveLogsTopic1]接收队列：Q1  === 路由键：lazy.orange.elephant</span><br><span class="line">[ReceiveLogsTopic1]收到消息:Q1，Q2接收</span><br><span class="line">[ReceiveLogsTopic1]接收队列：Q1  === 路由键：quick.orange.rabbit</span><br><span class="line">[ReceiveLogsTopic1]收到消息:Q1接收</span><br><span class="line">[ReceiveLogsTopic1]接收队列：Q1  === 路由键：quick.orange.fox</span><br><span class="line"></span><br><span class="line">消费者2：</span><br><span class="line">[ReceiveLogsTopic2] 等待接收消息......</span><br><span class="line">[ReceiveLogsTopic2]]收到消息:Q1，Q2接收</span><br><span class="line">[ReceiveLogsTopic2]接收队列：Q2  === 路由键：lazy.orange.elephant</span><br><span class="line">[ReceiveLogsTopic2]]收到消息:Q2接收</span><br><span class="line">[ReceiveLogsTopic2]接收队列：Q2  === 路由键：lazy.brown.fox</span><br><span class="line">[ReceiveLogsTopic2]]收到消息:Q1，Q2接收</span><br><span class="line">[ReceiveLogsTopic2]接收队列：Q2  === 路由键：quick.orange.rabbit</span><br><span class="line">[ReceiveLogsTopic2]]收到消息:满足两个绑定条件但是只被Q2接收一次</span><br><span class="line">[ReceiveLogsTopic2]接收队列：Q2  === 路由键：lazy.pink.rabbit</span><br><span class="line">[ReceiveLogsTopic2]]收到消息:四个单词，但是匹配Q2</span><br><span class="line">[ReceiveLogsTopic2]接收队列：Q2  === 路由键：lazy.orange.male.rabbit</span><br></pre></td></tr></table></figure><h1 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1><h2 id="死信的概念"><a href="#死信的概念" class="headerlink" title="死信的概念"></a>死信的概念</h2><p>​        死信，顾名思义就是无法呗消费的信息，字面意思可以这样理解，一般来说，producer将消息投递到broker或者直接到queue里面，consumer从queue取出消息进行消费，但某些时候由于特定的<code>原因导致queuezhong的某些消息无法被消费</code>，这样的消息如果没有后续的处理，就会变成死信；</p><p>​    应用场景：为了保证订单业务的消息数据不丢失，需要使用到RabbitMQ的死信队列机制，当消息消费发生异常时，将消息投入死信队列中，比如说：用户在商城下单成功点击支付后在指定时间内未支付时自动失效；</p><h2 id="死信的来源"><a href="#死信的来源" class="headerlink" title="死信的来源"></a>死信的来源</h2><ol><li>消息TTL（存活时间）过期</li><li>队列达到最大长度（队列满了，无法再添加数据到mq中）</li><li>消息被拒绝（basic.reject或者basic.nack）并且requeue=false;</li></ol><h2 id="死信练习"><a href="#死信练习" class="headerlink" title="死信练习"></a>死信练习</h2><h4 id="死信结构图"><a href="#死信结构图" class="headerlink" title="死信结构图"></a>死信结构图</h4><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210727215100037.png" alt=""></p><h4 id="TTL过期"><a href="#TTL过期" class="headerlink" title="TTL过期"></a>TTL过期</h4><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死信队列</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义普通交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String NORMAL_EXCHANGE_NAME = <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        channel.exchangeDeclare(NORMAL_EXCHANGE_NAME,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">//死信消息 设置TTL时间 发送10条</span></span><br><span class="line">        AMQP.BasicProperties basicProperties = <span class="keyword">new</span> AMQP.BasicProperties().builder().expiration(<span class="string">&quot;10000&quot;</span>).build();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            String message = <span class="string">&quot;info &quot;</span>+i;</span><br><span class="line">            channel.basicPublish(NORMAL_EXCHANGE_NAME,<span class="string">&quot;normal&quot;</span>,basicProperties,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死信队列</span></span><br><span class="line"><span class="comment"> * 消费者1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义普通交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String NORMAL_EXCHANGE_NAME = <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义死信交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String DEAD_EXCHANGE_NAME = <span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义普通队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_QUEUE_NAME = <span class="string">&quot;normal_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义死信队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_QUEUE_NAME = <span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明普通交换机</span></span><br><span class="line">        channel.exchangeDeclare(NORMAL_EXCHANGE_NAME,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">//声明死信交换机</span></span><br><span class="line">        channel.exchangeDeclare(DEAD_EXCHANGE_NAME,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明普通队列</span></span><br><span class="line">        <span class="comment">//设置普通队列，如果消息过期或者队列满了，进入死信队列</span></span><br><span class="line">        Map&lt;String,Object&gt;  argument = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 设置过期时间(这个过期时间可以在生产者发送)</span></span><br><span class="line"><span class="comment">         * 参数1：x-message-ttl 固定写法 表示消息存活</span></span><br><span class="line"><span class="comment">         * 参数2：存活时间（毫秒级）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 消息成为信息之后转发到那个交换机</span></span><br><span class="line"><span class="comment">         * 参数1：x-dead-letter-exchange 固定写法 表示信件成为死信到那个交换机</span></span><br><span class="line"><span class="comment">         * 参数2：死信交换机的名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 消息从死信交换机绑定到死信队列的routingKey</span></span><br><span class="line"><span class="comment">         * 参数1：x-dead-letter-routing-key 固定写法 表示死信信件的路由键</span></span><br><span class="line"><span class="comment">         * 参数2：绑定key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">        channel.queueDeclare(NORMAL_QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,argument);</span><br><span class="line">        <span class="comment">//声明死信队列</span></span><br><span class="line">        channel.queueDeclare(DEAD_QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通交换机与普通队队列绑定</span></span><br><span class="line">        channel.queueBind(NORMAL_QUEUE_NAME,NORMAL_EXCHANGE_NAME,<span class="string">&quot;normal&quot;</span>);</span><br><span class="line">        <span class="comment">//死信交换机与死信队队列绑定</span></span><br><span class="line">        channel.queueBind(DEAD_QUEUE_NAME,DEAD_EXCHANGE_NAME,<span class="string">&quot;dead&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;【Consumer1】等待接收消息..........&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*---------------------------------正常接收------------------------------------------*/</span></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【Consumer1】接收到消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//普通接收消息</span></span><br><span class="line">        channel.basicConsume(NORMAL_QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,consumerTag-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动消费者1，然后关闭；模拟消费者无法接收消息，然后启动生产者</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210727224135297.png" alt="image-20210727224135297"></p><p>开始消息在<code>norma_queue</code>队列里面，TTL过期之后跑到<code>dead_queue</code>里面去了；</p><blockquote><p>消费者2 接收死信队列消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死信队列</span></span><br><span class="line"><span class="comment"> * 消费者2  -&gt; 接收死信队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义死信交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String DEAD_EXCHANGE_NAME = <span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义死信队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_QUEUE_NAME = <span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明死信交换机</span></span><br><span class="line">        channel.exchangeDeclare(DEAD_EXCHANGE_NAME,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;【Consumer2】等待接收消息..........&quot;</span>);</span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【Consumer2】死信接收到消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//死信接收消息</span></span><br><span class="line">        channel.basicConsume(DEAD_QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,consumerTag-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">【Consumer2】等待接收消息..........</span><br><span class="line">【Consumer2】死信接收到消息：info <span class="number">1</span></span><br><span class="line">【Consumer2】死信接收到消息：info <span class="number">2</span></span><br><span class="line">【Consumer2】死信接收到消息：info <span class="number">3</span></span><br><span class="line">【Consumer2】死信接收到消息：info <span class="number">4</span></span><br><span class="line">【Consumer2】死信接收到消息：info <span class="number">5</span></span><br><span class="line">【Consumer2】死信接收到消息：info <span class="number">6</span></span><br><span class="line">【Consumer2】死信接收到消息：info <span class="number">7</span></span><br><span class="line">【Consumer2】死信接收到消息：info <span class="number">8</span></span><br><span class="line">【Consumer2】死信接收到消息：info <span class="number">9</span></span><br><span class="line">【Consumer2】死信接收到消息：info <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="队列到达最大长度"><a href="#队列到达最大长度" class="headerlink" title="队列到达最大长度"></a>队列到达最大长度</h4><p>8.3.2中TTL过期中的消费者1添加队列最大长度即可，然后把生产者的过期时间去掉，因为当前需要测试的是队列到达最大长度，无法接收收据进入死信队列；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 设置队列最大长度</span></span><br><span class="line"><span class="comment"> * 参数1：x-max-length 固定写法 队列最大长度</span></span><br><span class="line"><span class="comment"> * 参数2：队列的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">argument.put(<span class="string">&quot;x-max-length&quot;</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure><p> <img src="https://i.loli.net/2021/07/28/QJTS7AkrH1atRU8.png" alt="image-20210728164054754"></p><p>出现<code>Lim</code>就说明设置成功了；</p><h4 id="消息被绝"><a href="#消息被绝" class="headerlink" title="消息被绝"></a>消息被绝</h4><p>8.3.2中TTL过期中的消费者1改成以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死信队列</span></span><br><span class="line"><span class="comment"> * 消费者1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义普通交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String NORMAL_EXCHANGE_NAME = <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义死信交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String DEAD_EXCHANGE_NAME = <span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义普通队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_QUEUE_NAME = <span class="string">&quot;normal_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义死信队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_QUEUE_NAME = <span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Channel channel = RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="comment">//声明普通交换机</span></span><br><span class="line">        channel.exchangeDeclare(NORMAL_EXCHANGE_NAME,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">//声明死信交换机</span></span><br><span class="line">        channel.exchangeDeclare(DEAD_EXCHANGE_NAME,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明普通队列</span></span><br><span class="line">        <span class="comment">//设置普通队列，如果消息过期或者队列满了，进入死信队列</span></span><br><span class="line">        Map&lt;String,Object&gt;  argument = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 设置过期时间(这个过期时间可以在生产者发送)</span></span><br><span class="line"><span class="comment">         * 参数1：x-message-ttl 固定写法 表示消息存活</span></span><br><span class="line"><span class="comment">         * 参数2：存活时间（毫秒级）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 消息成为信息之后转发到那个交换机</span></span><br><span class="line"><span class="comment">         * 参数1：x-dead-letter-exchange 固定写法 表示信件成为死信到那个交换机</span></span><br><span class="line"><span class="comment">         * 参数2：死信交换机的名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 消息从死信交换机绑定到死信队列的routingKey</span></span><br><span class="line"><span class="comment">         * 参数1：x-dead-letter-routing-key 固定写法 表示死信信件的路由键</span></span><br><span class="line"><span class="comment">         * 参数2：绑定key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">        channel.queueDeclare(NORMAL_QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,argument);</span><br><span class="line">        <span class="comment">//声明死信队列</span></span><br><span class="line">        channel.queueDeclare(DEAD_QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通交换机与普通队队列绑定</span></span><br><span class="line">        channel.queueBind(NORMAL_QUEUE_NAME,NORMAL_EXCHANGE_NAME,<span class="string">&quot;normal&quot;</span>);</span><br><span class="line">        <span class="comment">//死信交换机与死信队队列绑定</span></span><br><span class="line">        channel.queueBind(DEAD_QUEUE_NAME,DEAD_EXCHANGE_NAME,<span class="string">&quot;dead&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;【Consumer1】等待接收消息..........&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*---------------------------------拒绝接收------------------------------------------*/</span></span><br><span class="line">        DeliverCallback deliverCallbacks = (consumerTag,message)-&gt;&#123;</span><br><span class="line">            <span class="comment">//如果像info 2就拒绝接收</span></span><br><span class="line">            <span class="keyword">if</span>(message.getBody().equals(<span class="string">&quot;info 2&quot;</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;【Consumer1】拒绝接收到消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">                <span class="comment">//拒绝接收</span></span><br><span class="line">                channel.basicReject(message.getEnvelope().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;【Consumer1】接收到消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">                channel.basicAck(message.getEnvelope().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//普通接收消息  开启手动应答</span></span><br><span class="line">        channel.basicConsume(NORMAL_QUEUE_NAME,<span class="keyword">false</span>,deliverCallbacks,consumerTag-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><h3 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h3><p>​    延迟队列，队列内部是有序的，最重要的特性就体现在它的延迟属性上，延迟队列中的元素是希望在指定时间到了以后或之前取出和处理，简单来说，延迟队列就是用来存放需要在指定时间被处理的元素的队列；</p><h3 id="延迟队列使用场景"><a href="#延迟队列使用场景" class="headerlink" title="延迟队列使用场景"></a>延迟队列使用场景</h3><ol><li>订单在十分钟之内未支付则自动取消；</li><li>新创建的店铺，如果在十天内没有上传过商品，则自动发送消息提醒；</li><li>用户注册完成后，如果三天没有登陆则进行短信提醒； </li><li>用户发起退款，如果三天内没有得到处理则通知相关人员；</li><li>预定会议后，需要在预定的时间点前十分钟通知各个与会议人员参见；</li></ol><h3 id="队列TTL"><a href="#队列TTL" class="headerlink" title="队列TTL"></a>队列TTL</h3><h3 id="案例图"><a href="#案例图" class="headerlink" title="案例图"></a>案例图</h3><p>​    创建两个队列QA和QB，两者队列TTL分别设置为10S和40S，然后在创建一个交换机X和死信交换机Y，它们的类型都是direct，吹开你一个死信队列QD，它们的绑定关系如下：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210728213203454.png" alt="image-20210728213203454"></p><h3 id="springboot使用rabbitmq"><a href="#springboot使用rabbitmq" class="headerlink" title="springboot使用rabbitmq"></a>springboot使用rabbitmq</h3><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- RabbitMQ 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><blockquote><p>ttl配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TTL队列 配置文件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TtlQueueConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_EXCHANGE = <span class="string">&quot;X&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String Y_DEAD_EXCHANGE = <span class="string">&quot;Y&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_QA = <span class="string">&quot;QA&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_QB = <span class="string">&quot;QB&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_QC= <span class="string">&quot;QC&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_LETTER_QUEUE = <span class="string">&quot;QD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明普通交换机 xExchange 别名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DirectExchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;xExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">xExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(X_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明死信交换机 xExchange 别名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DirectExchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;yExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">yExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(Y_DEAD_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明普通队列QA 消息存活时间10s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueQa&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueQa</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//设置10秒存活</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">//设置满足条件转入死信交换机 Y_DEAD_EXCHANGE</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_EXCHANGE);</span><br><span class="line">        <span class="comment">//设置满足条件转入死信交换机 绑定key</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_QA).withArguments(arguments).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明普通队列QA 消息存活时间40s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueQb&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueQb</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//设置40秒存活</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">40000</span>);</span><br><span class="line">        <span class="comment">//设置满足条件转入死信交换机 Y_DEAD_EXCHANGE</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_EXCHANGE);</span><br><span class="line">        <span class="comment">//设置满足条件转入死信交换机 绑定key</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_QB).withArguments(arguments).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明普通队列QC 不设置存活时间，时间由生产者来订</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueQc&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueQc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//设置满足条件转入死信交换机 Y_DEAD_EXCHANGE</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_EXCHANGE);</span><br><span class="line">        <span class="comment">//设置满足条件转入死信交换机 绑定key</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_QC).withArguments(arguments).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明死信队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;deadQueueQd&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">deadQueueQd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(DEAD_LETTER_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定普通交换机X与普通队列QA</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueQa 普通队列QA</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xExchange 普通交换机X</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> GenericArgumentsConfigurer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">queueQaBindingXexchange</span><span class="params">(<span class="meta">@Qualifier(&quot;queueQa&quot;)</span> Queue queueQa,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  <span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueQa).to(xExchange).with(<span class="string">&quot;XA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定普通交换机X与普通队列QB</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueQb 普通队列QB</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xExchange 普通交换机X</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> GenericArgumentsConfigurer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">queueQbBindingXexchange</span><span class="params">(<span class="meta">@Qualifier(&quot;queueQb&quot;)</span>Queue queueQb, <span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueQb).to(xExchange).with(<span class="string">&quot;XB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定死信交换机Y与死信队列QD</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deadQueueQd 死信队列QD</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> yExchange 死信交换机Y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> GenericArgumentsConfigurer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">queueQdBindingYexchange</span><span class="params">(<span class="meta">@Qualifier(&quot;deadQueueQd&quot;)</span>Queue deadQueueQd, <span class="meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadQueueQd).to(yExchange).with(<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定普通交换机X与普通队列QC</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queueQc 普通队列QC</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> yExchange 普通交换机X</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> GenericArgumentsConfigurer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">queueQcBindingYexchange</span><span class="params">(<span class="meta">@Qualifier(&quot;queueQc&quot;)</span>Queue queueQc, <span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange yExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueQc).to(yExchange).with(<span class="string">&quot;XC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>死信消费</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列TTL 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLetterQueueConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues=&quot;QD&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveQd</span><span class="params">(Message message, Channel channel)</span></span>&#123;</span><br><span class="line">         String msg = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">         log.info(<span class="string">&quot;当前时间：&#123;&#125;，收到死信队列的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date().toString(),msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送延迟消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ttl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMsgController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMsg/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span></span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;当前时间：&#123;&#125;，发送一条信息给两个TTL队列:&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date().toString(),message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XA&quot;</span>,<span class="string">&quot;消息来自TTL为10s的队列：&quot;</span>+message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XB&quot;</span>,<span class="string">&quot;消息来自TTL为40s的队列：&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMsg/ttl/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTtlMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;，发送一条自定义过期时间的消息给队列:&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date().toString(),message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XC&quot;</span>,<span class="string">&quot;发送一条自定义过期时间的消息给队：&quot;</span>+message,msg-&gt;&#123;</span><br><span class="line">            <span class="comment">//设置过期时间</span></span><br><span class="line">            msg.getMessageProperties().setExpiration(<span class="string">&quot;20000&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中QC的案例图如下:</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210729220414499.png" alt="image-20210729220414499"></p><p>因为QA和QB都是在声明队列 设置TTL，所以加入了QC，QC就是在发送方设置TTL时间这样更灵活；</p><blockquote><p>RabbitMQ死信的缺陷</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">执行：</span><br><span class="line">http://127.0.0.1:8080/ttl/sendMsg/ttl/这是第一条信息/20000</span><br><span class="line">http://127.0.0.1:8080/ttl/sendMsg/ttl/这是第二条信息/2000</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">当前时间：Thu Jul 29 22:12:23 CST 2021，发送一条自定义过期时间:20000/ms ==&gt; 给队列:这是第一条信息</span><br><span class="line">当前时间：Thu Jul 29 22:12:24 CST 2021，发送一条自定义过期时间:2000/ms ==&gt; 给队列:这是第二条信息</span><br><span class="line"></span><br><span class="line">当前时间：Thu Jul 29 22:12:43 CST 2021，收到死信队列的消息：发送一条自定义过期时间的消息给队：这是第一条信息</span><br><span class="line">当前时间：Thu Jul 29 22:12:43 CST 2021，收到死信队列的消息：发送一条自定义过期时间的消息给队：这是第二条信息</span><br></pre></td></tr></table></figure><p>为什么第二条信息没有先执行呢?</p><p>​    <code>因为RabbitMQ只会检查第一条信息是否过期，如果没有过期它会继续等待过期</code></p><h2 id="插件实现延迟队列"><a href="#插件实现延迟队列" class="headerlink" title="插件实现延迟队列"></a>插件实现延迟队列</h2><h3 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h3><p>下载与安装的Rabbitmq匹配的<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/v3.8.">rabbitmq-delayed-message-exchange</a></p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210801205621453.png" alt="image-20210801205621453"></p><h3 id="docker安装此插件"><a href="#docker安装此插件" class="headerlink" title="docker安装此插件"></a>docker安装此插件</h3><p>1.上传插件到服务器</p><p>2.安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 拷贝插件到rabbitmq容器</span><br><span class="line">docker cp /rabbitmq_delayed_message_exchange-3.8.0.ez 容器id:/plugins</span><br><span class="line"></span><br><span class="line">2.进入容器</span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line"></span><br><span class="line">3.启动插件</span><br><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br><span class="line"></span><br><span class="line">4.查看是否启动</span><br><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210801210855798.png" alt="image-20210801210855798"></p><p>如果出现<code>rabbitmq_delayed_message_exchange</code>说明成功了！</p><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p>​    在这里新增一个队列delayed.queue，一个自定义交换机delayed.exchange，绑定关系如下</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210801211404559.png" alt="image-20210801211404559"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><blockquote><p>配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedQueueConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明延迟队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String DELAYED_QUEUE_NAME = <span class="string">&quot;delayed.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明延迟交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  String DELAYED_EXCHANGE_NAME = <span class="string">&quot;delayed.exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明延迟路由key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_ROUTING_KEY = <span class="string">&quot;delayed.routing.key&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;delayedExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomExchange <span class="title">delayedExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：交换机的名称</span></span><br><span class="line"><span class="comment">         * 参数2：交换机的类型</span></span><br><span class="line"><span class="comment">         * 参数3：是否需要持久化</span></span><br><span class="line"><span class="comment">         * 参数4：是否需要自动删除</span></span><br><span class="line"><span class="comment">         * 参数5：自定义参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        arguments.put(<span class="string">&quot;x-delayed-type&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(DELAYED_EXCHANGE_NAME,<span class="string">&quot;x-delayed-message&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,arguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;delayedQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayedQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        arguments.put(<span class="string">&quot;x-delayed-type&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(DELAYED_QUEUE_NAME).withArguments(arguments).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定交换机和队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delayedQueue 队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customExchange 交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">delayedQueueBindingDelayedExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;delayedQueue&quot;)</span> Queue delayedQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                                           <span class="meta">@Qualifier(&quot;delayedExchange&quot;)</span> CustomExchange customExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue).to(customExchange).with(DELAYED_ROUTING_KEY).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送延迟消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ttl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMsgController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带插件的</span></span><br><span class="line"><span class="comment">     * 自定义时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendDelayedMsg/&#123;message&#125;/&#123;time&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendDelayedMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message,<span class="meta">@PathVariable</span> Integer time)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;，发送一条自定义过期时间:&#123;&#125; ==&gt; 给带了插件的延迟队列:&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date().toString(),time+<span class="string">&quot;ms&quot;</span>,message);</span><br><span class="line">        rabbitTemplate.convertAndSend(DelayedQueueConfig.DELAYED_EXCHANGE_NAME,DelayedQueueConfig.DELAYED_ROUTING_KEY,<span class="string">&quot;发送一条自定义过期时间的消息给带了插件的延迟队列：&quot;</span>+message, msg-&gt;&#123;</span><br><span class="line">            <span class="comment">//设置过期时间</span></span><br><span class="line">            msg.getMessageProperties().setDelay(time);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于插件的延迟队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedQueueConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues=DelayedQueueConfig.DELAYED_QUEUE_NAME)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveDelayed</span><span class="params">(Message message, Channel channel)</span></span>&#123;</span><br><span class="line">        String msg = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;，收到基于插件的延迟队列的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date().toString(),msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>先发送20s的：<code>http://127.0.0.1:8080/ttl/sendDelayedMsg/第一条数据/20000</code></p><p>在发送2s的：<code>http://127.0.0.1:8080/ttl/sendDelayedMsg/第二条数据/2000</code></p><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前时间：Sun Aug 01 21:41:24 CST 2021，发送一条自定义过期时间:20000ms ==&gt; 给带了插件的延迟队列:第一条数据</span><br><span class="line">当前时间：Sun Aug 01 21:41:26 CST 2021，发送一条自定义过期时间:2000ms ==&gt; 给带了插件的延迟队列:第二条数据</span><br><span class="line">当前时间：Sun Aug 01 21:41:28 CST 2021，收到基于插件的延迟队列的消息：发送一条自定义过期时间的消息给带了插件的延迟队列：第二条数据</span><br><span class="line">当前时间：Sun Aug 01 21:41:44 CST 2021，收到基于插件的延迟队列的消息：发送一条自定义过期时间的消息给带了插件的延迟队列：第一条数据</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    延迟队列在需要延时处理的场景下非常有用，使用RabbitMQ来实现延时队列可以很好的利用RabbitMQ的特性，如：消息可靠发送、消息可靠投递、死信队列来保障消息至少被消费一次以及未被正确处理的消息不会被丢弃，另外，通过RabbitMQ集群的特性，可以很好的解决单点故障问题，不会因为单个接点挂掉导致延时队列不可用或者消息丢失；</p>]]></content>
    
    
    <summary type="html">rabbitmq</summary>
    
    
    
    <category term="中间件" scheme="https://www.isfate.xyz/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="消息中间件" scheme="https://www.isfate.xyz/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="rabbitmq" scheme="https://www.isfate.xyz/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq学习(一)</title>
    <link href="https://www.isfate.xyz/article/fc7b4587.html"/>
    <id>https://www.isfate.xyz/article/fc7b4587.html</id>
    <published>2021-08-06T10:28:28.000Z</published>
    <updated>2022-03-04T06:52:02.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MQ的概念"><a href="#MQ的概念" class="headerlink" title="MQ的概念"></a>MQ的概念</h1><h2 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h2><p>​    MQ(message queue),从字面意思上看，本质是个队列，FIFO先入先出，只不过队列中存放的内容是message而已，还是一种跨进程的通信机制，用于上下游传递消息，在互联网架构中，MQ是一种非常常见的上下游“逻辑解耦+福利解耦”的消息通信服务。使用MQ之后，消息发送上游只需要依赖MQ，不依赖其他服务。</p><h2 id="为什么使用MQ"><a href="#为什么使用MQ" class="headerlink" title="为什么使用MQ"></a>为什么使用MQ</h2><blockquote><p><code>流浪削峰</code></p></blockquote><p>​    如果订单系统最多处理一万次订单，这个处理应付正常时段的下单没有问题，正常时段我们下单一秒后就能返回结果，但是在高峰期，如果又两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单几十秒后才能收到下单成功的操作，但是比不能下单体验要好。</p><blockquote><p><code>应用解耦</code></p></blockquote><p>​    以电商应用为例，应该中有订单系统、库存系统、物流系统等等，用户创建订单后，如果耦合调用库存系统、物流系统等等，任何一个子系统出现故障，都会照成下单异常，当转变成基于消息队列的方式后，系统间调用问题回减少很多，比如物流系统因为发生故障，需要几分钟修复，在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成，当物流系统恢复后，继续处理订单信息即可，用户既感受不到物流系统故障，也提升系统的可用性。</p><blockquote><p><code>异步处理</code></p></blockquote><p>​    有些服务间调用是异步的，例如A调用B，B需要花费很长时间执行，但是A需要知道B什么时候可以执行，以前一般有两种方式，A过一段时间调用B的查询api查询，或者A执行一个callback api，B执行完之后调用api通知A服务，这两种方式都不是很优雅，使用消息总线，可以很方便解决这个问题，A调用B服务之后，只需要监听B服务完成的消息，当B处理完成后，回发送一条消息给MQ，MQ会将此细心转发给A服务，这样A服务即不用循环调用B的查询api，也不要提供callback api，同样B服务也不用做这些操作，A服务还能及时的得到异步处理完成的消息。</p><h2 id="MQ的分类"><a href="#MQ的分类" class="headerlink" title="MQ的分类"></a>MQ的分类</h2><blockquote><p><code>ActiveMQ</code></p></blockquote><p>优点：单机吞吐量万级，时效性毫秒，可用性高，基于主从架构实现高可用性，消息丢失概率很低；</p><p>缺点：官方社区对ActiveMQ5.x维护越来越少，该吞吐量场景较少使用；</p><blockquote><p><code>Kafka</code></p></blockquote><p>优点：</p><ol><li>性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高</li><li>时效性：ms级</li><li>可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</li><li>消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次</li><li>有优秀的第三方Kafka Web管理界面Kafka-Manager</li><li>在日志领域比较成熟，被多家公司和多个开源项目使用</li><li>功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用</li></ol><p>缺点：</p><ol><li>Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长</li><li>使用短轮询方式，实时性取决于轮询间隔时间</li><li>消费失败不支持重试，意味消息会丢失</li><li>支持消息顺序，但是一台代理宕机后，就会产生消息乱序</li><li>社区更新较慢</li></ol><blockquote><p><code>RocketMQ</code></p></blockquote><p>优点：</p><ol><li>单机吞吐量：十万级</li><li>可用性：非常高，分布式架构</li><li>消息可靠性：经过参数优化配置，消息可以做到0丢失</li><li>功能支持：MQ功能较为完善，还是分布式的，扩展性好</li><li>支持10亿级别的消息堆积，不会因为堆积导致性能下降</li><li>源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控</li></ol><p>缺点：</p><ol><li>支持的客户端语言不多，目前是java及c++，其中c++不成熟</li><li>社区活跃度一般</li><li>没有在 mq 核心中去实现JMS等接口，有些系统要迁移需要修改大量代码</li></ol><blockquote><p><code>RabbitMQ</code></p></blockquote><p>优点：</p><ol><li>由于erlang语言的特性，mq 性能较好，高并发</li><li>吞吐量到万级，MQ功能比较完备</li><li>健壮、稳定、易用、跨平台、支持多种语言、文档齐全</li><li>开源提供的管理界面非常棒，用起来很好用</li><li>社区活跃度高</li></ol><p>缺点：</p><ol><li>erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug，不利于做二次开发和维护</li><li>RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重</li><li>需要学习比较复杂的接口和协议，学习和维护成本较高</li></ol><h2 id="MQ的选择"><a href="#MQ的选择" class="headerlink" title="MQ的选择"></a>MQ的选择</h2><blockquote><p>Kafka</p></blockquote><p>​    Kafka住要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生大量数据的互联网服务的数据收集业务，如果有日志采集功能，肯定是首选Kafka。</p><blockquote><p>RocketMQ</p></blockquote><p>​    为<code>金融互联网</code>领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣费，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况，RocketMQ在稳定性上可能更值得依赖，这些业务场景在阿里双11已经经历过多次考验。</p><blockquote><p>RabbitMQ</p></blockquote><p>​    结合erlang语言本身的并发优势，性能好时效性微秒级， 社区活跃也比较高，管理界面十分方便，如果你的数据量没有那么大，可以使用。</p><h1 id="RabbitMQ-概念"><a href="#RabbitMQ-概念" class="headerlink" title="RabbitMQ 概念"></a>RabbitMQ 概念</h1><h2 id="RabbitMQ的是什么"><a href="#RabbitMQ的是什么" class="headerlink" title="RabbitMQ的是什么"></a>RabbitMQ的是什么</h2><p>​    RabbitMQ是一个消息中间件：它接受并转发消息，你可以把它当做一个快递站点，当你要发送一个包裹时，你把你的包裹放在快递柜，快递员最终会把你的快递送到收件人哪里，按照这种逻辑RabbitMQ是一个快递站，一个快递员帮你传递快件，RabbitMQ与快递站的主要区别在于，它不处理快件而是接收，储存和转发消息数据。</p><h2 id="RabbitMQ-四大核心"><a href="#RabbitMQ-四大核心" class="headerlink" title="RabbitMQ 四大核心"></a>RabbitMQ 四大核心</h2><blockquote><p>生产者</p></blockquote><p>​    生产数据发送消息的程序时生产者</p><blockquote><p>交换机</p></blockquote><p>​    交换机是RabbitMQ非常重要的一个部分，一方面它收到来自生产者的消息，另一方面它将消息推送到队列中，交换机必须确切知道如何处理它接受到的消息，是将这些消息推送到特定队列还是推到多个队列，亦或者把消息丢弃，这个要有交换机类型决定；</p><blockquote><p>队列</p></blockquote><p>​    队列是RabbitMQ内部使用的一种数据结构，尽管消息流经RabbitMQ和应用程序，但它们只能存储在队列中，队列仅受主机和磁盘限制的约束，本质上是一个大的消息缓冲区，许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据，这就是我们使用队列的方式。</p><blockquote><p>消费者</p></blockquote><p>​    消费与接收具有相似的含义，消费者大多时候是一个等待接收消息的程序，消费者和消息中间件很多时候并不在同一机器上，同一个应用程序既可以是生产者又可以是消费者。</p><p>​    </p><h2 id="RabbitMQ-六大模式"><a href="#RabbitMQ-六大模式" class="headerlink" title="RabbitMQ 六大模式"></a>RabbitMQ 六大模式</h2><ol><li>Hello World (简单模式)</li><li>Work queues（工作模式）</li><li>Publish/Subscribe（发布/订阅模式）</li><li>Routing（路由模式）</li><li>Topics（主题模式）</li><li>Publisher Confirms（发布确认模式）</li></ol><h2 id="RabbitMQ-工作原理"><a href="#RabbitMQ-工作原理" class="headerlink" title="RabbitMQ 工作原理"></a>RabbitMQ 工作原理</h2><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210717125101.png" alt=""></p><p><code>Broker</code>：接收和分发消息的应用，RabbitMQ Server就是Message Broker</p><p><code>Virtual host</code>：出于多租户和安全因素设计的，把AMQP的基本组件划分到一个虚拟的分组中，类似于网络中namespace概念，当多个租户使用同一个RabbitMQ Server提供的服务时，可以划分出多个vhost，每个用户在自己的vhost创建exchange/queue等。</p><p><code>Connection（连接）</code>：publisher/consumer和broker之间的TCP连接。</p><p><code>Channel（信道）</code>：如果每一次访问RabbitMQ都建立一个Connection，在消息量大的时候建立TCP Connection的开销将变得巨大，效率也降低。Channel时在connection内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的channel进行通讯，AMQP method包含了channel id帮助客户端和message broker识别channel，所以channel之间时完全隔离的，Channel作为轻量级的Connection极大减少了操作系统建立TCP connection开销。</p><p><code>Exchange（交换机）</code>：message到达broker的第一站，根据分发规则，匹配查询表中的routing key，分发到消息到queue中去，常用的类型有：direct（point-to-point）,topic（publish-subscribe）and fanout(multicast)</p><p><code>Queue（队列）</code>：消息最终被送到这里等待consumer取走</p><p><code>Bindi5ng（绑定）</code>：exchange和queue之间的虚拟连接，binding中可以包含routing key，Binding信息被保存在exchange中的查询表中，用于message的分发依据；</p><h1 id="RabbitMQ-安装"><a href="#RabbitMQ-安装" class="headerlink" title="RabbitMQ 安装"></a>RabbitMQ 安装</h1><p>这里采用最简单的docker安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.拉取镜像</span><br><span class="line">docker pull rabbitmq:3.7-management</span><br><span class="line"></span><br><span class="line">2.启动一个容器并增加rabbitmq账号密码</span><br><span class="line">docker run -d --hostname myrabbit --name rabbit -e RABBITMQ_DEFAULT_USER=账号 -e RABBITMQ_DEFAULT_PASS=密码 -p 15672:15672 -p 5672:5672 rabbitmq:3.7-management</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">rabbitmq</summary>
    
    
    
    <category term="中间件" scheme="https://www.isfate.xyz/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="消息中间件" scheme="https://www.isfate.xyz/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="rabbitmq" scheme="https://www.isfate.xyz/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba学习-二</title>
    <link href="https://www.isfate.xyz/article/f3b61b38.html"/>
    <id>https://www.isfate.xyz/article/f3b61b38.html</id>
    <published>2021-07-04T02:30:36.000Z</published>
    <updated>2022-02-07T12:05:26.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h1><p>(非alibaba)spring cloud gateway提供一种简单而有效的方法来路由到API，并为他们提供跨领域的关注，例如：安全性、监控/度量和弹性；能够匹配任何请求属性上的路由、谓词和过滤器特定于路由、Hystrix断路器集成、spring cloud DiscoveryClient（服务发现）集成、请求速率限制、路径改写等等；</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><blockquote><p>1、加入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring boot actuator 监控依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nacos 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring cloud alibaba sentinel 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring-cloud-starter-gateway 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spring boot actuator 可以通过端点查看spring boot运行情况</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">jmx:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">health:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-service-gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 网关配置</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="comment"># 启动discoveryClient 网关集成,可以实现服务的发现</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 配置网关路由转发规则</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">          <span class="comment"># id唯一</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="comment"># lb:// 固定写法，表示负载均衡</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="comment"># 谓词：判断是否匹配</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/test,</span> <span class="string">/index</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 服务注册发现nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">2020Fate!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># sentinel 管理后台</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><blockquote><p>3、测试</p></blockquote><p>访问<code>127.0.0.1/test?number=1</code>，就能访问到了</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>1、<code>路由</code>：网关的基本构件组成，它由<code>ID</code>、<code>目标url</code>、<code>谓词集合</code>和<code>过滤集合</code>组成，如果聚合谓词为true，则匹配路由；</p><p>2、<code>谓词</code>：这是Java8函数谓词，输入类型是Spring Framework ServerWebExchange，这个使用你可以匹配的HTTP请求中所有内容，例如标头或参数；</p><p>3、<code>过滤器</code>：这些是使用特定工厂构造的Spring Framework ServerWebExchange实例，这里你可以在发送下游请求之前或之后修改请求的响应；</p><h2 id="GateWay如何工作"><a href="#GateWay如何工作" class="headerlink" title="GateWay如何工作"></a>GateWay如何工作</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210915173458996.png" alt="image-20210915173458996"></p><p>客户端向Spring Cloud GateWay发出请求，如果网关处理程序映射确定请求于路由匹配，则将其发送到网关web处理程序，该处理程序通过特定于请求的过滤器运行请求，筛选器又虚线分隔的原因是，筛选器可以在发送代理请求之前和之后运行逻辑，所有<code>前置</code>过过滤器逻辑均被执行，然后发出代理请求，发出代理请求后，将运行后过滤器逻辑，在没有端口的路由中定义url、http和https url的默认端口值分别为80和443；</p><h2 id="谓词工厂"><a href="#谓词工厂" class="headerlink" title="谓词工厂"></a>谓词工厂</h2><p>总共有11个路由谓词工厂</p><h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><p>After route谓词工厂采用一个参数，即datetime（这是一个Java ZonedDateTime）</p><p>该谓词匹配在指定日期时间之后发生的请求；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">After=2021-09-15T17:55:55.789+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><p>这个路由表示2021年9月15日17:55:55之后可以访问；</p><p>这个时间可以通过<code>System.out.println(ZonedDateTime.now())</code>获取</p><h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><p>Before 路由谓词工厂采用一个参数，即datetime（这是一个Java ZonedDateTime）</p><p>该谓词匹配在指定日期时间之前发生的请求</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Before=2021-09-15T17:55:55.789+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><p>这个表示2021年9月15日17:55:55之前可以访问；</p><h3 id="Between"><a href="#Between" class="headerlink" title="Between"></a>Between</h3><p>Between  路由谓词工厂采用二个参数，即datetime（这是一个Java ZonedDateTime）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Between=2021-09-15T17:55:55.789+08:00[Asia/Shanghai]，2021-09-16T17:55:55.789+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><p>这个路由表示在2021年9月15日17:55:55之后到2021-09-16T17:55:55之前可以访问；（区间）</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>cookie路由谓词工厂采用两个参数，即cookie名称和一个regexp（这是Java正则表达式），该谓词匹配具有给定名称且其值与正则表达式匹配的cookie;</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Cookie=tokent，123456</span></span><br></pre></td></tr></table></figure><p>测试访问<code>curl 127.0.0.1/test --cookie token=123456</code></p><p>如果请求地址后面不带<code>--cookie token=123456</code>是无法访问的；</p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>header 路由谓词工厂使用两个参数，header名称和一个regexp（这是Java正则表达式），该谓词匹配具有给定名称且其值与正则表达式匹配的header ;</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Header=X-Request-d，\d+</span></span><br></pre></td></tr></table></figure><p>如果请求具有名为X-Request-d的标头，且其值与\d+正则表达式匹配（其值为一个或者多个数字），则匹配路由；</p><p>测试访问 <code>curl 127.0.0.1/test --header ”X-Request-d:12345“</code></p><h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><p>host路由谓词工厂使用一个参数：主机名模式列表。该模式是带有Ant样式的模式，作为分隔符，该谓词与匹配模式的host标头匹配；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Host=**.myiszhb.org</span></span><br></pre></td></tr></table></figure><p>还支持url模板表里（例如{sub}.myiszhb.org）,如果请求的主机标头的值为**.myiszhb.org，则此路由匹配；</p><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>方法路由谓词工厂使用一个参数或多个参数，要匹配的http方法；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br></pre></td></tr></table></figure><p>如果请求的方法是get或post，则匹配此路由；</p><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>路径路由谓词工厂使用两个参数：Spring PathMatcher模式列表和一个成为matchOptionalTrailingSeparator的可选表示；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/test/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><p>如果请求路由为：<code>/test/1</code>或者<code>/test/2</code>等，都可以匹配此路由；</p><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>查询路由谓词工厂采用两个参数：必需的参数和可选的regexp（这是Java正则表达式）；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=token</span></span><br></pre></td></tr></table></figure><p>请求参数带上token就可以访问了，例如<code>http://127.0.0.1:18083/test?token</code></p><h3 id="RemoteAddr"><a href="#RemoteAddr" class="headerlink" title="RemoteAddr"></a>RemoteAddr</h3><p>RemoteAddr 路由谓词工厂使用源列表（最小大小为1），这些源CIDR标记（ipv4或ipv6）字符串，例如192.168.0.1/16（其中192.168.0.1是ip地址，而16是子网掩码）;</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure><p>如果请求的远程地址例如：192.168.1.10，则是匹配该路由的；</p><h3 id="Weight"><a href="#Weight" class="headerlink" title="Weight"></a>Weight</h3><p>weight 权重路由谓词工厂采用两个参数：group和weight（一个int），权重是按组计算的；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://springcloud-service-nacos-consumer1</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Weight=group1，8</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">uri:</span> <span class="string">https://springcloud-service-nacos-consumer2</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Weight=group1，2</span></span><br></pre></td></tr></table></figure><p>这条路由会将约80%的流量转到consumer1，并将约20%的流量转到consumer2；</p><h2 id="过滤工厂"><a href="#过滤工厂" class="headerlink" title="过滤工厂"></a>过滤工厂</h2><p>总共31一个过滤器工厂，详情查看<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory">官方文档</a></p><h2 id="自定义谓词"><a href="#自定义谓词" class="headerlink" title="自定义谓词"></a>自定义谓词</h2><p>Spring Cloud GateWay内置了一些列的路由谓词工厂，但是如果这些内置的路由谓词工厂不能满足业务需求的话，可以自定义路由谓词工厂来实现特定的需求；</p><p>例如：</p><p>1、要求请求必须携带一个token，并且token值等于指定的值，才能访问；</p><p>2、要求某个服务的用户只允许在23:00-6:00这个时间段内才可以访问；</p><p>具体步骤：</p><p>1、首先定义一个配置类，用于承载配置参数；</p><p>2、定义一个路由谓词工厂；</p><p>3、在配置文件中启动该路由谓词工厂；</p><h3 id="案例1：实践"><a href="#案例1：实践" class="headerlink" title="案例1：实践"></a>案例1：实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>自定义谓词工厂TokenRoutePredicateFactory</code></p><p>注意：Token+RoutePredicateFactory，此处<code>TokenRoutePredicateFactory</code>是固定写法，前面的写的<code>Token</code>，后面在配置文件也要写Token；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义谓词工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title">AbstractRoutePredicateFactory</span>&lt;<span class="title">TokenConfig</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenRoutePredicateFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(TokenConfig.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(TokenConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; &#123;</span><br><span class="line">            <span class="comment">//获取查询参数</span></span><br><span class="line">            MultiValueMap&lt;String, String&gt; valueMap = exchange.getRequest().getQueryParams();</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">//获取所有的值</span></span><br><span class="line">            valueMap.forEach((k,v)-&gt;&#123;</span><br><span class="line">                list.addAll(v);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">for</span> (String value : list) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Token - &gt; &#123;&#125;&quot;</span>,value);</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">if</span>(StringUtils.equalsAnyIgnoreCase(value,config.getToken()))&#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取配置文件中的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">shortcutFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>配置</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 网关配置</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">          <span class="comment"># id唯一</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="comment"># lb:// 固定写法，表示负载均衡</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="comment"># 谓词：判断是否匹配</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment"># Token 就是上面文件名称的前半部分</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Token=123456</span></span><br></pre></td></tr></table></figure><p>测试，带了token=123456的就可以访问，其他一概返回404</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210916170742477.png" alt="image-20210916170742477"></p><h3 id="案例2：实践"><a href="#案例2：实践" class="headerlink" title="案例2：实践"></a>案例2：实践</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessTimeConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalTime start;</span><br><span class="line">    <span class="keyword">private</span> LocalTime end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>自定义谓词工厂</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessTimeRoutePredicateFactory</span> <span class="keyword">extends</span> <span class="title">AbstractRoutePredicateFactory</span>&lt;<span class="title">AccessTimeConfig</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccessTimeRoutePredicateFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(AccessTimeConfig.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="title">apply</span><span class="params">(AccessTimeConfig config)</span> </span>&#123;</span><br><span class="line">        LocalTime start = config.getStart();</span><br><span class="line">        LocalTime end = config.getEnd();</span><br><span class="line">        <span class="keyword">return</span> (serverWebExchange) -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;AccessTime -&gt; &quot;</span> + LocalTime.now().toString());</span><br><span class="line">            LocalTime now = LocalTime.now();</span><br><span class="line">            <span class="comment">//判断当前时间是在配置的开始时间和结束时间之间</span></span><br><span class="line">            <span class="keyword">return</span> now.isAfter(start) &amp;&amp; now.isBefore(end);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">shortcutFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="string">&quot;start&quot;</span>,<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>配置</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">          <span class="comment"># id唯一</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">route1</span></span><br><span class="line">          <span class="comment"># lb:// 固定写法，表示负载均衡</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://springcloud-service-nacos-consumer</span></span><br><span class="line">          <span class="comment"># 谓词：判断是否匹配</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AccessTime=上午9:00,下午5:15</span></span><br></pre></td></tr></table></figure><p>测试结果：只要在这个时间段的请求都可以访问；</p><h3 id="谓词不匹配自定义返回"><a href="#谓词不匹配自定义返回" class="headerlink" title="谓词不匹配自定义返回"></a>谓词不匹配自定义返回</h3><p>不知道有返回他会返回404页面</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924143857050.png" alt="image-20210924143857050"></p><p>返回这个404的页面，是在<code>DefaultErrorWebExceptionHandler</code>里面，我们需要覆盖他的方法</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924144617313.png" alt="image-20210924144617313"></p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorWebExceptionHandler</span> <span class="keyword">extends</span> <span class="title">DefaultErrorWebExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyErrorWebExceptionHandler</span><span class="params">(ErrorAttributes errorAttributes, ResourceProperties resourceProperties, ErrorProperties errorProperties, ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(errorAttributes, resourceProperties, errorProperties, applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定响应处理方法为json处理的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorAttributes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RouterFunction&lt;ServerResponse&gt; <span class="title">getRoutingFunction</span><span class="params">(ErrorAttributes errorAttributes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(RequestPredicates.all(), <span class="keyword">this</span>::renderErrorResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据code获取对应的httpstatus</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorAttributes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getHttpStatus</span><span class="params">(Map&lt;String, Object&gt; errorAttributes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getHttpStatus(errorAttributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">buildMessage</span><span class="params">(ServerRequest request,Throwable ex)</span></span>&#123;</span><br><span class="line">        StringBuilder message = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;Failed to handler request [&quot;</span>);</span><br><span class="line">        message.append(request.methodName());</span><br><span class="line">        message.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        message.append(request.uri());</span><br><span class="line">        message.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>( ex != <span class="keyword">null</span>)&#123;</span><br><span class="line">            message.append(<span class="string">&quot;: &quot;</span>);</span><br><span class="line">            message.append(ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建返回的json数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorMsg 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,Object&gt; <span class="title">response</span><span class="params">(<span class="keyword">int</span> status,String errorMsg)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>,status);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>,errorMsg);</span><br><span class="line">        map.put(<span class="string">&quot;data&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义配置类，使<code>MyErrorWebExceptionHandler</code>生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerProperties serverProperties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayConfiguration</span><span class="params">(ServerProperties serverProperties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="params"><span class="function">                                ResourceProperties resourceProperties,</span></span></span><br><span class="line"><span class="params"><span class="function">                                ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; listObjectProvider,</span></span></span><br><span class="line"><span class="params"><span class="function">                                ServerCodecConfigurer serverCodecConfigurer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serverProperties = serverProperties;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">        <span class="keyword">this</span>.viewResolvers = listObjectProvider.getIfAvailable(Collections::emptyList);</span><br><span class="line">        <span class="keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;myeErrorWebExceptionHandler&quot;)</span></span><br><span class="line">    <span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span><span class="comment">//bean的顺序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorWebExceptionHandler <span class="title">myeErrorWebExceptionHandler</span><span class="params">(ErrorAttributes errorAttributes)</span></span>&#123;</span><br><span class="line">        MyErrorWebExceptionHandler myErrorWebExceptionHandler =  <span class="keyword">new</span> MyErrorWebExceptionHandler(</span><br><span class="line">                errorAttributes,</span><br><span class="line">                <span class="keyword">this</span>.resourceProperties,</span><br><span class="line">                <span class="keyword">this</span>.serverProperties.getError(),</span><br><span class="line">                <span class="keyword">this</span>.applicationContext</span><br><span class="line">        );</span><br><span class="line">        myErrorWebExceptionHandler.setViewResolvers(<span class="keyword">this</span>.viewResolvers);</span><br><span class="line">        myErrorWebExceptionHandler.setMessageWriters(<span class="keyword">this</span>.serverCodecConfigurer.getWriters());</span><br><span class="line">        myErrorWebExceptionHandler.setMessageReaders(<span class="keyword">this</span>.serverCodecConfigurer.getReaders());</span><br><span class="line">        <span class="keyword">return</span> myErrorWebExceptionHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义网关过滤器"><a href="#自定义网关过滤器" class="headerlink" title="自定义网关过滤器"></a>自定义网关过滤器</h2><h3 id="单个网关过滤器"><a href="#单个网关过滤器" class="headerlink" title="单个网关过滤器"></a>单个网关过滤器</h3><p>顶层接口<code>GatewayFilterFactory</code>，通常情况下可以继承<code>AbstractGatewayFilterFactory</code>实现自定义网关过滤器；或者继承<code>AbstractNameValueGatewayFilterFactory</code>，该方式配置方法更简单；</p><p>其中<code>RequestLog+GatewayFilterFactory</code>，后半部分是固定的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLogGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractNameValueGatewayFilterFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(NameValueConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ServerWebExchange exchang, GatewayFilterChain chain)-&gt;&#123;</span><br><span class="line">            log.info(<span class="string">&quot;请求网关-&#123;&#125;-&#123;&#125;&quot;</span>,config.getName(),config.getValue());</span><br><span class="line">            MultiValueMap&lt;String, String&gt; valueMap = exchang.getRequest().getQueryParams();</span><br><span class="line">            valueMap.forEach((k,v)-&gt;&#123;</span><br><span class="line">                log.info(<span class="string">&quot;请求参数-&#123;&#125;&quot;</span>,k);</span><br><span class="line">                v.forEach(s-&gt;&#123;</span><br><span class="line">                    log.info(<span class="string">&quot;请求参数值=&#123;&#125;&quot;</span>,s);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchang).then();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924151833874.png" alt="image-20210924151833874"></p><h3 id="全局网关过滤器"><a href="#全局网关过滤器" class="headerlink" title="全局网关过滤器"></a>全局网关过滤器</h3><p>自带的全局过滤器，只要满足规则就会进入这些实现类中的<code>filter</code>方法，而且全局过滤器有执行顺序的问题，这些实现类中有个<code>getOrder</code>方法，数值越小越先执行；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924152602387.png" alt="image-20210924152602387"></p><p>自定义全局filter，不需要再在配置文件里面写了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义全局过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理过滤逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;进去了全局Filter请求...........&quot;</span>);</span><br><span class="line">        MultiValueMap&lt;String, String&gt; valueMap = exchange.getRequest().getQueryParams();</span><br><span class="line">        valueMap.forEach((k,v)-&gt;&#123;</span><br><span class="line">            log.info(<span class="string">&quot;全局filter拦截参数：&#123;&#125;&quot;</span>,k);</span><br><span class="line">            v.forEach(s-&gt;&#123;</span><br><span class="line">                log.info(<span class="string">&quot;全局filter拦截参数值：&#123;&#125;&quot;</span>,v);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置优先级</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924153449114.png" alt="image-20210924153449114"></p><h2 id="集成ribbon负载均衡"><a href="#集成ribbon负载均衡" class="headerlink" title="集成ribbon负载均衡"></a>集成ribbon负载均衡</h2><p>gateway内部帮我们已经集成了负载均衡，在全局Filter里面，有一个实现类叫<code>LoadBalancerClientFilter</code>，在里面进行的拦截</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924152602387.png" alt="image-20210924152602387"></p><p>其中他引入<code>LoadBalancerClient</code>这个接口</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924155113085.png" alt="image-20210924155113085"></p><p>他就是用ribbon 实现的</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924155301012.png" alt="image-20210924155301012"></p><h2 id="网关集成sentienl"><a href="#网关集成sentienl" class="headerlink" title="网关集成sentienl"></a>网关集成sentienl</h2><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><blockquote><p>1.依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- gateway 整合sentienl适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.配置连接到sentienl dashborad</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"> <span class="comment"># sentinel 管理后台</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><blockquote><p>3.把<code>SentinelGatewayFilter</code>加入到容器</p></blockquote><p>默认情况下他是不会进入<code>SentinelGatewayFilter</code>的，需要我们自己去手动加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(-1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">sentinelGatewayFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayFilter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问接口 查看结果</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924161525483.png" alt="image-20210924161525483"></p><p>我们就能拿到这个路由id，然后进行限流操作；</p><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><p>默认情况下，会在浏览器返回如下结果</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924161907068.png" alt="image-20210924161907068"></p><p>这个返回错误的来源是<code>sentinel-spring-cloud-gateway-adapter</code>这个适配器下面的<code>BlockRequestHandler</code>的实现类<code>DefaultBlockRequestHandler</code></p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924162311145.png" alt="image-20210924162311145"></p><p>自定义<code>myBlockRequestHandler</code>返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * gateway配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="title">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义错误返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;myBlockRequestHandler&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BlockRequestHandler <span class="title">myBlockRequestHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BlockRequestHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ServerResponse.status(HttpStatus.BAD_GATEWAY)<span class="comment">//设置状态码</span></span><br><span class="line">                        .contentType(MediaType.APPLICATION_JSON)<span class="comment">//设置返回类型</span></span><br><span class="line">                        .body(BodyInserters.fromValue(<span class="string">&quot;自定义的返回 哈哈！！&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>因为在GatewayCallbackManager中 blockHandle是写死的，所以我们要调用他提供的setBlockHandler去修改他</code></p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924174805496.png" alt="image-20210924174805496"></p><p>修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * gateway配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="title">sentinelGatewayBlockExceptionHandler</span><span class="params">(BlockRequestHandler blockRequestHandler)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把默认的返回 替换成 我们自己写的，这里spring回去获取</span></span><br><span class="line">        GatewayCallbackManager.setBlockHandler(blockRequestHandler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayBlockExceptionHandler(viewResolvers,serverCodecConfigurer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SentinelGatewayBlockExceptionHandler</code>调用了<code>handleBlockedRequest</code>去设置</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924175136827.png" alt="image-20210924175136827"></p><p>测试结果：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210924180108503.png" alt="image-20210924180108503"></p><h3 id="持久化本地文件"><a href="#持久化本地文件" class="headerlink" title="持久化本地文件"></a>持久化本地文件</h3><p><code>同上方3.13.1 pull模式一样</code></p><h3 id="持久化到Nacos"><a href="#持久化到Nacos" class="headerlink" title="持久化到Nacos"></a>持久化到Nacos</h3><p><code>同上方3.13.2 push模式</code>一样</p><h2 id="CORS跨域问题"><a href="#CORS跨域问题" class="headerlink" title="CORS跨域问题"></a>CORS跨域问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//所有方法如post、get、put等</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//来自那个域名的请求</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//是什么请求头</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部执行流程"><a href="#内部执行流程" class="headerlink" title="内部执行流程"></a>内部执行流程</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210926171025666.png" alt="image-20210926171025666"></p><p>1、在<code>spring-cloud-gateway-core：spring.factories</code>里面有一些自动装载类；</p><p>其中<code>GatewayClassPathWarningAutoConfiguration</code>检查前端控制器，进行检查，并报出警告；</p><p>2、<code>GatewayAutoConfiguration</code>是主要的网关自动配置，在这个类中就有路径的处理<code>routePredicateHandlerMapping</code>方法，</p><p>3、在容器中创建了<code>RoutePredicateHandlerMapping</code>这个对象，并且通过<code>RoutePredicateHandlerMapping.getHandlerInternal(..)</code>获取<code>Route对象</code>，在把</p><p><code>url</code>和<code>gatewayFilter</code>进行绑定；</p><p>4、 然后把<code>Route</code>放入<code>ServerWebExchange</code>的属性中，最后走到<code>FilteringWebHandler</code>;</p><h1 id="SkyWalking"><a href="#SkyWalking" class="headerlink" title="SkyWalking"></a>SkyWalking</h1><h2 id="什么是SkyWalking"><a href="#什么是SkyWalking" class="headerlink" title="什么是SkyWalking"></a>什么是SkyWalking</h2><p>(aapache旗下)分布式链路是分布式系统的应用程序性能监视工具，为微服务、云原生j架构和基于容器（docker、k8s）架构而设计；skywalking提供了分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案；</p><h2 id="主要功能特性"><a href="#主要功能特性" class="headerlink" title="主要功能特性"></a>主要功能特性</h2><p>1、多种监控手段，可以通过语言探针和service mesh获得监控的数据；</p><p>2、多种语言自动探针，包含Java、.net Core和Node.js;</p><p>3、轻量高效，占用服务器资源；</p><p>4、模块化，UI、存储、集群管理都有很多种机制选择；</p><p>5、支持告警；</p><p>5、有可视化解决方案；</p><h2 id="整体构成"><a href="#整体构成" class="headerlink" title="整体构成"></a>整体构成</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210926174713637.png" alt="image-20210926174713637"></p><p>主要分为四大部分：</p><p>1、<code>Tracing</code>和<code>Metrics</code>为Agent：负责从应用中，收集链路信息，发生给SkyWalking Observability Analysis Platform服务器；</p><p>2、<code>SkyWalking Observability Analysis Platform</code>：负责接收Agent发送的<code>Tracing</code>数据信息，然后进行分析（Analysis Core），存储到外部存储器（Storage），最终提供查询（Query）功能；</p><p>3、<code>Storage Implementors</code>：<code>Tracing</code>数据存储，目前支持ES、MYSQL、Sharding Sphere、TiDB、H2多种存储器，默认情况下存储H2，建议存储到ES中；</p><p>4、<code>Skywalking UI</code>：负责提供控台，查看链路等等；</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>1、 <a href="https://skywalking.apache.org/downloads/">apache-skywalking-apm-8.7.0.tar.gz</a></p><p>2、组成目录</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210927152100070.png" alt="image-20210927152100070"></p><p><code>agent</code>：SkyWalking Agent</p><p><code>bin</code>：执行脚本</p><p><code>config</code>：SkyWalking OAP Server 配置文件</p><p><code>oap-libs</code>：SkyWalking OAP Server </p><p><code>webapp</code>：SkyWalking UI</p><p>3、进入bin目录启动即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210927152905092.png" alt="image-20210927152905092"></p><h2 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h2><p>1、将写好的spring boot项目打包；</p><p>2、由于上传数据是异步的，需要等待几秒才能看到跟踪数据；</p><h3 id="idea本地调试"><a href="#idea本地调试" class="headerlink" title="idea本地调试"></a>idea本地调试</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210927170053093.png" alt="image-20210927170053093"></p><p>参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">参数1：skywalking-agent.jar架包的路径</span></span><br><span class="line">-javaagent:E:\Learn\apache-skywalking-apm-bin\agent\skywalking-agent.jar</span><br><span class="line"><span class="meta">#</span><span class="bash">参数：127.0.0.1:11800为collector服务，SW_AGENT_NAME 自定义名称</span></span><br><span class="line">SW_AGENT_COLLECTOR_BACKEND_SERVICES=127.0.0.1:11800;SW_AGENT_NAME=spring-cloud-alibaba-nacos-provider</span><br></pre></td></tr></table></figure><h3 id="jar包启动"><a href="#jar包启动" class="headerlink" title="jar包启动"></a>jar包启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SkyWalking Agent配置</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Agent名称，一般使用`spring.application.name`</span></span><br><span class="line">export SW_AGENT_NAME=ruoyi-admin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置collector地址，我这里是在同一台服务器上测试的</span></span><br><span class="line">export SW_AGENT_COLLECTOR_BACKEND_SERVICES=127.0.0.1:11800</span><br><span class="line"><span class="meta">#</span><span class="bash"> skywalking-agent.jar的路径</span></span><br><span class="line">export JAVA_AGENT=-javaagent:/learn/spring-cloud-alibaba/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动jar</span></span><br><span class="line">java -jar $JAVA_AGENT ruoyi-admin.jar </span><br></pre></td></tr></table></figure><p>访问了一下登录接口</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210927162559750.png" alt="image-20210927162559750"></p><h3 id="war包启动"><a href="#war包启动" class="headerlink" title="war包启动"></a>war包启动</h3><p>如果在tomcat中进行部署，需要修改tomcat的bin目录下的catalina.sh，在顶部第一行加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> skywalking-agent.jar的路径</span></span><br><span class="line">CATALINA_OPTS=&quot;$CATALINA_OPTS&quot; -javaagent:/learn/spring-cloud-alibaba/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar;</span><br><span class="line">export CATALINA_OPTS;</span><br></pre></td></tr></table></figure><h3 id="SkyWalking三个概念"><a href="#SkyWalking三个概念" class="headerlink" title="SkyWalking三个概念"></a>SkyWalking三个概念</h3><blockquote><p>服务（service）</p></blockquote><p>表示对请求提供相同行为的一些列或一组工作负载，在使用Agent或SDK的时候，你可以定义服务的名称，就是我们上面脚本中的<code>SW_AGENT_NAME</code>;</p><blockquote><p>服务实例（service Instance）</p></blockquote><p>上述的一组工作负载中的每一个工作负载成为一个实例，服务实例未必就是操作系统上的一个进程，但当你在使用Agent的时候，一个服务实例实际就是操作系统上的一个真实进程；</p><blockquote><p>端点（Endpoint）</p></blockquote><p>对于特定服务所接收的请求路径，如http的url路径和gRPC服务的类名+方法签名；</p><h2 id="SkyWalking告警"><a href="#SkyWalking告警" class="headerlink" title="SkyWalking告警"></a>SkyWalking告警</h2><p>告警的核心是由一组规则驱动，这些规则定义在config/alarm-settings.yml中。</p><p>告警规定义分为三部分：</p><p>1、<code>告警规则</code>：它们定义了应该如何触发度量警报，应该考虑什么条件；</p><p>2、<code>网络钩子(#webhook)</code>：当警告触发时，那些服务终端需要被告知；</p><p>3、<code>gRPC钩子</code>：远程gRPC方法的主机和端口，告警触发后调用；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> distributed with this work <span class="keyword">for</span> additional information</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;License&quot;</span>); you may not use this file except <span class="keyword">in</span> compliance</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See the License <span class="keyword">for</span> the specific language governing permissions and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> limitations under the License.</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sample alarm rules.</span></span><br><span class="line">rules:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Rule unique name, must be ended with `_rule`.</span></span><br><span class="line">  service_resp_time_rule:</span><br><span class="line">    metrics-name: service_resp_time</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    threshold: 1000</span><br><span class="line">    period: 10</span><br><span class="line">    count: 3</span><br><span class="line">    silence-period: 5</span><br><span class="line">    message: Response time of service &#123;name&#125; is more than 1000ms in 3 minutes of last 10 minutes.</span><br><span class="line">  service_sla_rule:</span><br><span class="line">    # Metrics value need to be long, double or int</span><br><span class="line">    metrics-name: service_sla</span><br><span class="line">    op: &quot;&lt;&quot;</span><br><span class="line">    threshold: 8000</span><br><span class="line">    # The length of time to evaluate the metrics</span><br><span class="line">    period: 10</span><br><span class="line">    # How many times after the metrics match the condition, will trigger alarm</span><br><span class="line">    count: 2</span><br><span class="line">    # How many times of checks, the alarm keeps silence after alarm triggered, default as same as period.</span><br><span class="line">    silence-period: 3</span><br><span class="line">    message: Successful rate of service &#123;name&#125; is lower than 80% in 2 minutes of last 10 minutes</span><br><span class="line">  service_resp_time_percentile_rule:</span><br><span class="line">    # Metrics value need to be long, double or int</span><br><span class="line">    metrics-name: service_percentile</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    threshold: 1000,1000,1000,1000,1000</span><br><span class="line">    period: 10</span><br><span class="line">    count: 3</span><br><span class="line">    silence-period: 5</span><br><span class="line">    message: Percentile response time of service &#123;name&#125; alarm in 3 minutes of last 10 minutes, due to more than one condition of p50 &gt; 1000, p75 &gt; 1000, p90 &gt; 1000, p95 &gt; 1000, p99 &gt; 1000</span><br><span class="line">  service_instance_resp_time_rule:</span><br><span class="line">    metrics-name: service_instance_resp_time</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    threshold: 1000</span><br><span class="line">    period: 10</span><br><span class="line">    count: 2</span><br><span class="line">    silence-period: 5</span><br><span class="line">    message: Response time of service instance &#123;name&#125; is more than 1000ms in 2 minutes of last 10 minutes</span><br><span class="line">  database_access_resp_time_rule:</span><br><span class="line">    metrics-name: database_access_resp_time</span><br><span class="line">    threshold: 1000</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    period: 10</span><br><span class="line">    count: 2</span><br><span class="line">    message: Response time of database access &#123;name&#125; is more than 1000ms in 2 minutes of last 10 minutes</span><br><span class="line">  endpoint_relation_resp_time_rule:</span><br><span class="line">    metrics-name: endpoint_relation_resp_time</span><br><span class="line">    threshold: 1000</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    period: 10</span><br><span class="line">    count: 2</span><br><span class="line">    message: Response time of endpoint relation &#123;name&#125; is more than 1000ms in 2 minutes of last 10 minutes</span><br><span class="line"><span class="meta">#</span><span class="bash">  Active endpoint related metrics alarm will cost more memory than service and service instance metrics alarm.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  Because the number of endpoint is much more than service and instance.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#  endpoint_avg_rule:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">    metrics-name: endpoint_avg</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    op: <span class="string">&quot;&gt;&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">    threshold: 1000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    period: 10</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    count: 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    silence-period: 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    message: Response time of endpoint &#123;name&#125; is more than 1000ms <span class="keyword">in</span> 2 minutes of last 10 minutes</span></span><br><span class="line"></span><br><span class="line">webhooks:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 回调地址</span></span><br><span class="line">  - http://jl9z6wv.nat.ipyingshe.com/notify/</span><br><span class="line"><span class="meta">#</span><span class="bash">  - http://127.0.0.1/go-wechat/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如下图：如果触发了上面的规则 他就会回调我们配置的接口；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210927174450408.png" alt="image-20210927174450408"></p><blockquote><p>Webhook回调通知</p></blockquote><p>SkyWalking告警Webhook回调要求接收方是一个web容器，告警的消息会通过http请求进行发送，请求访问为POST，Content-Type为application/json，json基于<code>List&lt;org.apache.skywalking.oap.server.core.alarm.AlarmMessage&gt;</code>的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmMessage</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AlarmMessage NONE = <span class="keyword">new</span> NoAlarm();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> scopeId;</span><br><span class="line">    <span class="keyword">private</span> String scope;</span><br><span class="line">    <span class="comment">//目标scope的实体名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//scope实体id</span></span><br><span class="line">    <span class="keyword">private</span> String id0;</span><br><span class="line">    <span class="keyword">private</span> String id1;</span><br><span class="line">    <span class="comment">//你alarm-settings.yml中配置的规则名</span></span><br><span class="line">    <span class="keyword">private</span> String ruleName;</span><br><span class="line">    <span class="comment">//告警内容</span></span><br><span class="line">    <span class="keyword">private</span> String alarmMessage;</span><br><span class="line">    <span class="comment">//告警时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>修改<code>config</code>目录下的<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改120行的数据源为mysql</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_STORAGE:mysql&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改大概192行MySQL配置源</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">jdbcUrl:</span> <span class="string">$&#123;SW_JDBC_URL:&quot;jdbc:mysql://localhost:3306/skywalking?useSSL=false&quot;&#125;</span></span><br><span class="line">      <span class="comment">#账号</span></span><br><span class="line">      <span class="attr">dataSource.user:</span> <span class="string">$&#123;SW_DATA_SOURCE_USER:root&#125;</span></span><br><span class="line">      <span class="comment">#密码</span></span><br><span class="line">      <span class="attr">dataSource.password:</span> <span class="string">$&#123;SW_DATA_SOURCE_PASSWORD:123456&#125;</span></span><br><span class="line">      <span class="attr">dataSource.cachePrepStmts:</span> <span class="string">$&#123;SW_DATA_SOURCE_CACHE_PREP_STMTS:true&#125;</span></span><br><span class="line">      <span class="attr">dataSource.prepStmtCacheSize:</span> <span class="string">$&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_SIZE:250&#125;</span></span><br><span class="line">      <span class="attr">dataSource.prepStmtCacheSqlLimit:</span> <span class="string">$&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_LIMIT:2048&#125;</span></span><br><span class="line">      <span class="attr">dataSource.useServerPrepStmts:</span> <span class="string">$&#123;SW_DATA_SOURCE_USE_SERVER_PREP_STMTS:true&#125;</span></span><br><span class="line">    <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_MYSQL_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line">    <span class="attr">maxSizeOfArrayColumn:</span> <span class="string">$&#123;SW_STORAGE_MAX_SIZE_OF_ARRAY_COLUMN:20&#125;</span></span><br><span class="line">    <span class="attr">numOfSearchableValuesPerTag:</span> <span class="string">$&#123;SW_STORAGE_NUM_OF_SEARCHABLE_VALUES_PER_TAG:2&#125;</span></span><br></pre></td></tr></table></figure><p>修改完成后，还需要在他的<code>oap-libs</code>目录下加入mysql依赖，因为他没有，不然启动会报错，如下：<img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928144539392.png" alt="image-20210928144539392"></p><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><p><a href="https://skywalking.apache.org/downloads/">apache-skywalking-apm-es7-8.6.0.tar.gz</a>，这里需要下载es版本，apm版本的会启动出错</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改112行的数据源为elasticsearch7</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_STORAGE:elasticsearch7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改大概139行elasticsearch7配置源</span></span><br><span class="line">  <span class="attr">elasticsearch7:</span></span><br><span class="line">    <span class="attr">nameSpace:</span> <span class="string">$&#123;SW_NAMESPACE:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">clusterNodes:</span> <span class="string">$&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">$&#123;SW_STORAGE_ES_HTTP_PROTOCOL:&quot;http&quot;&#125;</span></span><br><span class="line">    <span class="attr">trustStorePath:</span> <span class="string">$&#123;SW_STORAGE_ES_SSL_JKS_PATH:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">trustStorePass:</span> <span class="string">$&#123;SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">dayStep:</span> <span class="string">$&#123;SW_STORAGE_DAY_STEP:1&#125;</span> <span class="comment"># Represent the number of days in the one minute/hour/day index.</span></span><br><span class="line">    <span class="attr">indexShardsNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:1&#125;</span> <span class="comment"># Shard number of new indexes</span></span><br><span class="line">    <span class="attr">indexReplicasNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:1&#125;</span> <span class="comment"># Replicas number of new indexes</span></span><br><span class="line">    <span class="comment"># Super data set has been defined in the codes, such as trace segments.The following 3 config would be improve es performance when storage super size data in es.</span></span><br><span class="line">    <span class="attr">superDatasetDayStep:</span> <span class="string">$&#123;SW_SUPERDATASET_STORAGE_DAY_STEP:-1&#125;</span> <span class="comment"># Represent the number of days in the super size dataset record index, the default value is the same as dayStep when the value is less than 0</span></span><br><span class="line">    <span class="attr">superDatasetIndexShardsFactor:</span> <span class="string">$&#123;SW_STORAGE_ES_SUPER_DATASET_INDEX_SHARDS_FACTOR:5&#125;</span> <span class="comment">#  This factor provides more shards for the super data set, shards number = indexShardsNumber * superDatasetIndexShardsFactor. Also, this factor effects Zipkin and Jaeger traces.</span></span><br><span class="line">    <span class="attr">superDatasetIndexReplicasNumber:</span> <span class="string">$&#123;SW_STORAGE_ES_SUPER_DATASET_INDEX_REPLICAS_NUMBER:0&#125;</span> <span class="comment"># Represent the replicas number in the super size dataset record index, the default value is 0.</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;SW_ES_USER:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">secretsManagementFile:</span> <span class="string">$&#123;SW_ES_SECRETS_MANAGEMENT_FILE:&quot;&quot;&#125;</span> <span class="comment"># Secrets management file in the properties format includes the username, password, which are managed by 3rd party tool.</span></span><br><span class="line">    <span class="attr">bulkActions:</span> <span class="string">$&#123;SW_STORAGE_ES_BULK_ACTIONS:1000&#125;</span> <span class="comment"># Execute the async bulk record data every $&#123;SW_STORAGE_ES_BULK_ACTIONS&#125; requests</span></span><br><span class="line">    <span class="attr">flushInterval:</span> <span class="string">$&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125;</span> <span class="comment"># flush the bulk every 10 seconds whatever the number of requests</span></span><br><span class="line">    <span class="attr">concurrentRequests:</span> <span class="string">$&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125;</span> <span class="comment"># the number of concurrent requests</span></span><br><span class="line">    <span class="attr">resultWindowMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_WINDOW_SIZE:10000&#125;</span></span><br><span class="line">    <span class="attr">metadataQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:5000&#125;</span></span><br><span class="line">    <span class="attr">segmentQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200&#125;</span></span><br><span class="line">    <span class="attr">profileTaskQueryMaxSize:</span> <span class="string">$&#123;SW_STORAGE_ES_QUERY_PROFILE_TASK_SIZE:200&#125;</span></span><br><span class="line">    <span class="attr">oapAnalyzer:</span> <span class="string">$&#123;SW_STORAGE_ES_OAP_ANALYZER:&quot;&#123;\&quot;analyzer\&quot;:&#123;\&quot;oap_analyzer\&quot;:&#123;\&quot;type\&quot;:\&quot;stop\&quot;&#125;&#125;&#125;&quot;&#125;</span> <span class="comment"># the oap analyzer.</span></span><br><span class="line">    <span class="attr">oapLogAnalyzer:</span> <span class="string">$&#123;SW_STORAGE_ES_OAP_LOG_ANALYZER:&quot;&#123;\&quot;analyzer\&quot;:&#123;\&quot;oap_log_analyzer\&quot;:&#123;\&quot;type\&quot;:\&quot;standard\&quot;&#125;&#125;&#125;&quot;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="自定义链路"><a href="#自定义链路" class="headerlink" title="自定义链路"></a>自定义链路</h2><h3 id="获取TraceId"><a href="#获取TraceId" class="headerlink" title="获取TraceId"></a>获取<code>TraceId</code></h3><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- skywalking 链路工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.skywalking<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apm-toolkit-trace<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取skywalking链路的traceId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/traceId&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">traceId</span><span class="params">()</span></span>&#123;</span><br><span class="line">TraceContext.putCorrelation(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; key = TraceContext.getCorrelation(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;获取到的value:&#123;&#125;&quot;</span>,key.get());</span><br><span class="line">    <span class="comment">//获取出链路的traceId，记录下来，后面排除错误方便使用；</span></span><br><span class="line">String traceId = TraceContext.traceId();</span><br><span class="line">log.info(<span class="string">&quot;traceId:&#123;&#125;&quot;</span>,traceId);</span><br><span class="line"><span class="keyword">return</span> echoFeignService.divide(Integer.valueOf(<span class="number">1</span>),Integer.valueOf(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trace注解"><a href="#Trace注解" class="headerlink" title="@Trace注解"></a>@Trace注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取skywalking链路的traceId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/traceId&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">traceId</span><span class="params">()</span></span>&#123;</span><br><span class="line">TraceContext.putCorrelation(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; key = TraceContext.getCorrelation(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;获取到的value:&#123;&#125;&quot;</span>,key.get());</span><br><span class="line">    <span class="comment">//获取出链路的traceId，记录下来，后面排除错误方便使用；</span></span><br><span class="line">String traceId = TraceContext.traceId();</span><br><span class="line">log.info(<span class="string">&quot;traceId:&#123;&#125;&quot;</span>,traceId);</span><br><span class="line">    <span class="comment">//调用自己想在链路中展示的方法@Trace(operationName = &quot;test&quot;)</span></span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">return</span> echoFeignService.divide(Integer.valueOf(<span class="number">1</span>),Integer.valueOf(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test为 在链路中展示的名称</span></span><br><span class="line"><span class="meta">@Trace(operationName = &quot;test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">log.info(<span class="string">&quot;我就测试一下&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928163435586.png" alt="image-20210928163435586"></p><h2 id="SkyWalking集成日志"><a href="#SkyWalking集成日志" class="headerlink" title="SkyWalking集成日志"></a>SkyWalking集成日志</h2><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- skywalking 链路工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.skywalking<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apm-toolkit-logback-1.x<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在resources目录下创建logback-spring.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Spring Boot 默认的 logback XML 配置文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台 Appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %tid %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志的格式化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 从 Spring Boot 配置文件中，读取 spring.application.name 应用名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">name</span>=<span class="string">&quot;applicationName&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; %tid --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FILE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/logs/$&#123;applicationName&#125;.log&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件 Appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--滚动策略，基于时间 + 大小的分包策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志的格式化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置 Appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928164600421.png" alt="image-20210928164600421"></p><h2 id="SkyWalking-UI"><a href="#SkyWalking-UI" class="headerlink" title="SkyWalking UI"></a>SkyWalking UI</h2><blockquote><p>第一部分</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928172741024.png" alt="image-20210928172741024"></p><p><code>仪表盘</code>：查看被监控服务的运行状态；</p><p><code>拓扑图</code>：以拓扑图的方式展现服务之间的关系，并以此为入口查看相关信息；</p><p><code>追踪</code>：以接口列表的方式展现，追踪接口内部调用过程；</p><p><code>性能剖析</code>：对端点进行采样分析，并可查看堆栈信息；</p><p><code>告警</code>：触发告警的告警列表，包括服务失败率，请求超时等；</p><p><code>调试</code>：进行服务进行调试</p><p><code>自动刷新</code>：刷新当前页面数据内容；</p><h3 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h3><blockquote><p>1、控制栏</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928173021301.png" alt="image-20210928173021301"></p><p>第一栏：不同内容主题的监控面板，应用性能管理/数据库/容器等；</p><p>第二栏：操作，包括 编辑/导出当前数据/倒入展示数据/不同服务端点筛选展示；</p><p>第三栏：不同纬度展示，全局/服务/实例/端点</p><blockquote><p>2、展示栏</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928173132952.png" alt="image-20210928173132952"></p><blockquote><p>3、Global全局维度</p></blockquote><p>第一栏：Global、Service、Instance、Endpoint不同展示面板；</p><p>Services load：服务每分钟请求数；</p><p>Slow Services：慢响应服务，单位ms；</p><p>Un-Health services(Apdex): Apdex性能指标，1为满分；</p><p>Slow Endpoint：慢响应端点，单位ms；</p><p>Global Response Latency：百分比响应延时，不同百分比的延时时间，单位ms；</p><p>Global Heatmap：服务响应时间热力分布图，根据时间段内不同响应时间的数量显示颜色深度；</p><p>底部栏：展示数据的时间区间，点击可以调整；</p><blockquote><p>4、Service服务维度</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928173339154.png" alt="image-20210928173339154"></p><p>Service Apdex（数字）:当前服务的评分； </p><p>Service Apdex（折线图）：不同时间的Apdex评分；</p><p>Service Avg Response Times：平均响应延时，单位ms；</p><p>Global Response Time Percentile：百分比响应延时；</p><p>Successful Rate（数字）：请求成功率；</p><p>Successful Rate（折线图）：不同时间的请求成功率；</p><p>Servce Load（数字）：每分钟请求数；</p><p>Servce Load（折线图）：不同时间的每分钟请求数；</p><p>Servce Instances Load：每个服务实例的每分钟请求数；</p><p>Show Service Instance：每个服务实例的最大延时；</p><p>Service Instance Successful Rate：每个服务实例的请求成功率；</p><blockquote><p>5、Instance实例维度</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928173517597.png" alt="image-20210928173517597"></p><p>Service Instance Load：当前实例的每分钟请求数；</p><p>Service Instance Successful Rate：当前实例的请求成功率；</p><p>Service Instance Latency：当前实例的响应延时；</p><p>JVM CPU：jvm占用CPU的百分比；</p><p>JVM Memory：JVM内存占用大小，单位m；</p><p>JVM GC Time：JVM垃圾回收时间，包含YGC和OGC；</p><p>JVM GC Count：JVM垃圾回收次数，包含YGC和OGC；</p><p>JVM Thread Count：JVM线程数；</p><p>还有几个是.NET的；</p><blockquote><p>6、Endpoint端点（API）维度</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928173611321.png" alt="image-20210928173611321"></p><p>Endpoint Load in Current Service：每个端点的每分钟请求数；</p><p>Slow Endpoints in Current Service：每个端点的最慢请求时间，单位ms；</p><p>Successful Rate in Current Service：每个端点的请求成功率；</p><p>Endpoint Load：当前端点每个时间段的请求数据；</p><p>Endpoint Avg Response Time：当前端点每个时间段的请求行响应时间；</p><p>Endpoint Response Time Percentile：当前端点每个时间段的响应时间占比；</p><p>Endpoint Successful Rate：当前端点每个时间段的请求成功率</p><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928173702301.png" alt="image-20210928173702301"></p><p>1：选择不同的服务关联拓扑；</p><p>2：查看单个服务相关内容；</p><p>3：服务间连接情况；</p><p>4：分组展示服务拓扑</p><h3 id="追踪"><a href="#追踪" class="headerlink" title="追踪"></a>追踪</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928173732966.png" alt="image-20210928173732966"></p><p>左侧：api接口列表，红色-异常请求，蓝色-正常请求；</p><p>右侧：api追踪列表，api请求连接各端点的先后顺序和时间；</p><h3 id="性能剖析"><a href="#性能剖析" class="headerlink" title="性能剖析"></a>性能剖析</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928173850529.png" alt="image-20210928173850529"></p><p>性能剖析 需要自己创建任务；</p><h3 id="告警"><a href="#告警" class="headerlink" title="告警"></a>告警</h3><p>如果满足了他内置的告警条件，会显示出来</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210928174137741.png" alt="image-20210928174137741"></p><p>记录服务的开启 等事件；</p><h2 id="SkyWalking集群"><a href="#SkyWalking集群" class="headerlink" title="SkyWalking集群"></a>SkyWalking集群</h2><p>生产中不搭集群也是可以的，因为这个只是调用链路跟踪，skywalking oap跟踪服务如果宕机了，完全不会影响正常业务；Skywalking集群是将skywalking oap作为一个服务注册到nacos上，只要skywalking oap服务没有全部宕机，保证有一个skywalking oap在运行，就能进行跟踪；</p><p>搭建一个skywalking oap集群需要：</p><p>（1）至少一个Nacos（也可以把nacos集群）</p><p>（2）至少一个ElasticSearch（也可以把es集群）</p><p>（3）至少2个skywalking oap服务；</p><p>（4）至少1个UI（UI也可以集群多个，用Nginx代理统一入口）</p><blockquote><p>1、修改<code>/config/application.yml</code>配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一步</span></span><br><span class="line"><span class="attr">cluster:</span></span><br><span class="line">  <span class="comment"># 将集群选成nacos</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_CLUSTER:nacos&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##第一步 修改nacos的地址</span></span><br><span class="line"><span class="attr">nacos:</span> </span><br><span class="line"><span class="attr">serviceName:</span> <span class="string">$&#123;SW_SERVICE_NAME:&quot;SkyWalking_OAP_Cluster&quot;&#125;</span> </span><br><span class="line"><span class="attr">hostPort:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_HOST_PORT:localhost:8848&#125;</span></span><br></pre></td></tr></table></figure><p>因为这里时单台做的集群，所以需要该一下端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一台</span></span><br><span class="line"><span class="attr">restPort:</span> <span class="string">$&#123;SW_CORE_REST_PORT:12801&#125;</span></span><br><span class="line"><span class="attr">gRPCPort:</span> <span class="string">$&#123;SW_CORE_GRPC_PORT:11801&#125;</span></span><br><span class="line"><span class="comment">#第二台</span></span><br><span class="line"><span class="attr">restPort:</span> <span class="string">$&#123;SW_CORE_REST_PORT:12802&#125;</span></span><br><span class="line"><span class="attr">gRPCPort:</span> <span class="string">$&#123;SW_CORE_GRPC_PORT:11802&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、修改ui服务</p></blockquote><p>配置ui服务webapp.yml文件，写两个地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">oap-route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://oap-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/graphql/**</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">simple:</span></span><br><span class="line">          <span class="attr">instances:</span></span><br><span class="line">            <span class="attr">oap-service:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">uri:</span> <span class="string">http://127.0.0.1:12801,http://127.0.0.1:12802</span></span><br><span class="line">            <span class="comment"># - uri: http://&lt;oap-host-1&gt;:&lt;oap-port1&gt;</span></span><br><span class="line">            <span class="comment"># - uri: http://&lt;oap-host-2&gt;:&lt;oap-port2&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">throw-exception-if-no-handler-found:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">add-mappings:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">base-path:</span> <span class="string">/manage</span></span><br></pre></td></tr></table></figure><h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>事务时数据库的概念，数据库事务（<code>ACID：原子性、一致性、隔离性、持久性</code>）；分布式事务的产生，是由于数据库的拆分和分布式架构带来的，在常规情况下，我们在一个进程中操作一个数据库，这属于本地事务，如果在一个进程中操作多个数据库，或者在多个进程中操作一个或多个数据，就会产生分布式事务；</p><p>1、数据库分库分表就会产生分布式事务</p><p>2、项目拆分服务化也产生了分布式事务</p><h2 id="什么是Seata"><a href="#什么是Seata" class="headerlink" title="什么是Seata"></a>什么是Seata</h2><p>Seata是alibab开源的分布式事务解决方案，用于微服务架构下分布式事务服务，Seata为用户提供了<code>AT、TCC、SAGA和XA事务模式</code>，目前使用流行情况：AT&gt;TCC&gt;SAGA;</p><p><a href="https://seata.io/zh-cn/">官网地址</a></p><blockquote><p>Seata架构中有三个角色</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210929113404780.png" alt="image-20210929113404780"></p><p>1、<code>TC(Transaction Coordinator)-事务协调者</code>：维护全局和分支事务的状态，驱动全局事务提交或者回滚；</p><p>2、<code>TM(Transaction Manager)-事务管理器</code>：定义全局事务的范围，开始全局事务、提交或回滚全局事务；</p><p>3、<code>RM(Resource Manager)-资源管理器</code>：管理分支事务处理的资源，与TC交互以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚；其中TC为单独部署的Server服务端，TM和RM为嵌入到应用中的Client客户端；</p><blockquote><p>在Seate中，一个分布式事务的生命周期</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210929114220523.png" alt="image-20210929114220523"></p><p>1、TM请求TC开启一个全局事务，TC会生成一个XID作为全局事务的编号，XID会在微服务的调用链路中传播，保证将多个微服务的子事务关联在一起；</p><p>2、TM请求TC将本地事务注册为全局的事务的分支事务，通过全局事务的XID进行关联；</p><p>3、TM请求TC告诉XID对应的全局事务时进行提交还是回滚；</p><p>4、TC驱动RM将XID对应自己的本地事务进行提交还是回滚；</p><h2 id="TC-Server部署"><a href="#TC-Server部署" class="headerlink" title="TC Server部署"></a>TC Server部署</h2><p>因为TC需要进行全局事务和分支事务的记录，所以需要对应的存储，目前TC有三种存储模式（store.mode）</p><p>1、file模式：适合单机模式，全局事务会话信息在内存中读写，并持久化本地文件root.data，性能较高；</p><p>2、db模式：适合集群模式，全局事务会话信息通过db共享，相对性能差点；</p><p>3、redis模式：解决db存储的性能问题；</p><blockquote><p>单机安装</p></blockquote><p><a href="https://github.com/seata/seata/releases">github下载</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf seata-server-1.4.2.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入bin目录启动即可</span></span><br><span class="line">./seata-server.sh</span><br></pre></td></tr></table></figure><p>默认配置下，Seate TC Server启动在8091端口以及默认请求seate使用的时file模式进行数据持久化的，所以可以看到用于持久化的本地文件root.data，这里文件就在<code>seate/bin/sessionStore/</code>下面;</p><h2 id="AT模式"><a href="#AT模式" class="headerlink" title="AT模式"></a>AT模式</h2><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210929141436927.png" alt="image-20210929141436927"></p><p>在springboot单体项目中，如果使用了多数据源，就需要考虑多个数据源的数据一致性，即产生了分布式事务的问题，用seate来解决分布式事务问题；</p><blockquote><p>案例：以电商购物下的那为例</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210929141656091.png" alt="image-20210929141656091"></p><blockquote><p>代码</p></blockquote><p>1、依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2.2.1.RELEASE <span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 集成 seata--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- dynamic-datasource-spring-boot-starter动态数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 继承 spring cloud Alibaba依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 继承 spring boot依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题：</p><p>问题描述：<code>Type id handling not implemented for type java.lang.Object....</code></p><p>解决方法：</p><p>1、<a href="https://github.com/seata/seata/pull/3228/files">https://github.com/seata/seata/pull/3228/files</a> 或者看这个pr的做法,通过spi,自定义你的jackson序列化器<br>2、查看你代码的实体类时间属性对应的数据库字段类型如果是datetime改成timestamp<br>3、修改seata的换序列化方式 配置中心中配置client.undo.logSerialization=kryo,client端再引入kryo的依赖包（ruoyi-cloud项目放到ruoyi-common-core/pom.xml下即可）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.esotericsoftware.kryo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kryo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.24.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.esotericsoftware<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kryo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.javakaffee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kryo-serializers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.44<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springboot-server-seata-monomer</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="comment"># 设置默认数据源</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">order-ds</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="comment"># 订单数据源</span></span><br><span class="line">        <span class="attr">order-ds:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/orderdb?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="comment"># 商品数据源</span></span><br><span class="line">        <span class="attr">product-ds:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/productdb?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="comment"># 账户数据源</span></span><br><span class="line">        <span class="attr">account-ds:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/accountdb?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="comment">#开启对seate的集成，默认是false</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------[Seata server 单机配置]--------------------------------------------</span></span><br><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="comment"># seate应用编号，默认为$&#123;spring.application.name&#125;</span></span><br><span class="line">  <span class="attr">application-id:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">  <span class="comment">#seate事务组编号，用于TC集群名称</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">$&#123;spring.application.name&#125;-group</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="comment"># 虚拟组和分组的映射</span></span><br><span class="line">    <span class="attr">vgroup-mapping.springboot-server-seata-monomer-group:</span> <span class="string">default</span></span><br><span class="line">    <span class="comment"># 分组和seata服务的映射</span></span><br><span class="line">    <span class="attr">grouplist.default:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span><span class="string">:8091</span></span><br><span class="line">  <span class="comment"># 配置类型 默认file</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">file</span></span><br><span class="line">  <span class="comment"># 报错在哪里，默认就是file</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">file</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 指定全局的配置文件</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 配置mapper的扫描，找到所有的mapper.xml映射文件</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath*:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis-config.xml</span></span><br></pre></td></tr></table></figure><p>3、controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//lombok</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">createOrder</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Integer userId,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="meta">@RequestParam(&quot;productId&quot;)</span> Integer productId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;请求下单, 用户:&#123;&#125;, 商品:&#123;&#125;&quot;</span>, userId, productId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderService.createOrder(userId, productId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、OrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrdersMapper ordersMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@DS(value = &quot;order-ds&quot;)</span></span><br><span class="line">    <span class="meta">@GlobalTransactional</span> <span class="comment">//seata全局事务注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">createOrder</span><span class="params">(Integer userId, Integer productId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Integer amount = <span class="number">1</span>; <span class="comment">// 购买数量暂时设置为 1</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;当前 XID: &#123;&#125;&quot;</span>, RootContext.getXID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 减库存</span></span><br><span class="line">        Product product = productService.reduceStock(productId, amount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 减余额</span></span><br><span class="line">        accountService.reduceBalance(userId, product.getPrice());</span><br><span class="line">        <span class="comment">//这里抛出异常进行测试</span></span><br><span class="line">        <span class="keyword">int</span> number=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 下订单</span></span><br><span class="line">        Orders order = <span class="keyword">new</span> Orders();</span><br><span class="line">        order.setUserId(userId);</span><br><span class="line">        order.setProductId(productId);</span><br><span class="line">        order.setPayAmount(product.getPrice().multiply(<span class="keyword">new</span> BigDecimal(amount)));</span><br><span class="line"></span><br><span class="line">        ordersMapper.insertSelective(order);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;下订单: &#123;&#125;&quot;</span>, order.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回订单编号</span></span><br><span class="line">        <span class="keyword">return</span> order.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、AccountServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">AccountMapper</span>,<span class="title">Account</span>&gt; <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@DS(value = &quot;account-ds&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduceBalance</span><span class="params">(Integer userId, BigDecimal money)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前 XID: &#123;&#125;&quot;</span>, RootContext.getXID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查余额</span></span><br><span class="line">        Account account = accountMapper.selectAccountByUserId(userId);</span><br><span class="line">        <span class="keyword">if</span> (account.getBalance().doubleValue() &lt; money.doubleValue()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扣除余额</span></span><br><span class="line">        <span class="keyword">int</span> updateCount = accountMapper.reduceBalance(userId, money);</span><br><span class="line">        <span class="comment">// 扣除成功</span></span><br><span class="line">        <span class="keyword">if</span> (updateCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;扣除用户 &#123;&#125; 余额成功&quot;</span>, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、ProductServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">ProductMapper</span>, <span class="title">Product</span>&gt; <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@DS(value = &quot;product-ds&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">reduceStock</span><span class="params">(Integer productId, Integer amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前 XID: &#123;&#125;&quot;</span>, RootContext.getXID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查库存</span></span><br><span class="line">        Product product = productMapper.selectByPrimaryKey(productId);</span><br><span class="line">        <span class="keyword">if</span> (product.getStock() &lt; amount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扣减库存</span></span><br><span class="line">        <span class="keyword">int</span> updateCount = productMapper.reduceStock(productId, amount);</span><br><span class="line">        <span class="comment">// 扣除成功</span></span><br><span class="line">        <span class="keyword">if</span> (updateCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扣除成功</span></span><br><span class="line">        log.info(<span class="string">&quot;扣除 &#123;&#125; 库存成功&quot;</span>, productId);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、进行测试</p><p>访问接口报错后，seata把数据进行回滚了；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210930143110646.png" alt="image-20210930143110646"></p><blockquote><p>整体机制</p></blockquote><p>整体机制就是两个阶段提交协议的演变；</p><p>1、第一阶段</p><p>​    <code>业务数据</code>和<code>回滚日志记录</code>在同一个本地事务中提交，释放本地锁和连接资源；</p><p>2、第二阶段</p><p>​    提交异步化，非常快速的完成</p><p>​    回滚通过第一阶段的回滚日志进行反向补偿；</p><blockquote><p>官方案例</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Field    Type          Key</span><br><span class="line">id       bigint(20)    PRI</span><br><span class="line">name varchar(100)</span><br><span class="line">since    varchar(100)</span><br></pre></td></tr></table></figure><p>AT分支事务的业务逻辑：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update product <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;GTS&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;TXC&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>第一阶段过程：</p></blockquote><p>​    1、解析sql：得到sql的类型（update），表（product），条件（where name = ‘TXC’）等相关信息；</p><p>​    2、查询前置镜像：根据解析得到的条件信息，生成查询语句，定位数据；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,since <span class="keyword">from</span> product <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;TXC&#x27;</span>; </span><br></pre></td></tr></table></figure><p>​    得到前镜像</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id    name   since</span><br><span class="line">1      TXC    2014</span><br></pre></td></tr></table></figure><p>​    3、执行业务sql：更新这条记录的name为<code>GTS</code>;</p><p>​    4、查询后镜像：根据前镜像的结果，通过 主键 定位数据；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,since <span class="keyword">from</span> product <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>​    得到后镜像</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id    name   since</span><br><span class="line">1      GTS    2014</span><br></pre></td></tr></table></figure><p>​    5、插入回滚日志：把前后镜像数据及业务sql相关的信息组成一条回滚日志记录，插入到UNDO_LOG表中；</p><p>​    6、提交前，向TC注册分支：申请product表中，主键值等于1的记录的全局锁；</p><p>​    7、本地事务提交：业务数据的更新和前面步骤中生成的UNDO_LGO一并提交；</p><p>​    8、将本地事务提交的结果上报给TC；</p><blockquote><p>第二阶段-回滚</p></blockquote><p>​    1、收到<code>TC</code>的分支回滚请求，开启一个本地事务，执行以下操作；</p><p>​    2、通过<code>XID</code>和<code>Branch ID</code>查找到相应的UNDO_LOG记录；</p><p>​    3、数据校验：拿UNDO_LOG中的后镜像与当前数据进行比较，如果有不同，说明数据被当前全局事务之外的动作做了修改，这种情况，需要人工来处理；</p><p>​    4、根据UNDO_LOG中的前镜像和业务sql的相关信息生成并执行回滚的语句；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update product <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;TXC&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>​    5、提交本地事务，并把本地事务的执行结果（即分支事务回滚的结果）上报TC；</p><blockquote><p>第二阶段-提交</p></blockquote><p>​    1、收到TC的分支提交请求，把请求放入一个一部任务的队列中，马上返回提交成功的结果给TC；</p><p>​    2、异步任务阶段的分支提交请求将异步和批量地删除相对应UNDO_LOG记录；</p><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><blockquote><p>AT模式的前提</p></blockquote><p>​    1、基于支持本地ACID事务的关系型数据库；</p><p>​    2、Java应用，通过JDBC访问数据库；</p><blockquote><p>整体机制是两个阶段提交协议的演变：</p></blockquote><p>第一阶段：</p><p>​    业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源（本地事务，就已经在数据库持久化了）；</p><p>第二阶段：</p><p>​    1、如果没有异常提交异步化，非常快速的完成（正常情况，那就是提交了，同步一下TC Server的状态，删除回滚日志）；</p><p>​    2、如果有异常回滚通过一阶段的回滚日志进行反向补偿；</p><h3 id="写隔离"><a href="#写隔离" class="headerlink" title="写隔离"></a>写隔离</h3><p>第一阶段本地事务提交前，需要确保先拿到<code>全局锁</code>， 拿不到<code>全局锁</code>就不能提交本地事务；</p><p>拿<code>全局锁</code>的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁；</p><p><code>避免了写数据的冲突</code></p><blockquote><p>案例1</p></blockquote><p>案例：两个或多个全局事务tx1和tx2，分别并发对a表的m字段进行更新操作，m的初始值1000。</p><p>将设tx1先开始，开启本地事务，拿到本地锁，更新操作m=1000-100=900，本地事务提交前，先拿到该记录的<code>全局锁</code>，本地提交释放本地锁。</p><p>tx2后开始，开启本地事务，拿到本地锁，更新操作m=900-100=800，本地事务提交前，尝试拿该记录的<code>全局锁</code>，tx1全局提交前，该记录的全局锁一直会被tx1持有，tx2需要尝试等待<code>全局锁</code>；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211007004518248.png" alt="image-20211007004518248"></p><p>tx1 二阶段全局提交，释放<code>全局锁</code>，tx2拿到<code>全局锁</code>提交本地事务；</p><blockquote><p>案例2</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211007182522888.png" alt="image-20211007182522888"></p><p>1、如果tx1的二阶段全局回滚，则tx1需要重写获取该数据的本地所，进行反向补偿的更新操作，实现分支的回滚；</p><p>2、此时，如果tx2仍在等待该数据的<code>全局锁</code>，同时持有本地锁，则tx1的分支回滚会失败，分支的回滚会一直充实，直到tx2的<code>全局锁</code>超时，放弃<code>全局锁</code>并回滚本地事务释放本地锁，tx1的分支回滚最终成功；</p><p>3、因为整个过程<code>全局锁</code>在tx1结束前一直是被tx1持有的。所以不会发生<code>胀读</code>问题；</p><h3 id="读隔离"><a href="#读隔离" class="headerlink" title="读隔离"></a>读隔离</h3><p>在数据库本地事务隔离级别 读已提交（Read Committed）或以上的基础上，Seata（AT模式）的默认全局隔离级别是 读未提交（Read Uncommitted）;</p><blockquote><p>案例</p></blockquote><p>如果应用在特定场景下，必须要求全局的<code>读已提交</code>，目前Seata的方式是通过在sql语句中加SELECT FOR UODATE 实现的；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211007184352115.png" alt="image-20211007184352115"></p><p><code>SELECT FOR UPDATE</code>语句的执行会申请<code>全局锁</code>，如果<code>全局锁</code>被其他事务持有，则释放本地锁（回滚SELECT FOR UPDATE 语句的本地执行）并重试，这个过程中，查询是block住的，直到<code>全局锁</code>拿到，即读取的相关数据是已提交的，才返回；</p><p>出于总体性能上的考虑，Seata目前的方案并没有对所有SELECT语句都进行代理，仅针对SELECT FOR UDPATE 的SELECT语句；</p><h2 id="TC-Server集群"><a href="#TC-Server集群" class="headerlink" title="TC Server集群"></a>TC Server集群</h2><p>生产环境下，需要部署集群Seata TC Server，实现高可用，在集群时，多个Seata TC Server通过db数据库或者redis实现全局事务会话信息的共享；每个Seata TC Server注册自己到注册中心上，应用从注册中心获得Seata TC Server实例，这就是Seata TC Server的集群；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211007191725902.png" alt="image-20211007191725902"></p><p>Seata TC Server 对主流的注册中心都提供了集成，这里采用Nacos作为注册中心；</p><blockquote><p>第一步</p></blockquote><p> 解压两个seata-server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf seata-server-1.3.0.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制2份</span></span><br><span class="line">\cp -rf server-1.3.0 seata-01</span><br><span class="line">\cp -rf server-1.3.0 seata-02</span><br></pre></td></tr></table></figure><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211007192256334.png" alt="image-20211007192256334"></p><blockquote><p>第二步</p></blockquote><p>初始化Seata TC Server的db数据库，在mysql中，创建seata数据库，并在该库下面执行如下的sql脚本</p><p>这里的sql脚本 在seata源码的<code>seata-1.4.2\script\server\db</code>的目录下面</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211007192917049.png" alt="image-20211007192917049"></p><blockquote><p>第三步</p></blockquote><p>修改<code>conf/file.conf</code>配置文件，修改使用db数据库，实现Seata TC Server的全局事务会话信息的共享;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># transaction log store, only used in seata-server</span></span></span><br><span class="line">store &#123;</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># store mode: file、db、redis</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 修改file为db</span></span><br><span class="line">  mode = &quot;db&quot;</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># rsa decryption public key</span></span></span><br><span class="line">  publicKey = &quot;&quot;</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># file store property</span></span></span><br><span class="line">  file &#123;</span><br><span class="line">    ## store location dir</span><br><span class="line">    dir = &quot;sessionStore&quot;</span><br><span class="line">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span><br><span class="line">    maxBranchSessionSize = 16384</span><br><span class="line">    # globe session size , if exceeded throws exceptions</span><br><span class="line">    maxGlobalSessionSize = 512</span><br><span class="line">    # file buffer size , if exceeded allocate new buffer</span><br><span class="line">    fileWriteBufferCacheSize = 16384</span><br><span class="line">    # when recover batch read size</span><br><span class="line">    sessionReloadReadSize = 100</span><br><span class="line">    # async, sync</span><br><span class="line">    flushDiskMode = async</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># database store property</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># 修改数据库连接信息</span></span></span><br><span class="line">  db &#123;</span><br><span class="line">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span><br><span class="line">    datasource = &quot;druid&quot;</span><br><span class="line">    ## mysql/oracle/postgresql/h2/oceanbase etc.</span><br><span class="line">    dbType = &quot;mysql&quot;</span><br><span class="line">    driverClassName = &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">    ## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param</span><br><span class="line">    url = &quot;jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true&quot;</span><br><span class="line">    user = &quot;mysql&quot;</span><br><span class="line">    password = &quot;mysql&quot;</span><br><span class="line">    minConn = 5</span><br><span class="line">    maxConn = 100</span><br><span class="line">    globalTable = &quot;global_table&quot;</span><br><span class="line">    branchTable = &quot;branch_table&quot;</span><br><span class="line">    lockTable = &quot;lock_table&quot;</span><br><span class="line">    queryLimit = 100</span><br><span class="line">    maxWait = 5000</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment"># redis store property</span></span></span><br><span class="line">  redis &#123;</span><br><span class="line">    ## redis mode: single、sentinel</span><br><span class="line">    mode = &quot;single&quot;</span><br><span class="line">    ## single mode property</span><br><span class="line">    single &#123;</span><br><span class="line">      host = &quot;127.0.0.1&quot;</span><br><span class="line">      port = &quot;6379&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    ## sentinel mode property</span><br><span class="line">    sentinel &#123;</span><br><span class="line">      masterName = &quot;&quot;</span><br><span class="line">      ## such as &quot;10.28.235.65:26379,10.28.235.65:26380,10.28.235.65:26381&quot;</span><br><span class="line">      sentinelHosts = &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    password = &quot;&quot;</span><br><span class="line">    database = &quot;0&quot;</span><br><span class="line">    minConn = 1</span><br><span class="line">    maxConn = 10</span><br><span class="line">    maxTotal = 100</span><br><span class="line">    queryLimit = 100</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>第四步</p></blockquote><p>设置使用Nacos注册中心，修改<code>conf/registry.conf</code>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 设置为nacos</span></span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 设置nacosip端口</span></span><br><span class="line">  nacos &#123;</span><br><span class="line">    application = &quot;seata-server&quot;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8848&quot;</span><br><span class="line">    group = &quot;SEATA_GROUP&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    username = &quot;&quot;</span><br><span class="line">    password = &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = &quot;http://localhost:8761/eureka&quot;</span><br><span class="line">    application = &quot;default&quot;</span><br><span class="line">    weight = &quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr = &quot;localhost:6379&quot;</span><br><span class="line">    db = 0</span><br><span class="line">    password = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    timeout = 0</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:2181&quot;</span><br><span class="line">    sessionTimeout = 6000</span><br><span class="line">    connectTimeout = 2000</span><br><span class="line">    username = &quot;&quot;</span><br><span class="line">    password = &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8500&quot;</span><br><span class="line">    aclToken = &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    serverAddr = &quot;http://localhost:2379&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  sofa &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:9603&quot;</span><br><span class="line">    application = &quot;default&quot;</span><br><span class="line">    region = &quot;DEFAULT_ZONE&quot;</span><br><span class="line">    datacenter = &quot;DefaultDataCenter&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    group = &quot;SEATA_GROUP&quot;</span><br><span class="line">    addressWaitTime = &quot;3000&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> file、nacos 、apollo、zk、consul、etcd3</span></span><br><span class="line">  type = &quot;file&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    group = &quot;SEATA_GROUP&quot;</span><br><span class="line">    username = &quot;&quot;</span><br><span class="line">    password = &quot;&quot;</span><br><span class="line">    dataId = &quot;seataServer.properties&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8500&quot;</span><br><span class="line">    aclToken = &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  apollo &#123;</span><br><span class="line">    appId = &quot;seata-server&quot;</span><br><span class="line">    ## apolloConfigService will cover apolloMeta</span><br><span class="line">    apolloMeta = &quot;http://192.168.1.204:8801&quot;</span><br><span class="line">    apolloConfigService = &quot;http://192.168.1.204:8080&quot;</span><br><span class="line">    namespace = &quot;application&quot;</span><br><span class="line">    apolloAccesskeySecret = &quot;&quot;</span><br><span class="line">    cluster = &quot;seata&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:2181&quot;</span><br><span class="line">    sessionTimeout = 6000</span><br><span class="line">    connectTimeout = 2000</span><br><span class="line">    username = &quot;&quot;</span><br><span class="line">    password = &quot;&quot;</span><br><span class="line">    nodePath = &quot;/seata/seata.properties&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    serverAddr = &quot;http://localhost:2379&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第五步</p></blockquote><p>启动两个TC Server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一个</span></span><br><span class="line">./seata-server.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个 因为端口冲突 所以换个端口</span></span><br><span class="line">./seata-server.sh -p 18091 -n 1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p: Seata TC Server监听的端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -n：Server node，在多个TC Server时，需区分各自节点，用于生产不同区间的transactionId事务编号，以免冲突；</span></span><br></pre></td></tr></table></figure><p>启动完成，查看nacos，如下：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211007200135377.png" alt="image-20211007200135377"></p><blockquote><p>第六步</p></blockquote><p>进行测试</p><blockquote><p>集群配置</p></blockquote><p>其他代码查看<code>5.4.1</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------[Seata server 集群配置]--------------------------------------------</span></span><br><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="comment"># seate应用编号，默认为$&#123;spring.application.name&#125;</span></span><br><span class="line">  <span class="attr">application-id:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">  <span class="comment">#seate事务组编号，用于TC集群名称</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">$&#123;spring.application.name&#125;-group</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="comment"># 虚拟组和分组的映射</span></span><br><span class="line">    <span class="attr">vgroup-mapping.springboot-server-seata-monomer-group:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">2020Fate!</span></span><br></pre></td></tr></table></figure><h2 id="TCC模式"><a href="#TCC模式" class="headerlink" title="TCC模式"></a>TCC模式</h2><p>AT模式基本上能满足我们使用分布式事务大部分需求，但设计非关系型数据库与中间件的操作、跨公司服务的调用、跨语言的应用调用就需要结合TCC模式；</p><h3 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211007210002098.png" alt="image-20211007210002098"></p><p>一个分布式的全局事务，整体是两个阶段提交（<code>Try</code>-<code>[Comifrm/Cancel]</code>）的模型，在seata中，AT模式与TCC模式事实上都是基于两阶段提交实现的，它们的区别在与：</p><p><code>AT模式基于支持本地ACID事务的关系型数据库</code>：</p><p>1、一阶段prepare行为：在本地事务中，一并提交“业务数据更新”和“相应回滚日志记录”；</p><p>2、二阶段commit行为：马上成功结束，自动异步批量清理回滚日志；</p><p>3、二阶段rollback行为：通过回滚日志，自动生成补偿操作，完成数据库回滚；</p><p><code>TCC模式，需要我们认为编写代码实现提交和回滚</code>：</p><p>1、一阶段prepare行为：调用自定义的perpare逻辑；</p><p>2、二阶段commit行为：调用自定义的commit逻辑；</p><p>3、二阶段rollback行为：调用自定义的rollback逻辑；</p><p>所以TCC模式，就是把自定义的分支事务的提交和回滚并纳入到全局事务管理中，通俗的说seata中TCC模式就是手工版的AT模式，它允许你自定义两个阶段的处理逻辑而不需要依赖AT模式的undo_log回滚表;</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>与5.4.1差不多，需要更改的如下</p><p><code>ProductService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LocalTCC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Product</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减库存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId 商品 ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount    扣减数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 扣减失败时抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TwoPhaseBusinessAction(name = &quot;reduceStock&quot;,commitMethod = &quot;commitTcc&quot;,rollbackMethod = &quot;cancelTcc&quot;)</span></span><br><span class="line">    <span class="function">Product <span class="title">reduceStock</span><span class="params">(<span class="meta">@BusinessActionContextParameter(paramName = &quot;productId&quot;)</span> Integer productId,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@BusinessActionContextParameter(paramName = &quot;amount&quot;)</span> Integer amount)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二阶段 提交方法</span></span><br><span class="line"><span class="comment">     * 可以另命名，要保证与commitMethod一致</span></span><br><span class="line"><span class="comment">     * context可以传递try方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">commitTcc</span><span class="params">(BusinessActionContext context)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二阶段 回滚方法</span></span><br><span class="line"><span class="comment">     * 可以另命名，要保证与commitMethod一致</span></span><br><span class="line"><span class="comment">     * context可以传递try方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancelTcc</span><span class="params">(BusinessActionContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProductServiceImpl</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">ProductMapper</span>, <span class="title">Product</span>&gt; <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@DS(value = &quot;product-ds&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">reduceStock</span><span class="params">(Integer productId, Integer amount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前 XID: &#123;&#125;&quot;</span>, RootContext.getXID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查库存</span></span><br><span class="line">        Product product = productMapper.selectByPrimaryKey(productId);</span><br><span class="line">        <span class="keyword">if</span> (product.getStock() &lt; amount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扣减库存</span></span><br><span class="line">        <span class="keyword">int</span> updateCount = productMapper.reduceStock(productId, amount);</span><br><span class="line">        <span class="comment">// 扣除成功</span></span><br><span class="line">        <span class="keyword">if</span> (updateCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扣除成功</span></span><br><span class="line">        log.info(<span class="string">&quot;扣除 &#123;&#125; 库存成功&quot;</span>, productId);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二阶段 提交方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commitTcc</span><span class="params">(BusinessActionContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;TCC第二阶段提交，ProductServiceImpl，commitTcc--&gt;xid = &#123;&#125;&quot;</span>,context.getXid()+<span class="string">&quot; ,commitTcc 提交成功！！！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二阶段 回滚方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@DS(value = &quot;product-ds&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancelTcc</span><span class="params">(BusinessActionContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;TCC第二阶段回滚，ProductServiceImpl，cancelTcc--&gt;xid = &#123;&#125;&quot;</span>,context.getXid()+<span class="string">&quot; ,cancelTcc 提交失败！！！&quot;</span>);</span><br><span class="line">        <span class="comment">//TODO 这里可以实现中间件，非关系型数据库的回滚操作</span></span><br><span class="line">        Integer productId = (Integer) context.getActionContext(<span class="string">&quot;productId&quot;</span>);</span><br><span class="line">        Integer amount = (Integer) context.getActionContext(<span class="string">&quot;amount&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;Cancel阶段，AccountServiceImpl，cancelTcc this data:productId = &#123;&#125;,amount = &#123;&#125;&quot;</span>,productId,amount);</span><br><span class="line">        <span class="comment">//进行回滚操作 加库存</span></span><br><span class="line">        productMapper.increaseStock(productId, amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AccountService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LocalTCC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Account</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义两阶段提交</span></span><br><span class="line"><span class="comment">     * //<span class="doctag">@TwoPhaseBusinessAction</span>(name=&quot;reduceBalance&quot;,commitMethod = &quot;commitTcc&quot;,rollbackMethod = &quot;cancelTcc&quot;)</span></span><br><span class="line"><span class="comment">     * name=reduceBalance 为一阶段try方法</span></span><br><span class="line"><span class="comment">     * commitMethod=commitTcc 为二阶段提交方法</span></span><br><span class="line"><span class="comment">     * rollbackMethod=cancelTcc 为二阶段回滚方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * //<span class="doctag">@BusinessActionContextParameter</span>   将参数放入上下文，方便后面拿到参数进行回滚操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 减余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money  扣减金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 失败时抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TwoPhaseBusinessAction(name=&quot;reduceBalance&quot;,commitMethod = &quot;commitTcc&quot;,rollbackMethod = &quot;cancelTcc&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reduceBalance</span><span class="params">(<span class="meta">@BusinessActionContextParameter(paramName = &quot;userId&quot;)</span> Integer userId,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="meta">@BusinessActionContextParameter(paramName = &quot;money&quot;)</span>  BigDecimal money)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二阶段 提交方法</span></span><br><span class="line"><span class="comment">     * 可以另命名，要保证与commitMethod一致</span></span><br><span class="line"><span class="comment">     * context可以传递try方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">commitTcc</span><span class="params">(BusinessActionContext context)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二阶段 回滚方法</span></span><br><span class="line"><span class="comment">     * 可以另命名，要保证与commitMethod一致</span></span><br><span class="line"><span class="comment">     * context可以传递try方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancelTcc</span><span class="params">(BusinessActionContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AccountServiceImpl</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">AccountMapper</span>,<span class="title">Account</span>&gt; <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@DS(value = &quot;account-ds&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduceBalance</span><span class="params">(Integer userId, BigDecimal money)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前 XID: &#123;&#125;&quot;</span>, RootContext.getXID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查余额</span></span><br><span class="line">        Account account = accountMapper.selectAccountByUserId(userId);</span><br><span class="line">        <span class="keyword">if</span> (account.getBalance().doubleValue() &lt; money.doubleValue()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扣除余额</span></span><br><span class="line">        <span class="keyword">int</span> updateCount = accountMapper.reduceBalance(userId, money);</span><br><span class="line">        <span class="comment">// 扣除成功</span></span><br><span class="line">        <span class="keyword">if</span> (updateCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;扣除用户 &#123;&#125; 余额成功&quot;</span>, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二阶段 提交方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">commitTcc</span><span class="params">(BusinessActionContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;TCC第二阶段提交，AccountServiceImpl，commitTcc--&gt;xid = &#123;&#125;&quot;</span>,context.getXid()+<span class="string">&quot; ,commitTcc 提交成功！！！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二阶段 回滚方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@DS(value = &quot;account-ds&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancelTcc</span><span class="params">(BusinessActionContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;TCC第二阶段回滚，AccountServiceImpl，cancelTcc--&gt;xid = &#123;&#125;&quot;</span>,context.getXid()+<span class="string">&quot; ,cancelTcc 提交失败！！！&quot;</span>);</span><br><span class="line">        <span class="comment">//TODO 这里可以实现中间件，非关系型数据库的回滚操作</span></span><br><span class="line">        Integer userId = (Integer) context.getActionContext(<span class="string">&quot;userId&quot;</span>);</span><br><span class="line">        BigDecimal money = (BigDecimal) context.getActionContext(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;Cancel阶段，AccountServiceImpl，cancelTcc this data:userId = &#123;&#125;,money = &#123;&#125;&quot;</span>,userId,money);</span><br><span class="line">        <span class="comment">//进行回滚操作 加余额</span></span><br><span class="line">        accountMapper.increaseBalance(userId, money);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成</p><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>按照官方的定义，Spring Cloud Stream 是一个构建消息驱动微服务的框架；</p><p>Spring Cloud Stream解决了开发人员无感知的使用消息中间件的问题，因为Spring Cloud Stream对消息中间件的进一步封装，可以做到代码层面对消息中间件的无感知，甚至于动态的切换中间件(rabbitmq切换为rocketmq或者kafka)，使得微服务开发的高度解耦，服务可以关注更多自己的业务流程；</p><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211008203121152.png" alt="image-20211008203121152"></p><p><code>spring cloud stream内部有几个概念：Binder、Binding、input、output</code></p><p>1、Binder：跟外部消息中间件集成的组件，用来创建Binding，各消息中间件都有自己的Binder实现；</p><p>2、Binding：包括Input Binding和Output Binding；Binding在消息中间件与应用程序提供的Provider和Consumer之间提供了一个桥梁，实现了开发者只需要应用程序的Provider和Consumer生成或消费数据即可；</p><p>3、Input：应用程序通过input（相当于消费者consumer）与spring cloud stream中的Binder交互，而Binder负责与消息中间件交互，因此，我们只需要关注如何与Binder交互即可；</p><p>4、Output：output（相当于生产者producer）与spring cloud stream中的Binder交互；</p><div class="table-container"><table><thead><tr><th>组成部分</th><th>说明</th></tr></thead><tbody><tr><td>Binder</td><td>Binder是应用与消息中间件之间的封装，目前实现了kafka和RabbitMQ的Binder,通过Binder可以很方便的连接中间件，可以动态的改变消息类型(对对应于Kafka和topic，RabbitMQ的exchange)这些都可以通过配置文件来实现；</td></tr><tr><td>@Input</td><td>该注解标识通道，通过该输入通道接收消息进入应用程序</td></tr><tr><td>@Output</td><td>该注解标识输出通道，发布的消息将通过该通道离开应用程序</td></tr><tr><td>@StreamListener</td><td>监听队列，用于消费者的队列的消息接收</td></tr><tr><td>@EnableBinding</td><td>将通道channel和exchange绑定在一起</td></tr></tbody></table></div><h2 id="集成RocketMq"><a href="#集成RocketMq" class="headerlink" title="集成RocketMq"></a>集成RocketMq</h2><blockquote><p>1、依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2.2.1.RELEASE <span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rocketmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 继承 spring cloud Alibaba依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 继承 spring boot依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># stream集成rocketmq的客户端接入点</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">name-server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9876</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment">#input 消费者</span></span><br><span class="line">        <span class="attr">input:</span></span><br><span class="line">          <span class="comment"># 发往哪里</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">test-topic</span></span><br><span class="line">          <span class="comment"># 内容格式</span></span><br><span class="line">          <span class="attr">ontent-type:</span> <span class="string">text/plain</span></span><br><span class="line">          <span class="comment"># 分组</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">test-group</span></span><br><span class="line">        <span class="comment"># output 生产者</span></span><br><span class="line">        <span class="attr">output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">test-topic</span></span><br><span class="line">          <span class="attr">ontent-type:</span> <span class="string">text/plain</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">test-group</span></span><br></pre></td></tr></table></figure><blockquote><p>3、生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SenderService</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Source source;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">//source.output() == messageChannel消息通道</span></span><br><span class="line">        <span class="keyword">boolean</span> send = source.output().send(MessageBuilder.withPayload(msg).build());</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送&quot;</span>+(send?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4、消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * spring cloud stream 里面发消息通过sink发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    Sink sink;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * springboot里面通过RocketTemplate发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sink.input().subscribe((Message&lt;?&gt; message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收消息:&quot;</span>+message.getPayload());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听接收消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> receiveMsg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@StreamListener(&quot;input&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveInput1</span><span class="params">(String receiveMsg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;input 接收到的消息: &quot;</span> + receiveMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：需要将Sink和Source交给spring容器管理@EnableBinding(value = &#123;Source.class, Sink.class&#125;)</code></p><blockquote><p>整体流程</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211010162649312.png" alt="image-20211010162649312"></p><h2 id="自定义信道"><a href="#自定义信道" class="headerlink" title="自定义信道"></a>自定义信道</h2><p><code>只需要自定义Sink和Source就可以了</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义发送消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String OUTPUT = <span class="string">&quot;testOutput&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(TestSource.OUTPUT)</span></span><br><span class="line">    <span class="function">MessageChannel <span class="title">testOutput</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义接收消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestSink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String INPUT = <span class="string">&quot;testInput&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(TestSink.INPUT)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">testInput</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  # stream集成rocketmq的客户端接入点</span><br><span class="line">  cloud:</span><br><span class="line">    stream:</span><br><span class="line">      rocketmq:</span><br><span class="line">        binder:</span><br><span class="line">          name-server: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9876</span></span><br><span class="line">      bindings:</span><br><span class="line">        #testInput 跟TestSink里面的值对应 消费者</span><br><span class="line">        testInput:</span><br><span class="line">          # 发往哪里</span><br><span class="line">          destination: test-input-topic</span><br><span class="line">          # 内容格式</span><br><span class="line">          ontent-type: text/plain</span><br><span class="line">          # 分组 如果组一样就是竞争接收，如果不一样就是平等接收</span><br><span class="line">          group: test-group</span><br><span class="line">        # testOutput 跟TestSource里面的值对应 生产者</span><br><span class="line">        testOutput:</span><br><span class="line">          destination: est-input-topic</span><br><span class="line">          ontent-type: text/plain</span><br><span class="line">          group: test-group</span><br></pre></td></tr></table></figure><p><code>注意：需要将TestSink和TestSource交给spring容器管理@EnableBinding(value = &#123;TestSource.class, TestSink.class&#125;)</code></p><h2 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211010165434559.png" alt="image-20211010165434559"></p><p>图中分为两个流程：正常事务消息的发送及提交、事务消息的补偿流程；</p><blockquote><p>1.事务消息发送及提交</p></blockquote><p>1、发送消息（half消息）</p><p>2、服务端相应消息写入结果</p><p>3、根据发送结果执行本地事务（如果写写入失败，此时half消息对业务不可见，本地逻辑不执行）</p><p>4、根据本地事务状态执行Commit和Rollback（commit操作生成消息索引，消息对消费者可见）</p><blockquote><p>2.补偿流程</p></blockquote><p>1、对没有Commit/Rollback的事务消息（pending状态的消息），从服务端发起一次“会查”；</p><p>2、Producer收到会查消息，检查会查消息对应的本地事务的状态；</p><p>3、根据本地事务状态，重写Commit或者Rollbakc；</p><p>其中，补偿阶段用于解决消息Commit或Rollbakc发生超时或者失败的情况；</p><p>事务消息一共有三种状态：提交状态、回滚状态、中间状态;</p><blockquote><p>提交状态</p></blockquote><p>​    TransactionStatus.CommitTransaction：提交事务，代表消费者可以消费此消息；</p><blockquote><p>回滚状态</p></blockquote><p>​    TransactionStatus.RollbackTransaction：回滚事务，代表消息将被删除，不能被消费；</p><blockquote><p>中间状态</p></blockquote><p>​    TransactionStatus.Unknown：中间状态，代表需要检查消息队列来确定状态；</p><blockquote><p>案例</p><p>1、生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxSend</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    TestSource testSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sendTransactionalMsg</span><span class="params">(T msg,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        Message&lt;T&gt; send = MessageBuilder.withPayload(msg)</span><br><span class="line">                .setHeader(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_JSON)</span><br><span class="line">                .setHeader(<span class="string">&quot;test&quot;</span>, String.valueOf(num))</span><br><span class="line">                .build();</span><br><span class="line">        testSource.outputTx().send(send);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事务实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * txProducerGroup 事务分组名称</span></span><br><span class="line"><span class="comment"> * corePoolSize 核心线程数</span></span><br><span class="line"><span class="comment"> * maximumPoolSize 最大线程数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> July</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RocketMQTransactionListener(txProducerGroup = &quot;myTxProducerGroup&quot;,corePoolSize = 5, maximumPoolSize = 10)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionListenerImpl</span> <span class="keyword">implements</span> <span class="title">RocketMQLocalTransactionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RocketMQLocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message message, Object o)</span> </span>&#123;</span><br><span class="line">        Object test = message.getHeaders().get(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">//如果等于1 就让他保持 中间状态等待回调检查</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(test))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;executer: &quot;</span> + <span class="keyword">new</span> String((<span class="keyword">byte</span>[]) message.getPayload()) + <span class="string">&quot; unknown&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.UNKNOWN;</span><br><span class="line">        <span class="comment">// 如果等于2 就回滚，消息不可见</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;2&quot;</span>.equals(test)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;executer: &quot;</span> + <span class="keyword">new</span> String((<span class="keyword">byte</span>[]) message.getPayload()) + <span class="string">&quot; rollback&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.ROLLBACK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//其他 消息提交，消费者可见</span></span><br><span class="line">        System.out.println(<span class="string">&quot;executer: &quot;</span> + <span class="keyword">new</span> String((<span class="keyword">byte</span>[]) message.getPayload()) + <span class="string">&quot; commit&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> RocketMQLocalTransactionState.COMMIT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调检查</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RocketMQLocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;check: &quot;</span> + <span class="keyword">new</span> String((<span class="keyword">byte</span>[]) message.getPayload()));</span><br><span class="line">        <span class="keyword">return</span> RocketMQLocalTransactionState.COMMIT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># stream集成rocketmq的客户端接入点</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">name-server:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span><span class="string">:9876</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">         <span class="comment"># 配置 rocketmq 生产者</span></span><br><span class="line">          <span class="attr">outputTX:</span></span><br><span class="line">            <span class="attr">producer:</span></span><br><span class="line">              <span class="comment"># 开启事务 默认是关闭的</span></span><br><span class="line">              <span class="attr">transactional:</span> <span class="literal">true</span></span><br><span class="line">              <span class="comment"># 开始事务分组</span></span><br><span class="line">              <span class="attr">group:</span> <span class="string">myTxProducerGroup</span></span><br><span class="line"><span class="comment">#--------------- 事务消息 ---------------------------</span></span><br><span class="line">        <span class="attr">inputTX:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">transaction-topic</span></span><br><span class="line">          <span class="attr">ontent-type:</span> <span class="string">text/plain</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">transaction-group</span></span><br><span class="line">        <span class="comment"># output 生产者</span></span><br><span class="line">        <span class="attr">outputTX:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">transaction-topic</span></span><br><span class="line">          <span class="attr">ontent-type:</span> <span class="string">text/json</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试结果</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">executer: send 1 unknown</span><br><span class="line">executer: send 2 rollback</span><br><span class="line">executer: send 3 commit</span><br><span class="line">接收到事务的消息: send 3</span><br><span class="line">check: send 1</span><br><span class="line">接收到事务的消息: send 1</span><br></pre></td></tr></table></figure><h2 id="对象标签消息"><a href="#对象标签消息" class="headerlink" title="对象标签消息"></a>对象标签消息</h2><blockquote><p>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-service-stream-rocketmq</span></span><br><span class="line">  <span class="comment"># stream集成rocketmq的客户端接入点</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">name-server:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span><span class="string">:9876</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="comment"># 指定testInput 只接收标签为user1的数据</span></span><br><span class="line">          <span class="attr">testInput:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">tags:</span> <span class="string">user1</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line"><span class="comment">#--------------- 自定义消息 ---------------------------</span></span><br><span class="line">        <span class="comment">#input 消费者</span></span><br><span class="line">        <span class="attr">testInput:</span></span><br><span class="line">          <span class="comment"># 发往哪里</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">test-input-topic</span></span><br><span class="line">          <span class="comment"># 内容格式</span></span><br><span class="line">          <span class="attr">ontent-type:</span> <span class="string">text/plain</span></span><br><span class="line">          <span class="comment"># 分组 如果组一样就是竞争接收，如果不一样就是平等接收</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">test-group1</span></span><br><span class="line">        <span class="comment"># output 生产者</span></span><br><span class="line">        <span class="attr">testOutput:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">test-input-topic</span></span><br><span class="line">          <span class="attr">ontent-type:</span> <span class="string">text/plain</span></span><br><span class="line">          <span class="comment"># 分组 如果组一样就是竞争接收，如果不一样就是平等接收</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">test-group1</span></span><br></pre></td></tr></table></figure><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SenderService</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    TestSource testSource;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象标签消息发送</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sendObject</span><span class="params">(T msg,String tag)</span></span>&#123;</span><br><span class="line">        Message&lt;T&gt; build = MessageBuilder.withPayload(msg)</span><br><span class="line">            <span class="comment">//指定内容标签</span></span><br><span class="line">                .setHeader(MessageConst.PROPERTY_TAGS, tag)</span><br><span class="line">                .setHeader(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_JSON)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">boolean</span> send = testSource.testOutput().send(build);</span><br><span class="line">        System.out.println(<span class="string">&quot;对象标签消息内容:&quot;</span>+msg.toString()+<span class="string">&quot; 发送：&quot;</span>+(send?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Test&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//发送对象标签消息</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setUsername(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        user1.setSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        senderService.sendObject(user,<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        senderService.sendObject(user1,<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20211010190335307.png" alt="image-20211010190335307"></p><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><blockquote><p>RockerMQ Producer Properties</p></blockquote><p>以 spring.cloud.stream.rocketmq.bindings.<channelName>.producer. 为前缀的RocketMQ Producer 相关的配置</p><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">作用</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">enable</td><td style="text-align:center">是否启用producer</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">group</td><td style="text-align:center">producer的分组名称</td><td style="text-align:center">空的</td></tr><tr><td style="text-align:center">maxMessageSize</td><td style="text-align:center">消息发送最大字节数</td><td style="text-align:center">8249344</td></tr><tr><td style="text-align:center">transactional</td><td style="text-align:center">是否开启事务</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">sync</td><td style="text-align:center">是否使用同步方式发送消息</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">sendMessageTimeout</td><td style="text-align:center">发送消息的超时时间（毫秒）</td><td style="text-align:center">3000</td></tr><tr><td style="text-align:center">compressMessageBodyThreshold</td><td style="text-align:center">消息体压缩阈值（当消息体超过4k是会被压缩）</td><td style="text-align:center">4096</td></tr><tr><td style="text-align:center">retryTimesWhenSendFaild</td><td style="text-align:center">在同步发送消息的模式下，消息发送失败的重试次数</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">trtryNextServer</td><td style="text-align:center">消息发送失败的情况下是否重试其他的broker</td><td style="text-align:center">false</td></tr></tbody></table></div><blockquote><p>RockerMQ Consumer Properties</p></blockquote><p>以 spring.cloud.stream.rocketmq.bindings.<channelName>.consumer. 为前缀的 RocketMQ Consumer 相关的配置</p><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">作用</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">enable</td><td style="text-align:center">是否启用consumer</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">tags</td><td style="text-align:center">consumer基于tags订阅，多个以\</td><td style="text-align:center">\</td><td>分割</td><td>空的</td></tr><tr><td style="text-align:center">sql</td><td style="text-align:center">consumer基于sql订阅</td><td style="text-align:center">空的</td></tr><tr><td style="text-align:center">broadcasting</td><td style="text-align:center">consumer是否广播消费模式，如果想让所有的订阅者都能接收到消息，可以使用</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">orderly</td><td style="text-align:center">consumer是否同步消费者模式</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">delayLevelWhenNextConsumer</td><td style="text-align:center">异步消费者模式下消息失败重试策略；-1=不重复，直接放入死信队列。0=broker，控制重试策略。&gt;0=client控制重设策略</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">superendCurrentQueueTimeMillis</td><td style="text-align:center">同步消费模式下消息失败后再次消费的时间间隔</td><td style="text-align:center">1000</td></tr></tbody></table></div><blockquote><p>RocketMQ Binder Properties</p></blockquote><div class="table-container"><table><thead><tr><th>名称</th><th>作用</th><th>默认值</th></tr></thead><tbody><tr><td>spring.cloud.stream.rocketmq.binder.name-server</td><td>RocketMQ NameServer 地址</td><td>127.0.0.1:9876</td></tr><tr><td>spring.cloud.stream.rocketmq.binder.access-key</td><td>阿里云账号 AccessKey</td><td>null</td></tr><tr><td>spring.cloud.stream.rocketmq.binder.secret-key</td><td>阿里云账号 SecretKey</td><td>null</td></tr><tr><td>spring.cloud.stream.rocketmq.binder.enable-msg-trace</td><td>是否为producer和consumer开启消息轨迹功能</td><td>true</td></tr><tr><td>spring.cloud.stream.rocketmq.binder.customized-trace-topic</td><td>消息轨迹开启后存储的topic名称</td><td>RMQ_SYS_TRACE_TOPIC</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">微服务</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="微服务" scheme="https://www.isfate.xyz/categories/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://www.isfate.xyz/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba学习-一</title>
    <link href="https://www.isfate.xyz/article/6dd28e9b.html"/>
    <id>https://www.isfate.xyz/article/6dd28e9b.html</id>
    <published>2021-07-02T02:12:56.000Z</published>
    <updated>2022-02-07T11:55:22.342Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud Alibaba是Spring Cloud下的一个子项目Spring Cloud Alibaba为分布式应用程序开发提供了一站式解决方案，它包含开发分布式应用程序所需的所有组件，使您可以轻松使用Spring Cloud开发应用程序，使用Spring Cloud Alibaba你只需要添加一些注解和少量配置即可将Spring Cloud应用程序连接到Alibaba的分布式解决方案，并使用Alibaba中间件构建分布式应用程序系统;</p><h1 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h1><p>Nacos主要用于实现动态服务注册实现、服务配置、服务元数据及流量管理；</p><p><a href="https://github.com/alibaba/nacos/releases">下载Nacos最新版本</a></p><h2 id="提供者-消费端配置"><a href="#提供者-消费端配置" class="headerlink" title="提供者/消费端配置"></a>提供者/消费端配置</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2.2.1.RELEASE <span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nacos 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 继承 spring cloud Alibaba依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 继承 spring boot依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">18082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-alibaba-nacos-provider</span></span><br><span class="line">  <span class="comment"># 连接 nacos</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># ip：port</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 账号</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="comment"># 密码</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">2020Fate!</span></span><br></pre></td></tr></table></figure><p>启动类 加上注解<code>@EnableDiscoveryClient</code>开启nacos支持;</p><h2 id="服务发现与负载均衡调用"><a href="#服务发现与负载均衡调用" class="headerlink" title="服务发现与负载均衡调用"></a>服务发现与负载均衡调用</h2><h3 id="LoadBalancerClient调用"><a href="#LoadBalancerClient调用" class="headerlink" title="LoadBalancerClient调用"></a>LoadBalancerClient调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消费者配置</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/echo/&#123;app&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">echoAppName</span><span class="params">(<span class="meta">@PathVariable(&quot;app&quot;)</span> String app)</span></span>&#123;</span><br><span class="line"><span class="comment">//使用 LoadBalanceClient 和 RestTemplate 结合的方式来访问,loadBalancerClient实现了负载均衡所以RestTemplate不需要再配置负载均衡</span></span><br><span class="line">ServiceInstance serviceInstance = loadBalancerClient.choose(<span class="string">&quot;spring-cloud-alibaba-nacos-provider&quot;</span>);</span><br><span class="line"><span class="comment">//http://192.168.0.104:18082/echo/&#123;app&#125;</span></span><br><span class="line">String url = String.format(<span class="string">&quot;http://%s:%s/echo/%s&quot;</span>, serviceInstance.getHost(), serviceInstance.getPort(), app);</span><br><span class="line">System.out.println(<span class="string">&quot;request url:&quot;</span>+url);</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者配置</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/echo/&#123;string&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(<span class="meta">@PathVariable</span> String string)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;provider /echo/&#123;string&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;loadBalancerClient 方式调用成功!&quot;</span> + string;</span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h3 id="RestTemplate调用"><a href="#RestTemplate调用" class="headerlink" title="RestTemplate调用"></a>RestTemplate调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@LoadBalanced</span><span class="comment">//开启负载均衡</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br><span class="line">    </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/echo-rest/&#123;str&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rest</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//restTemplate + @LoadBalanced 实现远程调用</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://spring-cloud-alibaba-nacos-provider/echo/&quot;</span> + str, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OpenFeign调用"><a href="#OpenFeign调用" class="headerlink" title="OpenFeign调用"></a>OpenFeign调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> EchoFeignService echoFeignService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/divide-feign&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">divide</span><span class="params">(<span class="meta">@RequestParam</span> Integer a,<span class="meta">@RequestParam</span> Integer b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> echoFeignService.divide(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//feign 调用配置</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;spring-cloud-alibaba-nacos-provider&quot;,</span></span><br><span class="line"><span class="meta">        fallback = EchoFeignServiceFallback.class,configuration = EchoFeignConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EchoFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/echo/&#123;str&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">echo</span><span class="params">(<span class="meta">@PathVariable(&quot;str&quot;)</span>String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/divide&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">divide</span><span class="params">(<span class="meta">@RequestParam(&quot;a&quot;)</span>Integer a,<span class="meta">@RequestParam(&quot;b&quot;)</span>Integer b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * feign声明的接口可以有默认实现，就是可以不需要远程服务提供者实现，自己实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">divide</span><span class="params">(Integer a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;consumer divide method.... &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> divide(a,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/notFound&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">notFound</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoFeignConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把降级类在容器内创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EchoFeignServiceFallback <span class="title">echoFeignServiceFallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EchoFeignServiceFallback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//降级配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoFeignServiceFallback</span> <span class="keyword">implements</span> <span class="title">EchoFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;echo 方法降级了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">divide</span><span class="params">(Integer a, Integer b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;divide 方法降级了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">notFound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;notFound 方法降级了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DiscoveryClient调用"><a href="#DiscoveryClient调用" class="headerlink" title="DiscoveryClient调用"></a>DiscoveryClient调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DiscoveryClient 调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/clien/&#123;service&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clien</span><span class="params">(<span class="meta">@PathVariable</span> String service)</span></span>&#123;</span><br><span class="line"><span class="comment">//拿到服务的描述</span></span><br><span class="line">discoveryClient.description();</span><br><span class="line"><span class="comment">//拿到服务的实例</span></span><br><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;spring-cloud-alibaba-nacos-provider&quot;</span>);</span><br><span class="line"><span class="comment">//拿到服务的顺序</span></span><br><span class="line">discoveryClient.getOrder();</span><br><span class="line"><span class="comment">//拿到服务的服务</span></span><br><span class="line">discoveryClient.getServices();</span><br><span class="line"><span class="keyword">return</span> discoveryClient.getInstances(service);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nacos-客户端缓存信息"><a href="#Nacos-客户端缓存信息" class="headerlink" title="Nacos 客户端缓存信息"></a>Nacos 客户端缓存信息</h2><p>如果服务之间发生过调用，Nacos宕机了不会影响服务的调用，如果没有发生调用，Nacos宕机之后是无法正常访问的；</p><p>在spring cloud alibab源码(spring-cloud-starter-alibaba-nacos-discovery)中的<code>NacosServer</code>中有一个参数为<code>metadata</code>的map集合，用于保存调用的信息；</p><h2 id="指定分组"><a href="#指定分组" class="headerlink" title="指定分组"></a>指定分组</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">      <span class="comment"># 服务发现地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 服务发现命名空间</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">da1df238-5000-4f3c-b63a-53f4662d755b</span></span><br><span class="line">        <span class="comment"># 服务分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">dev_group</span></span><br></pre></td></tr></table></figure><h1 id="Nacos-配置中心"><a href="#Nacos-配置中心" class="headerlink" title="Nacos 配置中心"></a>Nacos 配置中心</h1><p>​    nacos提供用于存储配置和其他元数据的key/value存储，为分布式系统中的外部化配置提供服务端和客户端支持，使用spring cloud alibaba nacos config 就可以在Nacos Server集中管理Spring Cloud 应用的外部属性配置；</p><p>​    nacos config是在特殊的bootstrap阶段，配置被加载到spring环境中；</p><p>​    nacos config使用DataId和Group 确认一个配置 </p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><blockquote><p>1.引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nacos config 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.配置bootstrap.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7070</span></span><br><span class="line"><span class="comment"># 配置服务名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-service-nacos-config</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># nacos账号密码</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">2020Fate!</span></span><br><span class="line">      <span class="comment"># 服务发现地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span><span class="string">:8848</span></span><br><span class="line">      <span class="comment"># 如果nacos配置中心的group_id发生改变这里就要改</span></span><br><span class="line"><span class="comment">#      config:</span></span><br><span class="line"><span class="comment">#        group: lll</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>nacos客户端</li></ol></blockquote><p>1.Properties</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210825155512650.png" alt="image-20210825155512650"></p><p>2.yaml</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210825162641315.png" alt="image-20210825162641315"></p><p>并且需要修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="comment"># 指定命名空间</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">90a8f778-69e1</span></span><br></pre></td></tr></table></figure><blockquote><p>4.读取nacos配置</p></blockquote><p>方式1：不推荐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span><span class="comment">//开启服务注册与发现</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext applicationContext = SpringApplication.run(NacosConfigApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当动态配置刷新时，会更新到Enviroment中，因此此处每个1秒从Enviroment中获取数据</span></span><br><span class="line">        String userName = applicationContext.getEnvironment().getProperty(<span class="string">&quot;user.name&quot;</span>);</span><br><span class="line">        String password = applicationContext.getEnvironment().getProperty(<span class="string">&quot;user.password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前部署的环境</span></span><br><span class="line">        String currentEnv = applicationContext.getEnvironment().getProperty(<span class="string">&quot;current.env&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user name：&quot;</span>+userName +<span class="string">&quot;—————— user password：&quot;</span>+password+<span class="string">&quot;—————— 当前环境：&quot;</span>+currentEnv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式2：通过@Value 读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.password&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><p>方式3：@ConfigurationProperties读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.nacos频繁打印日志</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.alibaba.nacos.client.config.impl:</span> <span class="string">WARN</span></span><br></pre></td></tr></table></figure><h2 id="多环境"><a href="#多环境" class="headerlink" title="多环境"></a>多环境</h2><p>项目配置加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="comment"># 激活那个nacos配置</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>nacos客户端配置</p><p>DataId命名<code>项目名称-环境.文件类型</code>，例如我这里的<code>springcloud-service-nacos-config-dev.properties</code></p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210825165132360.png" alt="image-20210825165132360"></p><h2 id="服务配置数据模型"><a href="#服务配置数据模型" class="headerlink" title="服务配置数据模型"></a>服务配置数据模型</h2><blockquote><ol><li>命名空间</li></ol></blockquote><p>​    用于配置隔离，不同命名空间下，可以存在相同的Group或者Data ID配置，Namespace的常用场景之一是不同环境的配置进行分区隔离，例如开发环境、测试环境和生产环境的资源（如配置、服务）隔离等；</p><blockquote><ol><li>Group</li></ol></blockquote><p>​    Nacos中的一组配置集合，是组织配置的维度之一，通过一个有意义的字符串（如Buy或Trade）对一组配置集合进行分组，从而区分Data ID相同的配置集合，当在Nacos上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用DEFAULT_GROUP，配置分组的常用场景：不同的应用或组件使用了相同的配置类型，如database_url配置和MQ_topic配置；</p><blockquote><p>3.Data ID</p></blockquote><p>​    Nacos中的某个配置集合的ID，配置集合ID是组织划分配置的维度之一，Data iD通常用于组织划分系统的配置集合，一个系统或者应用可以包含多个配置集合，每个配置集都可以被一个有意义的名称表示；</p><blockquote><p>Nacos data model</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210827142805034.png" alt="image-20210827142805034"></p><p>第一种方案：</p><p>​    默认命名空间（public）+默认Group分组（Default_GROUP）+自定义Data ID（没有默认值）</p><p>第二种方案：</p><p>​    默认命名空间+自定义Group分组+自定义Data Id（没有默认值）</p><p>​    </p><h2 id="Nacos持久化"><a href="#Nacos持久化" class="headerlink" title="Nacos持久化"></a>Nacos持久化</h2><p>​    nacos默认情况下是采用apache derby内嵌数据库进行数据存储，在单机模式时可以使用nacos嵌入式数据库实现数据存储，但是derby数据库不方便观察数据存储的基本情况，从nacos0.7版本开始添加了支持mysql数据源能力；</p><blockquote><p>第一步</p></blockquote><p>​    安装mysql5.7+；初始化mysql数据库，数据库初始化文件：<code>nacos-mysql.sql</code>，该未见在Nacos程序包conf目录下；</p><blockquote><p>第二步</p></blockquote><p>​    修改conf/application.properties文件，增加支持MySQL数据源配置，添加（目前只支持mysql）数据源的url、用户名和密码；然后启动nacos（单机启动），此时发现nacos所有写嵌入式数据库的数据都写到MySQL去了；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210830151707248.png" alt="image-20210830151707248"></p><p>启动nacos <code>./startup.sh -m standalone</code></p><h2 id="Nacos集群"><a href="#Nacos集群" class="headerlink" title="Nacos集群"></a>Nacos集群</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210830152648812.png" alt="image-20210830152648812"></p><p>具体步骤：</p><blockquote><p>第一步</p></blockquote><p>准备3台nacos</p><div class="table-container"><table><thead><tr><th style="text-align:center">ip</th><th style="text-align:center">名称</th></tr></thead><tbody><tr><td style="text-align:center">192.168.1.211</td><td style="text-align:center">nacos-01</td></tr><tr><td style="text-align:center">192.168.1.212</td><td style="text-align:center">nacos-02</td></tr><tr><td style="text-align:center">192.168.1.213</td><td style="text-align:center">nacos-03</td></tr><tr><td style="text-align:center">192.168.1.111</td><td style="text-align:center">nginx</td></tr></tbody></table></div><blockquote><p>第二步 配置nacos集群</p></blockquote><p>​    在Nacos的conf目录下有一个<code>cluster.conf.example</code>，可以直接把example扩展名去掉来使用，也可以单独创建一个cluster.conf文件。然在该文件中每行配置一个ip:prot，3个节点都要配置如图：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210830161401079.png" alt="image-20210830161401079"></p><blockquote><p>第三步 安装nginx</p></blockquote><ol><li>安装nginx</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载nginx并且安装</span></span><br><span class="line">yum install -y nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">开机启动</span></span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><ol><li>配置nginx前需要检查selinux是否关闭</li></ol><p>输入<code>getenforce</code>命令可以查看<strong>selinux</strong>是否关闭，如果显示<code>disabled</code>或者<code>permissive</code>表示已经关闭，如果显示<code>enforcing</code>则表示没有关闭，需要手动打开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getenforce</span><br></pre></td></tr></table></figure><p>临时关闭seliunx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0    ##设置SELinux 成为permissive模式</span><br><span class="line">setenforce 1    ##设置SELinux 成为enforcing模式</span><br></pre></td></tr></table></figure><p>永久关闭seliunx，修改/etc/selinux/config，将<code>SELINUX=enforcing</code>改为<code>SELINUX=disabled</code></p><blockquote><p>第四步 配置方向代理</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">upstream nacos-server&#123;</span><br><span class="line">server 192.168.1.211:8848;</span><br><span class="line">server 192.168.1.212:8848;</span><br><span class="line">server 192.168.1.213:8848;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  192.168.1.111;</span><br><span class="line"></span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">    location /nacos &#123;</span><br><span class="line">        proxy_pass http://nacos-server/nacos;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第五步 测试</p></blockquote><p>通过访问<code>http://192.168.1.111/nacos</code>测试</p><h2 id="Nacos服务权重"><a href="#Nacos服务权重" class="headerlink" title="Nacos服务权重"></a>Nacos服务权重</h2><p> <img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210902132800021.png" alt="image-20210902132800021"></p><p>分为0和1两个等级，0表示少，使用NacosRule的策略；</p><h2 id="Nacos集群负载均衡"><a href="#Nacos集群负载均衡" class="headerlink" title="Nacos集群负载均衡"></a>Nacos集群负载均衡</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定集群的名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">集群名称</span></span><br></pre></td></tr></table></figure><p>如果配置了这指定集群，那它就会调用这边的集群，如果这个集群挂掉了，它才会去掉其他地方的集群；</p><h2 id="命名空间负载均衡"><a href="#命名空间负载均衡" class="headerlink" title="命名空间负载均衡"></a>命名空间负载均衡</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">命名空间id</span></span><br></pre></td></tr></table></figure><p>在提供者和消费者当中添加如上配置，如果消费者没有配置，是无法进行ribbon调用的；</p><h2 id="Ribbon懒加载"><a href="#Ribbon懒加载" class="headerlink" title="Ribbon懒加载"></a>Ribbon懒加载</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认是懒加载，服务启动一次调用很慢，因为它会去注册中心获取</span></span><br><span class="line"><span class="string">rabbion.eager-load.enabled=true</span></span><br><span class="line"><span class="comment">#为那些服务开启饥饿加载，多个用逗号隔开，非必填</span></span><br><span class="line"><span class="string">rabbion.eager-load.clients=服务名称</span></span><br></pre></td></tr></table></figure><h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h1><p>​    在分布式系统里，许多服务之间通过远程调用实现信息交互，调用时不可避免会出现调用失败，比如超时、异常等原因导致调用失败，Sentinel能够保证在一个服务出现问题的情况下，不会导致整体服务失败，避免级联故障（服务雪崩），以提高分布式系统的弹性；</p><blockquote><p>常用的容错方案</p></blockquote><ol><li>超时，设置比较短的超时时间，调用不成功，很短时间就释放线程，避免大量线程堵塞等待，导致服务cpu、内存等资源飙高；</li><li>限流，超过设置的阈值就拒绝，比如评估系统的QPS是3000，那么就可以设置线路阈值是2800；</li><li>仓壁保护，就是一艘船不是一个船舱，而是把一个船舱划分为多个船舱，某个船舱进水了，其他船舱都不受影响；</li><li>断路器，熔断器也叫断路器。“熔断器”本身是一种开关装置，用于在电路上保护线路过载，当线路中又电器发生短路时，能够及时切断故障电路，防止发生过载、发热甚至起火等严重后果；</li></ol><h2 id="什么是Sentinel"><a href="#什么是Sentinel" class="headerlink" title="什么是Sentinel"></a>什么是Sentinel</h2><p>1.当服务访问量达到一定程度，流量扛不住的时候，该如何处理？</p><p>2.服务之间相互依赖，当服务A出现响应时间过长，影响到服务B的响应，进而产生连锁反应，直至影响整个依赖链上的所有服务，该如何处理？</p><p>Sentinel以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性，<code>官方定义：Sentinel是一个轻量级的流量控制、熔断降级Java组件，是分布式系统的流量防卫兵</code>；</p><h2 id="Sentinel组成"><a href="#Sentinel组成" class="headerlink" title="Sentinel组成"></a>Sentinel组成</h2><blockquote><p>1.核心库（Java客户端）</p></blockquote><p>​    Sentinel是核心库不依赖任何第三方框架/库，能够运行于所有Java环境；</p><blockquote><p>2.控制台</p></blockquote><p>​    基于springboot开发，打包后可以直接运行，不需要额外的Tomcat等应用容器；</p><h2 id="集成Sentienl"><a href="#集成Sentienl" class="headerlink" title="集成Sentienl"></a>集成Sentienl</h2><blockquote><p>核心库</p></blockquote><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud alibaba sentinel 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="comment"># 指定sentinel控制台</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><blockquote><p>控制台</p></blockquote><p><a href="https://github.com/alibaba/Sentinel/releases">sentientl dashboard</a>下载，然后启动，默认账号密码：sentinel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.2.jar</span><br></pre></td></tr></table></figure><p>然后调用任意接口，就能看到服务被注册到了sentinel</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210902174839114.png" alt="image-20210902174839114"></p><h2 id="Sentinel限流"><a href="#Sentinel限流" class="headerlink" title="Sentinel限流"></a>Sentinel限流</h2><h3 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h3><p>1、<code>直接模式</code>：就是直接对该资源进行控制；</p><p>2、<code>关联模式</code>：关联某一个资源，被关联的资源达到阈值，则限制当前资源访问；</p><p>3、<code>链路模式</code>：记录指定链路上的流量；</p><h3 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h3><p>1、<code>快速失败</code>：直接限制；</p><p>2、<code>预热模式</code>：根据codeFactor（默认为3）的值，从阈值/codeFactor，经过预热的时长，才达到设置的QPS阈值，比如设置QPS阈值为100，那么100/3=33，那么33作为最初的阈值，然后在10秒（预热时长）到达100后在开始限流；</p><p>3、<code>排队等待</code>：在QPS阈值到达后，新的请求就会等待，直到超时（这里配置超时时间），可以适用于突发流量的请求；</p><h3 id="QPS限流-直接"><a href="#QPS限流-直接" class="headerlink" title="QPS限流(直接)"></a>QPS限流(直接)</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907111034315.png" alt="image-20210907111034315"></p><p>对某一个路径进行<code>流控</code></p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907111144062.png" alt="image-20210907111144062"></p><p>然后对该路径进行测试</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907162551280.png" alt="image-20210907162551280"></p><p>然后一秒钟我访问了&gt;2次 ，然后就被拒绝访问了；</p><h3 id="自定义返回结果"><a href="#自定义返回结果" class="headerlink" title="自定义返回结果"></a>自定义返回结果</h3><p>实现<code>BlockExceptionHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBadBlockExceptionHandler</span> <span class="keyword">implements</span> <span class="title">BlockExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入自定义限流提示.............&quot;</span>);</span><br><span class="line"></span><br><span class="line">        RestObject restObject = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//不同得异常返回不同得提示</span></span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> FlowException)&#123;</span><br><span class="line">            restObject = RestObject.builder().statusCode(<span class="number">100</span>).statusMessage(<span class="string">&quot;接口限流了&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> DegradeException)&#123;</span><br><span class="line">            restObject = RestObject.builder().statusCode(<span class="number">101</span>).statusMessage(<span class="string">&quot;服务降级了&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> ParamFlowException)&#123;</span><br><span class="line">            restObject = RestObject.builder().statusCode(<span class="number">102</span>).statusMessage(<span class="string">&quot;热点参数限流了&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> SystemBlockException)&#123;</span><br><span class="line">            restObject = RestObject.builder().statusCode(<span class="number">103</span>).statusMessage(<span class="string">&quot;触发系统保护规则&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> AuthorityException)&#123;</span><br><span class="line">            restObject = RestObject.builder().statusCode(<span class="number">104</span>).statusMessage(<span class="string">&quot;授权规则不通过&quot;</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line">        response.setStatus(<span class="number">500</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        <span class="keyword">new</span> ObjectMapper().writeValue(response.getWriter(),restObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907162825817.png" alt="image-20210907162825817"></p><h3 id="自定义跳转页面"><a href="#自定义跳转页面" class="headerlink" title="自定义跳转页面"></a>自定义跳转页面</h3><p>引入<code>tomcat-embed-jasper</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 前端页面使用jsp--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入springboot内勤得tomcat对jsp的解析包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现<code>BlockExceptionHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBadBlockExceptionHandler</span> <span class="keyword">implements</span> <span class="title">BlockExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入自定义限流提示.............&quot;</span>);</span><br><span class="line"></span><br><span class="line">        RestObject restObject = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//不同得异常返回不同得提示</span></span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> FlowException)&#123;</span><br><span class="line">            restObject = RestObject.builder().statusCode(<span class="number">100</span>).statusMessage(<span class="string">&quot;接口限流了&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> DegradeException)&#123;</span><br><span class="line">            restObject = RestObject.builder().statusCode(<span class="number">101</span>).statusMessage(<span class="string">&quot;服务降级了&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> ParamFlowException)&#123;</span><br><span class="line">            restObject = RestObject.builder().statusCode(<span class="number">102</span>).statusMessage(<span class="string">&quot;热点参数限流了&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> SystemBlockException)&#123;</span><br><span class="line">            restObject = RestObject.builder().statusCode(<span class="number">103</span>).statusMessage(<span class="string">&quot;触发系统保护规则&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> AuthorityException)&#123;</span><br><span class="line">            restObject = RestObject.builder().statusCode(<span class="number">104</span>).statusMessage(<span class="string">&quot;授权规则不通过&quot;</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//跳转页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>resources</code>目录下创建<code>META-INF.resources</code>目录，创建index.jsp文件</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;信息提示&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">   Sorry，限流了.......</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后就可以跳转啦！</p><h3 id="线程组限流-直接"><a href="#线程组限流-直接" class="headerlink" title="线程组限流(直接)"></a>线程组限流(直接)</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907163350297.png" alt="image-20210907163350297"></p><p>如果超过10个线程数就会被限流，然后我们用<code>jmeter</code>进行测试</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907164850331.png" alt="image-20210907164850331"></p><h3 id="关联模式"><a href="#关联模式" class="headerlink" title="关联模式"></a>关联模式</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907165655042.png" alt="image-20210907165655042">x</p><p>这里选择流控模式选择的是<code>关联</code>，就需要关联另外一个资源，如果那个资源（/notFound-feign）被限流了，当前的资源（/test）也不被限流；</p><p>写个方法无限调用<code>/notFound-feign</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">16</span>);</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                 executorService.submit(() -&gt; &#123;</span><br><span class="line">                      restTemplate.getForObject(<span class="string">&quot;http://127.0.0.1:18083/notFound-feign&quot;</span>, String.class);</span><br><span class="line">                 &#125;);</span><br><span class="line">                 Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<code>因为关联资源(/notFound-feign)被限流了，所有我去访问(/test)资源也会被限流</code></p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907170506451.png" alt="image-20210907170506451"></p><h3 id="链路模式"><a href="#链路模式" class="headerlink" title="链路模式"></a>链路模式</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907171043992.png" alt="image-20210907171043992"></p><p>这个<code>入口资源</code>就是</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907171138619.png" alt="image-20210907171138619"></p><p><code>如果sentinel_spring_web_context的入口阈值达到了我们设定的阈值，那么资源名对应的资源就会被限流</code>；</p><h2 id="Sentinel熔断"><a href="#Sentinel熔断" class="headerlink" title="Sentinel熔断"></a>Sentinel熔断</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907173135202.png" alt="image-20210907173135202"></p><h3 id="降级策略"><a href="#降级策略" class="headerlink" title="降级策略"></a>降级策略</h3><blockquote><p>1、慢调用比例（<code>SLOW_REQUEST_RATIO</code>）</p></blockquote><p>​    选择以慢调用比例作为阈值，需要设置允许的慢调用RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用，当单位统计时长（<code>statIntervalMs</code>）内请求的数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内会自动被熔断，经过熔断时长后熔断器会进入探测恢复状态（<code>HALF-OPEN</code>），若接下来的一个请求响应时间小于设置的慢调用RT则结束熔断，若大于设置的慢调用RT则会被再次熔断；</p><blockquote><p>2、异常比例（<code>ERROR_RATIO</code>）</p></blockquote><p>​    当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断，经过熔断时长后熔断器会进入探测恢复模式（<code>HALF-OPEN</code>），若接下来的一个请求完成（没有错误）则结束熔断，否则会被再次熔断，异常比例的阈值范围是<code>[0.0,1.0]</code>，代表0%-100%；</p><blockquote><p>3、异常数（<code>ERROR_COUNT</code>）</p></blockquote><p>​    当单位统计时长内的异常数目超过阈值之后会被自动进行熔断，，经过熔断时长后熔断器会进入探测恢复模式（<code>HALF-OPEN</code>），若接下来的一个请求完成（没有错误）则结束熔断，否则会被再次熔断；</p><p>​    </p><h3 id="慢调用比例"><a href="#慢调用比例" class="headerlink" title="慢调用比例"></a>慢调用比例</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210908140154618.png" alt="image-20210908140154618"></p><p>如图慢调用RT=2ms，比例阈值为0.2（20%），熔断时间长30s，最小请求数20，统计时间10s；</p><p>在统计时间10s内，触发熔断的条件为，只要有请求RT&gt;2ms的次数超过4（最小请求数20*0.2）就触发这个熔断，熔断时长为30s，经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN状态），若接下来的一个请求响应时长小于设置的慢调用RT则结束熔断，若大于设置的慢调用RT则会再次被熔断；</p><h3 id="异常比"><a href="#异常比" class="headerlink" title="异常比"></a>异常比</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210908144359329.png" alt="image-20210908144359329"></p><p>如图：</p><p><code>比例阈值</code>：为0.2，也就是百分之20，熔断时间为10s，如果统计时长（1秒内），出现了&gt;5的请求，并且异常率达到20%，就会进入熔断；</p><h3 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a>异常数</h3><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210908144710443.png" alt="image-20210908144710443"></p><p>如图：</p><p><code>异常数量</code>：1，熔断时间为10s，如果统计时长（1秒内），出现了&gt;2的请求，并且异常&gt;=1，就会进入熔断；</p><h2 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h2><p>访问频率最高的Top K 数据，并对其访问进行限制，例如：</p><p>​    商品ID为参数，统计一段时间内最常购买的商品ID并进行限制；</p><p>​    用户ID为参数，针对一段时间内频繁访问的用户ID进行限制；</p><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源进行限流，热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效；</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote><p>controller</p></blockquote><p>方法上添加<code>@SentinelResource()</code>注解否则不生效</p><p>触发限制调用的方法<code>fallback = &quot;fallback&quot;</code>，方法对应的类<code>fallbackClass = MyFallbackClass.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/app&quot;)</span> <span class="comment">// 埋点：加入sentinel的监控</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;app&quot;, fallback = &quot;fallback&quot;, fallbackClass = MyFallbackClass.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">app</span><span class="params">(<span class="meta">@RequestParam(value = &quot;a&quot;, required = false)</span> String a)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MyFallbackClass</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFallbackClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法一定要是static方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fallback</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我被限制访问了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>热点规则配置</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210908165715233.png" alt="image-20210908165715233.png"></p><h2 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210908172509672.png" alt="image-20210908172509672"></p><h3 id="阈值类型"><a href="#阈值类型" class="headerlink" title="阈值类型"></a>阈值类型</h3><blockquote><p>1、<code>LOAD</code></p></blockquote><p>​    Load自适应（仅对Linux/Unix-like机器生效）：系统的load1作为启发指标，进行自适应系统保护，当系统load1超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护，系统容量又系统的maxQps <em> minRt 估算得出，设定参考一般是`CPU cores </em> 2.5`;</p><blockquote><p>2、平均PT</p></blockquote><p>​    当单台机器上所有入口流量的平均RT达到阈值即触发系统保护，单位是毫秒；</p><blockquote><p>3、并发线程数</p></blockquote><p>​    当单台机器上所有入口流量的并非线程数达到阈值即触发系统保护；</p><blockquote><p>4、入口QPS</p></blockquote><p>​    当单台机器上所有入口流量的QPS达到阈值即触发系统保护；</p><blockquote><p>5、CPU usage(1.5.0+ 版本)</p></blockquote><p>​    当系统CPU使用率超过阈值即触发系统保护（取值访问0.0-1.0），比较灵活；</p><h2 id="授权控制"><a href="#授权控制" class="headerlink" title="授权控制"></a>授权控制</h2><blockquote><p>配置请求解析器</p></blockquote><p>解析请求获取其中的参数：<code>origin</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRequestOriginParser</span> <span class="keyword">implements</span> <span class="title">RequestOriginParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parseOrigin</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String origin = request.getHeader(<span class="string">&quot;origin&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(origin))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;origin参数未指定！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>授权规则配置</p></blockquote><p>对<code>/test</code>进行授权，流控应用<code>123</code>，配置为白名单</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210908174919089.png" alt="image-20210908174919089"></p><blockquote><p>测试</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210908175125859.png" alt="image-20210908175125859"></p><p><code>因为流控</code>应用为123，所以这里授权规则不通过，如果我们把请求头参数改为123就可以了</p><h2 id="服务与Sentinel客户端通讯原理"><a href="#服务与Sentinel客户端通讯原理" class="headerlink" title="服务与Sentinel客户端通讯原理"></a>服务与Sentinel客户端通讯原理</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210908175432872.png" alt="image-20210908175432872"></p><p>Sentinel Dashboard通过微服务集成的<code>sentinel-transport-simple-http</code>暴露的端点（http:localhost:8719/api）进行通信，Sentinel Dashboard配置完成后它会发回到对应的微服务去；</p><blockquote><p>sentinel饥饿加载</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Sentinel三种保护应用"><a href="#Sentinel三种保护应用" class="headerlink" title="Sentinel三种保护应用"></a>Sentinel三种保护应用</h2><blockquote><p>1、直接拦截我们所有controller的请求url路径</p></blockquote><p>​    Sentinel为springboot程序提供了一个starter依赖，由<code>sentinel starter依赖默认情况下就会为所有的HTTP服务提供限流埋点</code>，所以在springboot中的Controller都可以受到Sentinel保护；只需要应用添加<code>spring-cloud-starter-alibaba-sentinel</code>依赖，所有的HTTP接口都能获得Sentinel保护，当然，我们需要为Sentinel配置保护规则，底层通过一个拦截器对请求得url进行拦截（<code>com.alibaba.csp.sentinel.adapter.spring.webmvc.SentinelWebInterceptor</code>）,当然我们也可以通过配置文件来关闭保护<code>spring.cloud.sentinel.filter.enabled=false</code></p><blockquote><p>2、通过手写代码来保护</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test/test&quot;)</span> <span class="comment">// 埋点：加入sentinel的监控</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//一个参数是资源名称，第二次参数是来源</span></span><br><span class="line">ContextUtil.enter(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">Entry entry = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//对test进行限流保护</span></span><br><span class="line">entry = SphU.entry(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="comment">//下面就是受保护得代码</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">//这里判断是什么异常，比如</span></span><br><span class="line"><span class="keyword">if</span>(e <span class="keyword">instanceof</span> FlowException)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;接口限流了&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> DegradeException)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;服务熔断了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//....................</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">Tracer.trace(e);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;返回错误&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(entry != <span class="keyword">null</span>)&#123;</span><br><span class="line">entry.exit();</span><br><span class="line">&#125;</span><br><span class="line">ContextUtil.exit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;失败了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、@SentinelResource来保护</p></blockquote><p>方法上添加<code>@SentinelResource()</code>注解否则不生效</p><p>触发限制调用的方法<code>fallback = &quot;fallback&quot;</code>，方法对应的类<code>fallbackClass = MyFallbackClass.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/app&quot;)</span> <span class="comment">// 埋点：加入sentinel的监控</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;app&quot;, fallback = &quot;fallback&quot;, fallbackClass = MyFallbackClass.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">app</span><span class="params">(<span class="meta">@RequestParam(value = &quot;a&quot;, required = false)</span> String a)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SentinelResource()对应的属性</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:left">作用</th><th style="text-align:center">是否必须</th></tr></thead><tbody><tr><td style="text-align:center">value</td><td style="text-align:left">资源名称</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">entryType</td><td style="text-align:left">entry类型，标记流量的方向，取值in/out,默认是out</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">blockHandler</td><td style="text-align:left">处理BlockException的函数名称，函数要求：<br/>1.必须是public<br/>2.返回类型与原方法一致<br/>3.参数类型需要和原方法相匹配，并在最后加BlockException类型参数<br/>4.默认要和原方法在同一个类中，若希望使用其他类的函数，可配置blockHandlerClass，并指定blockHandlerClass</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">blockHandlerClass</td><td style="text-align:left">存放blockhandler的类，对应的处理函数必须是static修饰，否则无法解析，其他要求同：blockHandler</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">fallback</td><td style="text-align:left">用于在抛出异常的时候提供fallback处理逻辑，fallback函数可以针对所有类型的异常（除了exceptionsToIgnore里面排除掉的异常类型）<br/>1.返回类型和原方法一致<br/>2.参数类型需要和原方法相匹配，Sentinel1.6开始，也可在方法最后加Throwable类型的参数<br/>3.默认要和原方法在同一个类中，若希望使用其他类型的函数，可配置fallbackClass，并指定fallbackClass里面的方法；</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">fallbackClass</td><td style="text-align:left">存放fallbakck的类，对应的处理函数必须是static修饰，否则无法解析，其他要求同：fallback</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">defaultFallback</td><td style="text-align:left">用于通用的fallback逻辑，默认fallback函数可以对所有类型的异常（除了exceptionsToIgnore里面排除掉的异常类型）进行处理，若同时配置了fallback和defalultFallback，以fallback为准，函数要求：<br/>1.返回类型和原方法一致<br/>2.方法参数列表为空，或者有一个Throwable类的参数<br/>3.默认要和原方法在同一个类中，若希望使用其他函数，可配置fallbakc，并指定fallbackClass里面的方法；</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">exceptionsToIgnore</td><td style="text-align:left">指定排除掉那些异常，排除的异常不会计入异常统计，也不会进入fallback逻辑，而是原样抛出；</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">exceptionsToTrace</td><td style="text-align:left">需要trace的异常</td><td style="text-align:center">Throwable</td></tr></tbody></table></div><h2 id="RestTemplate整合Sentinel"><a href="#RestTemplate整合Sentinel" class="headerlink" title="RestTemplate整合Sentinel"></a>RestTemplate整合Sentinel</h2><blockquote><p>1、开启sentinel对restTemplate的支持，默认关闭</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">resttemplate.sentinel.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><blockquote><p>2、配置RestTemplate</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRibbonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载均衡</span></span><br><span class="line">    <span class="meta">@SentinelRestTemplate(</span></span><br><span class="line"><span class="meta">            //blockHandler=&quot;blockA&quot;, blockHandlerClass=MyBlockHandlerClass.class 限流规则</span></span><br><span class="line"><span class="meta">            fallback = &quot;fallbackA&quot;,fallbackClass = MyBlockHandlerClass.class )</span><span class="comment">//降级规则</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、自定义返回</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockHandlerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断限流后处理的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> execution</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SentinelClientHttpResponse <span class="title">fallbackA</span><span class="params">(HttpRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                       <span class="keyword">byte</span>[] body, ClientHttpRequestExecution execution, BlockException ex)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;fallback: &quot;</span> + ex.getClass().getCanonicalName());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelClientHttpResponse(<span class="string">&quot;custom fallback info&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4、测试结果</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210909165412283.png" alt="image-20210909165412283"></p><h2 id="Feign整合Sentinel"><a href="#Feign整合Sentinel" class="headerlink" title="Feign整合Sentinel"></a>Feign整合Sentinel</h2><blockquote><p>1、开启sentinel对Feign的支持，默认关闭</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">feign.sentinel.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><blockquote><p>2、Feign配置</p></blockquote><p>这里可以使用<code>fallback</code>或者<code>fallbackFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;spring-cloud-alibaba-nacos-provider&quot;,</span></span><br><span class="line"><span class="meta">        fallback = EchoFeignServiceFallback.class,</span></span><br><span class="line"><span class="meta">//        fallbackFactory = EchoServiceFallbackFactory.class,</span></span><br><span class="line"><span class="meta">        configuration = EchoFeignConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EchoFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/echo/&#123;str&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">echo</span><span class="params">(<span class="meta">@PathVariable(&quot;str&quot;)</span>String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/divide&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">divide</span><span class="params">(<span class="meta">@RequestParam(&quot;a&quot;)</span>Integer a,<span class="meta">@RequestParam(&quot;b&quot;)</span>Integer b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * feign声明的接口可以有默认实现，就是可以不需要远程服务提供者实现，自己实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">divide</span><span class="params">(Integer a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;consumer divide method.... &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> divide(a,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/notFound&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">notFound</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、EchoFeignServiceFallback 配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoFeignServiceFallback</span> <span class="keyword">implements</span> <span class="title">EchoFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;echo 方法降级了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">divide</span><span class="params">(Integer a, Integer b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;divide 方法降级了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">notFound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;notFound 方法降级了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4、EchoServiceFallbackFactory配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">EchoFeignService</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EchoFeignService <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EchoFeignService() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;echo fall back&quot;</span>+throwable.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">divide</span><span class="params">(Integer a, Integer b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;divide fall back&quot;</span>+throwable.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">notFound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;notFound fall back&quot;</span>+throwable.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5、测试</p></blockquote><p>添加限流规则后进行测试</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210909173921060.png" alt="image-20210909173921060"></p><h2 id="Sentinel持久化"><a href="#Sentinel持久化" class="headerlink" title="Sentinel持久化"></a>Sentinel持久化</h2><blockquote><p> 规则管理及推送</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">推送方式</th><th>说明</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td style="text-align:center">原始模式</td><td>api将规则推送至客户端并直接更新到内<br/>存中，扩展写数据源(<code>WritableDataSource</code>)</td><td>简单，无需任何依赖</td><td>不保证一致性；规则保存在内存中，重启即消失，严重不建议用于生产环境</td></tr><tr><td style="text-align:center">pull模式</td><td>扩展写数据源(<code>WritableDateSource</code>)，<br/>客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是RDBMS、文件等</td><td>简单，无任何依赖，规则持久化</td><td>不保证一致性；实时性不好找，拉取过于频繁也可能会有性能问题</td></tr><tr><td style="text-align:center">push模式</td><td>扩展读取数据源(<code>ReadableSource</code>)，规则中心统一推送，<br/>客户端通过往注册监听器的方式时刻监听变化，比如使用Nacos、zookeeper等配置中心，这种方式有更好的实时性和一致性保证，<code>生产环境下一般采用push模式</code></td><td>规则持久化，一致性，快速</td><td>引入第三方依赖</td></tr></tbody></table></div><blockquote><p>原理图</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210910135955645.png" alt="image-20210910135955645"></p><p>FileRefreshableDataSource定时从指定文件中读取规则json文件（本地文件），如果发现文件发送变化，就更新规则缓存；</p><p>FileWritableDataSource接收控制台规则推送，并根据配置，修改规则json文件（本地文件）；</p><h3 id="pull模式"><a href="#pull模式" class="headerlink" title="pull模式"></a>pull模式</h3><p><code>持久化到本地</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sentinel-datasource-extension 数据源扩展--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.july.springcloud.learn.sentinel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.command.handler.ModifyParamFlowRulesCommandHandler;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.datasource.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.init.InitFunc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRule;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemRuleManager;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.transport.util.WritableDataSourceRegistry;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.TypeReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sentinel本地持久化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规则持久化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDataSourceInit</span> <span class="keyword">implements</span> <span class="title">InitFunc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//可以根据需要指定规则文件的位置</span></span><br><span class="line">        String ruleDir = System.getProperty(<span class="string">&quot;user.home&quot;</span>) + <span class="string">&quot;/sentinel/rules&quot;</span>;</span><br><span class="line">        <span class="comment">//流量规则</span></span><br><span class="line">        String flowRulePath = ruleDir + <span class="string">&quot;/flow-rule.json&quot;</span>;</span><br><span class="line">        <span class="comment">//降级规则</span></span><br><span class="line">        String degradeRulePath = ruleDir + <span class="string">&quot;/degrade-rule.json&quot;</span>;</span><br><span class="line">        <span class="comment">//参数规则</span></span><br><span class="line">        String paramFlowRulePath = ruleDir + <span class="string">&quot;/param-flow-rule.json&quot;</span>;</span><br><span class="line">        <span class="comment">//系统规则</span></span><br><span class="line">        String systemRulePath = ruleDir + <span class="string">&quot;/system-rule.json&quot;</span>;</span><br><span class="line">        <span class="comment">//授权规则</span></span><br><span class="line">        String authorityRulePath = ruleDir + <span class="string">&quot;/authority-rule.json&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mkdirIfNotExits(ruleDir);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.createFileIfNotExits(flowRulePath);</span><br><span class="line">        <span class="keyword">this</span>.createFileIfNotExits(degradeRulePath);</span><br><span class="line">        <span class="keyword">this</span>.createFileIfNotExits(paramFlowRulePath);</span><br><span class="line">        <span class="keyword">this</span>.createFileIfNotExits(systemRulePath);</span><br><span class="line">        <span class="keyword">this</span>.createFileIfNotExits(authorityRulePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 流控规则：可读数据源</span></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleRDS = <span class="keyword">new</span> FileRefreshableDataSource&lt;&gt;(</span><br><span class="line">                flowRulePath,</span><br><span class="line">                flowRuleListParser</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 将可读数据源注册至FlowRuleManager</span></span><br><span class="line">        <span class="comment">// 这样当规则文件发生变化时，就会更新规则到内存</span></span><br><span class="line">        FlowRuleManager.register2Property(flowRuleRDS.getProperty());</span><br><span class="line">        <span class="comment">// 流控规则：可写数据源</span></span><br><span class="line">        WritableDataSource&lt;List&lt;FlowRule&gt;&gt; flowRuleWDS = <span class="keyword">new</span> FileWritableDataSource&lt;&gt;(</span><br><span class="line">                flowRulePath,</span><br><span class="line">                <span class="keyword">this</span>::encodeJson</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 将可写数据源注册至transport模块的WritableDataSourceRegistry中</span></span><br><span class="line">        <span class="comment">// 这样收到控制台推送的规则时，Sentinel会先更新到内存，然后将规则写入到文件中</span></span><br><span class="line">        WritableDataSourceRegistry.registerFlowDataSource(flowRuleWDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 降级规则：可读数据源</span></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;DegradeRule&gt;&gt; degradeRuleRDS = <span class="keyword">new</span> FileRefreshableDataSource&lt;&gt;(</span><br><span class="line">                degradeRulePath,</span><br><span class="line">                degradeRuleListParser</span><br><span class="line">        );</span><br><span class="line">        DegradeRuleManager.register2Property(degradeRuleRDS.getProperty());</span><br><span class="line">        <span class="comment">// 降级规则：可写数据源</span></span><br><span class="line">        WritableDataSource&lt;List&lt;DegradeRule&gt;&gt; degradeRuleWDS = <span class="keyword">new</span> FileWritableDataSource&lt;&gt;(</span><br><span class="line">                degradeRulePath,</span><br><span class="line">                <span class="keyword">this</span>::encodeJson</span><br><span class="line">        );</span><br><span class="line">        WritableDataSourceRegistry.registerDegradeDataSource(degradeRuleWDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 热点参数规则：可读数据源</span></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;ParamFlowRule&gt;&gt; paramFlowRuleRDS = <span class="keyword">new</span> FileRefreshableDataSource&lt;&gt;(</span><br><span class="line">                paramFlowRulePath,</span><br><span class="line">                paramFlowRuleListParser</span><br><span class="line">        );</span><br><span class="line">        ParamFlowRuleManager.register2Property(paramFlowRuleRDS.getProperty());</span><br><span class="line">        <span class="comment">// 热点参数规则：可写数据源</span></span><br><span class="line">        WritableDataSource&lt;List&lt;ParamFlowRule&gt;&gt; paramFlowRuleWDS = <span class="keyword">new</span> FileWritableDataSource&lt;&gt;(</span><br><span class="line">                paramFlowRulePath,</span><br><span class="line">                <span class="keyword">this</span>::encodeJson</span><br><span class="line">        );</span><br><span class="line">        ModifyParamFlowRulesCommandHandler.setWritableDataSource(paramFlowRuleWDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 系统规则：可读数据源</span></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;SystemRule&gt;&gt; systemRuleRDS = <span class="keyword">new</span> FileRefreshableDataSource&lt;&gt;(</span><br><span class="line">                systemRulePath,</span><br><span class="line">                systemRuleListParser</span><br><span class="line">        );</span><br><span class="line">        SystemRuleManager.register2Property(systemRuleRDS.getProperty());</span><br><span class="line">        <span class="comment">// 系统规则：可写数据源</span></span><br><span class="line">        WritableDataSource&lt;List&lt;SystemRule&gt;&gt; systemRuleWDS = <span class="keyword">new</span> FileWritableDataSource&lt;&gt;(</span><br><span class="line">                systemRulePath,</span><br><span class="line">                <span class="keyword">this</span>::encodeJson</span><br><span class="line">        );</span><br><span class="line">        WritableDataSourceRegistry.registerSystemDataSource(systemRuleWDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 授权规则：可读数据源</span></span><br><span class="line">        ReadableDataSource&lt;String, List&lt;AuthorityRule&gt;&gt; authorityRuleRDS = <span class="keyword">new</span> FileRefreshableDataSource&lt;&gt;(</span><br><span class="line">                authorityRulePath,</span><br><span class="line">                authorityRuleListParser</span><br><span class="line">        );</span><br><span class="line">        AuthorityRuleManager.register2Property(authorityRuleRDS.getProperty());</span><br><span class="line">        <span class="comment">// 授权规则：可写数据源</span></span><br><span class="line">        WritableDataSource&lt;List&lt;AuthorityRule&gt;&gt; authorityRuleWDS = <span class="keyword">new</span> FileWritableDataSource&lt;&gt;(</span><br><span class="line">                authorityRulePath,</span><br><span class="line">                <span class="keyword">this</span>::encodeJson</span><br><span class="line">        );</span><br><span class="line">        WritableDataSourceRegistry.registerAuthorityDataSource(authorityRuleWDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;FlowRule&gt;&gt; flowRuleListParser = source -&gt; JSON.parseObject(</span><br><span class="line">            source,</span><br><span class="line">            <span class="keyword">new</span> TypeReference&lt;List&lt;FlowRule&gt;&gt;() &#123;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;DegradeRule&gt;&gt; degradeRuleListParser = source -&gt; JSON.parseObject(</span><br><span class="line">            source,</span><br><span class="line">            <span class="keyword">new</span> TypeReference&lt;List&lt;DegradeRule&gt;&gt;() &#123;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;SystemRule&gt;&gt; systemRuleListParser = source -&gt; JSON.parseObject(</span><br><span class="line">            source,</span><br><span class="line">            <span class="keyword">new</span> TypeReference&lt;List&lt;SystemRule&gt;&gt;() &#123;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;AuthorityRule&gt;&gt; authorityRuleListParser = source -&gt; JSON.parseObject(</span><br><span class="line">            source,</span><br><span class="line">            <span class="keyword">new</span> TypeReference&lt;List&lt;AuthorityRule&gt;&gt;() &#123;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Converter&lt;String, List&lt;ParamFlowRule&gt;&gt; paramFlowRuleListParser = source -&gt; JSON.parseObject(</span><br><span class="line">            source,</span><br><span class="line">            <span class="keyword">new</span> TypeReference&lt;List&lt;ParamFlowRule&gt;&gt;() &#123;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mkdirIfNotExits</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createFileIfNotExits</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">String <span class="title">encodeJson</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在resources下创建</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210910174848747.png" alt="image-20210910174848747"></p><blockquote><p>测试</p></blockquote><p>在sentinel配置限流规则后，会在你规定的目录生成文件（本地）；</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210910175003106.png" alt="image-20210910175003106"></p><h3 id="push模式"><a href="#push模式" class="headerlink" title="push模式"></a>push模式</h3><blockquote><p>1、添加sentinel-datasource-nacos依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、 配置持久化数据源</p></blockquote> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="comment"># 基于nacos配置中心进行规则持久化</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">flow:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">          <span class="comment"># nacos 地址</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span><span class="string">:8848</span></span><br><span class="line">            <span class="comment"># 配置文件名称（id）</span></span><br><span class="line">            <span class="attr">data-id:</span> <span class="string">$&#123;spring.application.name&#125;.json</span></span><br><span class="line">            <span class="comment"># 分组</span></span><br><span class="line">            <span class="attr">group-id:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="comment"># 数据类型</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="comment"># 规则</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br></pre></td></tr></table></figure><blockquote><p>3、在nacos添加配置</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210915163240921.png" alt="image-20210915163240921"></p><blockquote><p>4、发布</p></blockquote><p>发布之后sentinel对应的流控规则就会显示</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210915163322952.png" alt="image-20210915163322952"></p><p><code>目前在nacos里面改了配置文件是可以同步到缓存的，而在sentinel里改了是不能够同步到nacos的配置文件的;</code></p>]]></content>
    
    
    <summary type="html">微服务</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="微服务" scheme="https://www.isfate.xyz/categories/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://www.isfate.xyz/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Netflix学习-二</title>
    <link href="https://www.isfate.xyz/article/84b12bae.html"/>
    <id>https://www.isfate.xyz/article/84b12bae.html</id>
    <published>2021-06-10T05:46:12.000Z</published>
    <updated>2022-02-07T11:57:15.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h2><blockquote><p> 什么是配置中心？</p></blockquote><p>1.传统配置方式：配置信息分散到系统各个角落，配置文件和代码中。</p><p>2.集中式配置中心：将应用系统中对配置信息的管理作为一个新的应用模块，进行集中管理，并且提供额外功能。</p><p>3.分布式配置中心：在分布式、微服务架构中，独立的配置中心服务。</p><blockquote><p>为什么需要分布式配置中心？</p></blockquote><p>在分布式微服务体系中，服务的数量以及配置信息日益增多，比如个在服务器参数配置、各种数据库访问参数配置、各种环境下配置信息的不同、配置信息修改之后实时生效等，传统的配置文件方式或者将配置信息存放于数据库中的方式就无法满足开发人员对配置管理的要求 例如：</p><p>安全性：配置跟随源代码在代码库中，容易造成配置泄露；</p><p>时效性：修改配置，需要重启服务才能生效；</p><p>局限性：无法支持多态调整，比如日志开关、功能开关；</p><blockquote><p>常用的分布式配置中心框架</p></blockquote><p><code>Apollo</code>：携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景；</p><p><code>diamond</code>:淘宝开源的持久配置中心，支持各种持久信息（比如各种规则，数据库配置等）的发布和订阅；（更新稍微落后）</p><p><code>XDiamond</code>:全局配置中心，存储应用的配置项目，解决配置混乱分散的问题；</p><p><code>Qconf</code>：奇虎360内部分布式配置管理工具，用来代替传统的配置文件，使得配置信息和程序代码分离，同时配置变化能够实时同步到客户端，而且保证用户高效读取配置；</p><p><code>Disconf</code>：百度的分布式配置管理平台；</p><p><code>Spring Cloud Config</code>：Spring Cloud微服务开发的配置中心，提供服务端和客户端支持；</p><p><code>Spring Cloud alibaba nacos</code>：Spring Cloud Alibaba下的分布式配置中心;</p><blockquote><p>什么是Spring Cloud Config?</p></blockquote><p>Spring Cloud Config是一个解决分布式系统的配置管理方案，它包含Client和Server两部分，Server提供配置文件的存储、以接口的形式将配置文件的内容提供出去，Client通过接口获取数据、并依据此数据初始化自己的应用。Spring Cloud使用git或者svn、也可以是本地存放配置文件，默认情况下使用git；</p><blockquote><p>Spring Cloud Config工作原理</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210615135737.png" alt="image-20210615135728500"></p><p>1、首先需要一个远程Git仓库，平时测试可以使用GitHub，在实际生成环境中，需要自己搭建一个Git服务器，远程Git仓库的主要作用是用来保存我们的配置文件；</p><p>2、除了远程Git仓库之外，我们还需要一个本地Git仓库，每当<code>Config Server</code>访问远程Git仓库时，都会克隆一份到本地，这样当远程仓库无法连接时，就直接使用本地存储的配置信息；</p><p>3、微服务A、微服务B则是我们的具体应用，这些应用在启动的时候会从<code>Config Server</code>中获取相应的配置信息；</p><p>4、当微服务A、微服务B尝试从Config Server中加载配置信息的时候，<code>Config Server</code>会先通过<code>git clone</code>命令克隆一份配置文件到本地保存；</p><p>5、由于配置文件是存储在Git仓库中，所以配置文件天然具有版本管理功能；</p><h3 id="构建服务端"><a href="#构建服务端" class="headerlink" title="构建服务端"></a>构建服务端</h3><p>1、创建一个远程仓库<a href="https://github.com/">GitHub</a>或者<a href="https://gitee.com/">码云</a>,我们吧配置文件上传上去</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210616160730.png" alt=""></p><p>2、搭建SpringCloud Config服务</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>@EnableConfigServer</code>开始config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;Spring Cloud Config服务 已启动，端口：8888&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-service-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment"># 仓库地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/my-zhb/SpringCloud-RemotelyConfig.git</span></span><br><span class="line">          <span class="comment"># 仓库目录</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">config-server</span></span><br><span class="line">          <span class="comment"># 仓库账号</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">myiszhb@gmail.com</span></span><br><span class="line">          <span class="comment"># 仓库密码</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="Config映射规则"><a href="#Config映射规则" class="headerlink" title="Config映射规则"></a>Config映射规则</h3><p>{applcation} 表示配置文件的名字，对应的配置文件即applicaton；</p><p>{profile} 表示环境，有dev、test、online及默认；</p><p>{label} 表示分支，默认放在master分支；</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">第一种：</span><br><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]/</span><br><span class="line">http://localhost:8888/application/dev/master</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">http://localhost:8888/application-dev.yml</span><br><span class="line"></span><br><span class="line">第三种：</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">http://localhost:8888/master/application-dev.yml</span><br></pre></td></tr></table></figure><h3 id="构建客户端"><a href="#构建客户端" class="headerlink" title="构建客户端"></a>构建客户端</h3><p>引入包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入spring cloud config 客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>resources</code>目录下创建<code>bootstrap.(properties或者yml)</code>,文件名称必须是<code>bootstrap</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment">#分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment">#地址</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhonst:8888/</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yml</code>文件，SpringCloud有一个“引导上下文”的概念，这是主应用程序的父上下文。引导上下文负责从配置服务器加载配置属性，以及解密外部配置文件中的属性和主应用程序加载application中的属性不同，引导上下文加载（bootstrap）中的属性，配置bootstrap.*中的属性有更高的优先级，因此默认情况下它们不能本本地配置覆盖；</p><h3 id="Config信息加密"><a href="#Config信息加密" class="headerlink" title="Config信息加密"></a>Config信息加密</h3><h3 id="Config动态刷新"><a href="#Config动态刷新" class="headerlink" title="Config动态刷新"></a>Config动态刷新</h3><h4 id="局部刷新"><a href="#局部刷新" class="headerlink" title="局部刷新"></a>局部刷新</h4><p>Spring boot的actuator提供了一个刷新端点/refresh</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot 提供的监控 actuator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在远程文件配置暴露端点</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>在resources创建bootstrap.yml配置config</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8888/</span></span><br></pre></td></tr></table></figure><p>在有引用配置的类上加上注解<code>@RefreshScope</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;info.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/config&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">config</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，如果修改了远程文件需要执行<code>ip:端口/actuator/refresh</code>，新的配置才会生效，这方法不建议使用，因为很麻烦；</p><h4 id="全局刷新"><a href="#全局刷新" class="headerlink" title="全局刷新"></a>全局刷新</h4><p>Spring Cloud Bus就可以实现配置的自动刷新，Spring Cloud Bus使用轻量级的消息代理/总线（例如RaboitMQ,Kafka等）广播状态的更改（例如配置的更新）或者其他的管理指令，可以将Spring Cloud Bus想象成一个分布式的Spring Boot Actuator;</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210621144539.png" alt="image-20210621144531140"></p><blockquote><p>配置springcloud bus</p></blockquote><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 引入springcloud bus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入spring-boot-starter-actuator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bootstrap.yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-service-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment"># 仓库地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/my-zhb/SpringCloud-RemotelyConfig.git</span></span><br><span class="line">          <span class="comment"># 扫描仓库目录</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">config-server/goods,config-server/portal</span></span><br><span class="line">          <span class="comment"># 仓库账号</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">myiszhb@gmail.com</span></span><br><span class="line">          <span class="comment"># 仓库密码</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># 开启spring cloud bus，默认开启</span></span><br><span class="line">    <span class="attr">bus:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 配置rabbitmq</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">myiszhb</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment"># 打开所有的web访问端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>配置客户端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入spring cloud config 客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入springcloud bus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springboot 提供的监控 actuator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bootstrap.yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">devportal</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8888/</span></span><br></pre></td></tr></table></figure><p>git远程服务配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-service-protal</span></span><br><span class="line">  <span class="comment"># 配置rabbitmq</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">myiszhb</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试局部动态刷新</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">myiszhb333</span></span><br></pre></td></tr></table></figure><p>我们修改了配置文件通过调用<code>http://127.0.0.1:8888/actuator/bus-refresh</code>链接进行刷新,端口是你config服务器的端口。</p><h3 id="Config高可用"><a href="#Config高可用" class="headerlink" title="Config高可用"></a>Config高可用</h3><p>有了配置中心之后，其他的微服务都是从配置中心上读取配置信息，此时配中心就至关重要了，在真实的项目环境中，Spring Cloud Config配置中心难免会出现各种问题，此时就需要考虑Spring Cloud Config的高可用机制；</p><p>Spring Cloud Config的高可用机制解决方式，把Spring Cloud Config注册到Eureka就可以了，此时用户访问的时候不是直接从配置中心获取配置信息，而是先通过eureka中获取配置中心的地址，然后在从配置中心获取具体服务的配置信息；</p><blockquote><p>简单使用</p></blockquote><p>config 服务端搭建</p><p>配置N份application-config8887.yml，application-config8888.yml，application-config8889.yml 端口以及<code>instance-id</code>对应更改。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8887</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-service-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment"># 仓库地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/myiszhb/spring-cloud-remotely-config.git</span></span><br><span class="line">          <span class="comment"># 仓库目录</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">config-server/goods,config-server/portal</span></span><br><span class="line">          <span class="comment"># 仓库账号</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">myiszhb@gmail.com</span></span><br><span class="line">          <span class="comment"># 仓库密码</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># 开启spring cloud bus，默认开启</span></span><br><span class="line">    <span class="attr">bus:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 配置rabbitmq</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">myiszhb</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment"># 打开所有的web访问端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#每间隔2s，向服务端发送一次心跳，证明自己存活</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment">#告诉服务端，如果我10s没有像你发送心跳，就代表我故障了，将我踢掉</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment">#告诉服务端，服务实例以ip作为链接，而不是机器名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#告诉服务端，服务实例的名称 唯一</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-service-config-8887</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#指定服务注册中心的位置</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8761/eureka,http://127.0.0.1:8762/eureka,http://127.0.0.1:8763/eureka</span></span><br></pre></td></tr></table></figure><p>config 客户端配置</p><p>这里是bootstrap的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">devportal</span></span><br><span class="line">      <span class="comment"># 分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment">#      uri: http://127.0.0.1:8888/</span></span><br><span class="line">      <span class="comment"># 通过注册中心去拿</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 服务的名称</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">springcloud-service-config</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#告诉服务端，服务实例的名称</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-service-protal-01</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#指定服务注册中心的位置</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8761/eureka,http://127.0.0.1:8762/eureka,http://127.0.0.1:8763/eureka</span></span><br></pre></td></tr></table></figure><p>搭建完毕</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210621155248.png" alt="image-20210621155246732"></p><p><code>还可以使用nginx进行高可用配置</code></p><h3 id="Config安全认证"><a href="#Config安全认证" class="headerlink" title="Config安全认证"></a>Config安全认证</h3><p>在config服务端添加依赖</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!--引入security安全认证依赖--&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p>config服务端配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置安全认证</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">myiszhb</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>然后配置客户文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 配置访问config的账号密码</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">myiszhb</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高版本的丢弃了</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * security:</span></span><br><span class="line"><span class="comment">     *   basic:</span></span><br><span class="line"><span class="comment">     *    enabled: true</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 配置，应该使用以下方式开启</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Configure HttpSecurity as needed (e.g. enable. http basic).</span></span><br><span class="line">        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.NEVER);</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">//注意：为了可以使用 http://$&#123;user&#125;:$&#123;password&#125;@$&#123;host&#125;:$&#123;port&#125;/eureka/ 这种方式登录,所以必须是httpBasic,</span></span><br><span class="line">        <span class="comment">// 如果是form方式,不能使用url格式登录</span></span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样客户端去配置中心取文件就需要验证,刷新配置为<code>http://username:password@ip:port/actuator/bus-refresh</code></p><h2 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h2><blockquote><p>分布式链路跟踪</p></blockquote><p>对于一个大型的几十个、几百个微服务构成的微服务架构系统，通常会遇到下面一些问题？<br><code>1、如何串联整个调用链路，快速定位问题？</code><br><code>2、如何理清各个微服务之间的依赖关系？</code><br><code>3、如何进行各个微服务接口的性能分析？</code><br><code>4、如何跟踪整个业务流程的调用处理顺序？</code></p><p>Spring Cloud Sleuth为Sping Cloud提供了分布式跟踪的解决方案，它大量借用了Google Dapper、Twitter Zipkin和Apache HTrace的设计，帮我们解决像上面提到的问题；</p><p>Spring Cloud Sleuth可以追踪10种类型的组件：<code>async</code>、<code>Hystrix</code>、<code>messaging</code>、<code>websocket</code>、<code>rxjava</code>、<code>scheduling</code>、<code>web（Spring MVC Colltroller,Servlet）</code>、<code>webclient（Spring RestTemplate）</code>、<code>Feign</code>、<code>Zuul</code>;</p><blockquote><p>什么是Spring Cloud Sleuth</p></blockquote><p>Spring Cloud Sleuth对于分布式链路的跟踪仅仅是生成一些数据，这些数据不便于我们阅读，所以我们一般把这种跟踪数据上传给Zipkin Server,由Zipkin通过页面同意进行数据展示；</p><blockquote><p>什么是Zipkin</p></blockquote><p>Zipkin是Twitter开源的分布式实时数据跟踪系统，基于Google Dapper的论文设计而成，Google开源了Dapper链路追踪组件，Zipkin它的主要功能就是收集系统的时序数据，从而追踪微服务架构的系统延时等问题，从而达到链路调用监控跟踪，另外Zipkin还提供了一个非常友好的界面，来帮助分析追踪数据，<a href="https://zipkin.io/">Zipkin官网地址</a></p><h3 id="Zipkin服务端"><a href="#Zipkin服务端" class="headerlink" title="Zipkin服务端"></a>Zipkin服务端</h3><p><code>SpringBoot2.2.x以前的版本</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.3rsion&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类使用<code>@EnableZipkinServer</code>开启服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableZipkinServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipkinApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     springboot 2.2.x 之后不能在使用 <span class="doctag">@EnableZipkinServer</span> 进行启动了</span></span><br><span class="line"><span class="comment">     这时候我们需要直接去下载zipkin-server-2.12.9-exec.jar  直接运行</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZipkinApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;ZipKin服务 已启动，端口：9410&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SpringBoot2.2.x以后的版本</code></p><p>服务端应该通过下载 jar 包，然后 运行 jar 包来集成 。 <a href="https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec">点击这里</a> 下载最新版，之后切换到 jar 包在的路径，然后用 java -jar 的方式启动就可以了（默认端口号是 9411 ，所以如果提供了 zipkin client，需要把它的配置文件中的端口号改成 9411，对应的配置应该是 zipkin: base-url: <a href="http://localhost:9411）">http://localhost:9411）</a></p><h3 id="Sleuth整合Zipkin"><a href="#Sleuth整合Zipkin" class="headerlink" title="Sleuth整合Zipkin"></a>Sleuth整合Zipkin</h3><p>在需要追踪的微服务里添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 整合 sleuth 客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 整合 zipkin 客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置yml，我这里是配置到config配置中心的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># zipkin 配置</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="comment"># 指定zipkin server的地址</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://127.0.0.1:9411</span></span><br><span class="line">    <span class="comment"># 发送跟踪数据到zipkin的类型web（http）</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">web</span></span><br><span class="line">  <span class="comment"># request 采样的数据 默认是0.1也就是10%，即采样10%的请求数据</span></span><br><span class="line">  <span class="comment"># 因为在分布式系统中，数据量会非常大，因此采样非常重要，这里如果设置成1，100%可能会影响性能，我这里是为了测试</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>启动完成</p><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><h4 id="使用MySQL持久化"><a href="#使用MySQL持久化" class="headerlink" title="使用MySQL持久化"></a>使用MySQL持久化</h4><p>1.创建mysql数据库zipkin，执行如下sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zipkin_spans (</span><br><span class="line">  `trace_id_high` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;</span>,</span><br><span class="line">  `trace_id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `parent_id` <span class="type">BIGINT</span>,</span><br><span class="line">  `debug` BIT(<span class="number">1</span>),</span><br><span class="line">  `start_ts` <span class="type">BIGINT</span> COMMENT <span class="string">&#x27;Span.timestamp(): epoch micros used for endTs query and to implement TTL&#x27;</span>,</span><br><span class="line">  `duration` <span class="type">BIGINT</span> COMMENT <span class="string">&#x27;Span.duration(): micros used for minDuration and maxDuration query&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB ROW_FORMAT<span class="operator">=</span>COMPRESSED <span class="type">CHARACTER</span> <span class="keyword">SET</span><span class="operator">=</span>utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY(`trace_id_high`, `trace_id`, `id`) COMMENT <span class="string">&#x27;ignore insert on duplicate&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`, `id`) COMMENT <span class="string">&#x27;for joining with zipkin_annotations&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`) COMMENT <span class="string">&#x27;for getTracesByIds&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> INDEX(`name`) COMMENT <span class="string">&#x27;for getTraces and getSpanNames&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> INDEX(`start_ts`) COMMENT <span class="string">&#x27;for getTraces ordering and range&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zipkin_annotations (</span><br><span class="line">  `trace_id_high` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;</span>,</span><br><span class="line">  `trace_id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;coincides with zipkin_spans.trace_id&#x27;</span>,</span><br><span class="line">  `span_id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;coincides with zipkin_spans.id&#x27;</span>,</span><br><span class="line">  `a_key` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;BinaryAnnotation.key or Annotation.value if type == -1&#x27;</span>,</span><br><span class="line">  `a_value` <span class="type">BLOB</span> COMMENT <span class="string">&#x27;BinaryAnnotation.value(), which must be smaller than 64KB&#x27;</span>,</span><br><span class="line">  `a_type` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;BinaryAnnotation.type() or -1 if Annotation&#x27;</span>,</span><br><span class="line">  `a_timestamp` <span class="type">BIGINT</span> COMMENT <span class="string">&#x27;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&#x27;</span>,</span><br><span class="line">  `endpoint_ipv4` <span class="type">INT</span> COMMENT <span class="string">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span>,</span><br><span class="line">  `endpoint_ipv6` <span class="type">BINARY</span>(<span class="number">16</span>) COMMENT <span class="string">&#x27;Null when Binary/Annotation.endpoint is null, or no IPv6 address&#x27;</span>,</span><br><span class="line">  `endpoint_port` <span class="type">SMALLINT</span> COMMENT <span class="string">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span>,</span><br><span class="line">  `endpoint_service_name` <span class="type">VARCHAR</span>(<span class="number">255</span>) COMMENT <span class="string">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB ROW_FORMAT<span class="operator">=</span>COMPRESSED <span class="type">CHARACTER</span> <span class="keyword">SET</span><span class="operator">=</span>utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT <span class="string">&#x27;Ignore insert on duplicate&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT <span class="string">&#x27;for joining with zipkin_spans&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`) COMMENT <span class="string">&#x27;for getTraces/ByIds&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`endpoint_service_name`) COMMENT <span class="string">&#x27;for getTraces and getServiceNames&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`a_type`) COMMENT <span class="string">&#x27;for getTraces&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`a_key`) COMMENT <span class="string">&#x27;for getTraces&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zipkin_dependencies (</span><br><span class="line">  `<span class="keyword">day</span>` <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `parent` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `child` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `call_count` <span class="type">BIGINT</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB ROW_FORMAT<span class="operator">=</span>COMPRESSED <span class="type">CHARACTER</span> <span class="keyword">SET</span><span class="operator">=</span>utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_dependencies <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY(`<span class="keyword">day</span>`, `parent`, `child`);</span><br></pre></td></tr></table></figure><p>启动<code>zipkin-server-2.12.9-exec.jar</code>带上参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.12.9-exec.jar --STORAGE_TYPE=mysql --MYSQL_HOST=127.0.0.1 --MYSQL_TCP_PORT=3306 --MYSQL_DB=zipkin --MYSQL_USER=root --MYSQL_PASS=123456</span><br></pre></td></tr></table></figure><h4 id="ElasticSearch持久化"><a href="#ElasticSearch持久化" class="headerlink" title="ElasticSearch持久化"></a>ElasticSearch持久化</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.12.9-exec.jar --STORAGE_TYPE=elasticsearch --ES-HOST=127.0.0.1:9200</span><br></pre></td></tr></table></figure><p><span style='color:red;font-size:20px;'>注意zipkin-server-2.12.9-exec.jar好像只能使用7.0以下的ElasticSearch，如果是7.0以上会报错</span></p><h2 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h2><p>在微服务的开发过程中，可能会经常用到消息中间件，通过小心中间件在服务与服务之间传递消息，不管你使用的是哪款消息中间件，比如RabbitMQ、kafka，那么消息中间件和服务之间都有一点耦合性，这个耦合性就是指如果我们原来的MQ要发生替换，那么我们的微服务都需要修，变动会比较大，应为这两款消息中间件有一些区别，如果我们使用Spring Cloud Stream来整合我们的消息中间件，那么这样就可以降低微服务和消息中间件的耦合性，做到轻松在不同消息中间件间切换，目前Spring Cloud Stream只支持rabbitmq和kafka；</p><blockquote><p>Spring Cloud Stream 重要概念</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210624174408.png" alt="img"></p><p>应用程序通过<code>input</code>(相当于消费者consumer)、<code>output</code>(相当于生产者producer)来与Spring Cloud Stream中<code>Binder</code>交互，而<code>Binder</code>负责与消息中间件交互，因此我们只需要关注如何与<code>Binder</code>交互即可。</p><div class="table-container"><table><thead><tr><th>组成部分</th><th>说明</th></tr></thead><tbody><tr><td>Binder</td><td>Binder是应用与消息中间件之间的封装，目前实现了kafka和RabbitMQ的Binder,通过Binder可以很方便的连接中间件，可以动态的改变消息类型(对对应于Kafka和topic，RabbitMQ的exchange)这些都可以通过配置文件来实现；</td></tr><tr><td>@Input</td><td>该注解标识通道，通过该输入通道接收消息进入应用程序</td></tr><tr><td>@Output</td><td>该注解标识输出通道，发布的消息将通过该通道离开应用程序</td></tr><tr><td>@StreamListener</td><td>监听队列，用于消费者的队列的消息接收</td></tr><tr><td>@EnableBinding</td><td>将通道channel和exchange绑定在一起</td></tr></tbody></table></div><h3 id="Stream生产者"><a href="#Stream生产者" class="headerlink" title="Stream生产者"></a>Stream生产者</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">1111</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment">#这里点击去其实是个Map&lt;String, BinderProperties&gt;</span></span><br><span class="line">        <span class="attr">rabbitmq:</span> <span class="comment">#这里的rabbitmq就是map的键</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment">#这个是BinderProperties里面的type属性</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment">#这个是BinderProperties里面的environment属性他也是一个map</span></span><br><span class="line">            <span class="attr">spring:</span> <span class="comment">#environment对象的键</span></span><br><span class="line">              <span class="attr">rabbitmq:</span> <span class="comment">#environment对象的值</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span> </span><br><span class="line">                <span class="attr">prot:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">myiszhb</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">2020Fate!</span></span><br><span class="line">                <span class="comment">#虚拟主机 默认/可以不写</span></span><br><span class="line">                <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">      </span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 绑定 需要传入一个Map&lt;String, BindingProperties&gt;</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment">#其中output是一个key，这个名字是一个通道的名称，在代码中会用到</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">spring.cloud.stream.exchange</span> <span class="comment">#destination表示要使用的Exchange名称定</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">rabbitmq</span> <span class="comment">#这里的名字就是binders定义的那个键</span></span><br></pre></td></tr></table></figure><p>消息发送测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableBinding(Source.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> send = output.send(MessageBuilder.withPayload(msg).build());</span><br><span class="line">        log.info(<span class="string">&quot;发送消息：&lt;&#123;&#125;&gt; 完成，时间：&#123;&#125; 是否成功:&#123;&#125;&quot;</span>,msg,System.currentTimeMillis(),send);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">bindings 定义的键要和output一样，后面也可以自定义</span></span><br><span class="line"><span class="comment">这是使用默认的</span></span><br><span class="line"><span class="comment">public interface Source &#123; </span></span><br><span class="line"><span class="comment">    String OUTPUT = &quot;output&quot;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    <span class="doctag">@Output</span>(&quot;output&quot;)</span></span><br><span class="line"><span class="comment">    MessageChannel output();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">** /</span></span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamProducerApplicatin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(StreamProducerApplicatin.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;Stream-Producer生成者 已启动&quot;</span>);</span><br><span class="line">        MessageSender messageSend = run.getBean(MessageSender.class);</span><br><span class="line">        messageSend.publish(<span class="string">&quot;测试一下&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream消费者"><a href="#Stream消费者" class="headerlink" title="Stream消费者"></a>Stream消费者</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">1111</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment">#这里点击去其实是个Map&lt;String, BinderProperties&gt;</span></span><br><span class="line">        <span class="attr">rabbitmq:</span> <span class="comment">#这里的rabbitmq就是map的键</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment">#这个是BinderProperties里面的type属性</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment">#这个是BinderProperties里面的environment属性他也是一个map</span></span><br><span class="line">            <span class="attr">spring:</span> <span class="comment">#environment对象的键</span></span><br><span class="line">              <span class="attr">rabbitmq:</span> <span class="comment">#environment对象的值</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">111.231</span><span class="number">.207</span><span class="number">.228</span> </span><br><span class="line">                <span class="attr">prot:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">myiszhb</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">2020Fate!</span></span><br><span class="line">                <span class="comment">#虚拟主机 默认/可以不写</span></span><br><span class="line">                <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">      </span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 绑定 需要传入一个Map&lt;String, BindingProperties&gt;</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment">#其中input是一个key，这个名字是一个通道的名称，在代码中会用到</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">spring.cloud.stream.exchange</span> <span class="comment">#destination表示要使用的Exchange名称定</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">rabbitmq</span> <span class="comment">#这里的名字就是binders定义的那个键</span></span><br></pre></td></tr></table></figure><p>接收测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者收到：&lt;&#123;&#125;&gt; 消息完成，时间：&#123;&#125;&quot;</span>,message.getPayload(),<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public interface Sink &#123;</span></span><br><span class="line"><span class="comment">    String INPUT = &quot;input&quot;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    <span class="doctag">@Input</span>(&quot;input&quot;)</span></span><br><span class="line"><span class="comment">    SubscribableChannel input();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><h3 id="Stream自定义消息通道"><a href="#Stream自定义消息通道" class="headerlink" title="Stream自定义消息通道"></a>Stream自定义消息通道</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomSource</span> </span>&#123;</span><br><span class="line">    String MYOUTPUT = <span class="string">&quot;myOutput&quot;</span>;</span><br><span class="line">    <span class="meta">@Output(CustomSource.MYOUTPUT)</span></span><br><span class="line">    <span class="function">MessageChannel <span class="title">output</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomSink</span> </span>&#123;</span><br><span class="line">    String MYINPUT = <span class="string">&quot;myInput&quot;</span>;</span><br><span class="line">    <span class="meta">@Input(CustomSink.MYINPUT)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者把<code>Sink.class</code>改成我们自定义的<code>CustomSink.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableBinding(CustomSink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(CustomSink.MYINPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者收到：&lt;&#123;&#125;&gt; 消息完成，时间：&#123;&#125;&quot;</span>,message.getPayload(),<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者,把<code>Source.class</code>改成我们自定义的<code>CustomSource.class</code>，并且引入我们自定义<code>CustomSource</code>来进行发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableBinding(CustomSource.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CustomSource customSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> send = customSource.output().send(MessageBuilder.withPayload(msg).build());</span><br><span class="line">        log.info(<span class="string">&quot;发送消息：&lt;&#123;&#125;&gt; 完成，时间：&#123;&#125; 是否成功:&#123;&#125;&quot;</span>,msg,System.currentTimeMillis(),send);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把对应的yml配置文件改了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span>      </span><br><span class="line">      <span class="attr">bindings:</span> </span><br><span class="line">        <span class="attr">input:</span> <span class="comment">#把这个位子改成自定义的类容即可</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">spring.cloud.stream.exchange</span> </span><br><span class="line">          <span class="attr">binder:</span> <span class="string">rabbitmq</span> </span><br></pre></td></tr></table></figure><h3 id="Stream分组与持久化"><a href="#Stream分组与持久化" class="headerlink" title="Stream分组与持久化"></a>Stream分组与持久化</h3><p>前面我们成功的实现了消息的发送与接收，但是所发送的消息在默认情况下都属于一种临时消息，也就是说如果没有消费者进行消费处理，那么该消息是不会被永久保留，可能会造成消息的丢失，如果要实现持久化消息，需要在消息的消费端配置一个分支，有分组就表示该消息可以进行持久化；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span>      </span><br><span class="line">      <span class="attr">bindings:</span> </span><br><span class="line">        <span class="attr">input:</span> <span class="comment">#把这个位子改成自定义的类容即可</span></span><br><span class="line">          <span class="comment"># 进行分组</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">rabbitmq-group</span></span><br></pre></td></tr></table></figure><p>在Spring Cloud Stream中在消费者端如果将队列设置为持久化队列，则队列名称会变成destination.group，此时消费端的微服务宕机或重启，</p><p>该队列信息依然会被保留在Ra bbitMQ中，后续依然可以进行消费；<span style='color:red;font-size:15px;'>注意:分组只能在消费的配置</span></p><p>消息分组的另外一个作用：没有做分组时，一个消息可以被多个消费者接收，分组可以让一个消息只能被一个消费者接收；</p><h3 id="Stream设置路由键"><a href="#Stream设置路由键" class="headerlink" title="Stream设置路由键"></a>Stream设置路由键</h3><p>默认情况下Spring Cloud Stream传送消息属于广播消息，默认匹配方式#，表示所有消费者都可以匹配上，我们也可以通过指定路由键RoutingKey实现按需求匹配消息端进行消息接收处理；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rabbit:</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="attr">myInput:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">bindingRoutingKey:</span> <span class="string">spring.cloud.stream.#</span></span><br></pre></td></tr></table></figure><h2 id="带安全认证的微服务"><a href="#带安全认证的微服务" class="headerlink" title="带安全认证的微服务"></a>带安全认证的微服务</h2><p>我们在生产者<code>springcloud-service-goods</code>项目配置<code>security</code></p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置用户密码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">myiszhb</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="RestTemplate方式"><a href="#RestTemplate方式" class="headerlink" title="RestTemplate方式"></a>RestTemplate方式</h3><p>消费者<code>springcloud-service-portal</code>,采用<code>restTemplate</code>方式调用,我们需要设置头部信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHttpHeaders</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//定义http头部信息</span></span><br><span class="line">       HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">       String auth = <span class="string">&quot;myiszhb:123456&quot;</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] encode = Base64.getEncoder().encode(auth.getBytes(Charset.forName(<span class="string">&quot;us-ascii&quot;</span>)));</span><br><span class="line">       String authHeader = <span class="string">&quot;Basic &quot;</span>+<span class="keyword">new</span> String(encode);</span><br><span class="line">       headers.set(<span class="string">&quot;Authorization&quot;</span>,authHeader);</span><br><span class="line">       <span class="keyword">return</span> headers;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>调用<code>GOODS_SERVER_URL_RIBBON</code>为服务地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/service/goods2&quot;, method = RequestMethod.GET)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResultObject <span class="title">goods2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;/service/goods2 --&gt;8080 被执行..........&quot;</span>);</span><br><span class="line">      ResponseEntity&lt;ResultObject&gt; exchange = restTemplate.exchange(GOODS_SERVER_URL_RIBBON, HttpMethod.GET, <span class="keyword">new</span> HttpEntity&lt;&gt;(httpHeaders), ResultObject.class);</span><br><span class="line">      <span class="keyword">assert</span> exchange != <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ResultObject(Constant.ZERO, <span class="string">&quot;查询成功&quot;</span>, exchange.getBody());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Fegin方式"><a href="#Fegin方式" class="headerlink" title="Fegin方式"></a>Fegin方式</h3><p>添加配置类<code>FeignConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    一种契约，采用fegin的契约方式，如果不配做该bean，会转成springmvc的方式</span></span><br><span class="line"><span class="comment">    @RequestLine(&quot;get /service/goods&quot;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public Contract feginContract()&#123;</span></span><br><span class="line"><span class="comment">        return new Contract.Default();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//传入用户名和密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">&quot;myiszhb&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>@FeignClient</code>注解中加入<code>configuration = FeignConfiguration.class</code>,就可以进行调用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;SPRINGCLOUD-SERVICE-GOODS&quot;,fallbackFactory = GoodsClientFallBack.class,configuration = FeignConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/service/goods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultObject <span class="title">goods</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一安全认证"><a href="#统一安全认证" class="headerlink" title="统一安全认证"></a>统一安全认证</h3><p>我们只需要把安全认证这块单独写一个项目即可，如果其他项目需要引入即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>WebSercurityConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSercurityConfiguration</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.inMemoryAuthentication()</span><br><span class="line">                .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                .withUser(<span class="string">&quot;myiszhb&quot;</span>)</span><br><span class="line">                .password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;user&quot;</span>).and()</span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.httpBasic().and().authorizeRequests().anyRequest().fullyAuthenticated();</span><br><span class="line">        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他项目直接引入这个项目即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.july.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-service-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Apollo"><a href="#Apollo" class="headerlink" title="Apollo"></a>Apollo</h1><p><a href="https://github.com/ctripcorp/apollo/tags">Apollo下载地址</a>，分别下载<code>apollo-adminservice-1.8.2</code>,<code>apollo-configservice-1.8.2.jar</code>,<code>apollo-portal-1.8.2.jar</code></p><p>分别执行<code>apolloconfigdb.sql</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Create</span> Database</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ApolloConfigDB <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4;</span><br><span class="line"></span><br><span class="line">Use ApolloConfigDB;</span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> app</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `App`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `App` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `Name` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;应用名&#x27;</span>,</span><br><span class="line">  `OrgId` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;部门Id&#x27;</span>,</span><br><span class="line">  `OrgName` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;部门名字&#x27;</span>,</span><br><span class="line">  `OwnerName` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;ownerName&#x27;</span>,</span><br><span class="line">  `OwnerEmail` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;ownerEmail&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `AppId` (`AppId`(<span class="number">191</span>)),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_Name` (`Name`(<span class="number">191</span>))</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;应用表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> appnamespace</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `AppNamespace`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `AppNamespace` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `Name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;namespace名字，注意，需要全局唯一&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;app id&#x27;</span>,</span><br><span class="line">  `Format` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;properties&#x27;</span> COMMENT <span class="string">&#x27;namespace的format类型&#x27;</span>,</span><br><span class="line">  `IsPublic` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;namespace是否为公共&#x27;</span>,</span><br><span class="line">  `Comment` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;注释&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_AppId` (`AppId`),</span><br><span class="line">  KEY `Name_AppId` (`Name`,`AppId`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;应用namespace定义&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> audit</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Audit`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Audit` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `EntityName` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;表名&#x27;</span>,</span><br><span class="line">  `EntityId` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;记录ID&#x27;</span>,</span><br><span class="line">  `OpName` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;操作类型&#x27;</span>,</span><br><span class="line">  `Comment` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;日志审计表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> cluster</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Cluster`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Cluster` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `Name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;集群名字&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;App id&#x27;</span>,</span><br><span class="line">  `ParentClusterId` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;父cluster&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_AppId_Name` (`AppId`,`Name`),</span><br><span class="line">  KEY `IX_ParentClusterId` (`ParentClusterId`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;集群&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">commit</span></span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">Commit</span>`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">Commit</span>` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `ChangeSets` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改变更集&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `ClusterName` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;ClusterName&#x27;</span>,</span><br><span class="line">  `NamespaceName` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;namespaceName&#x27;</span>,</span><br><span class="line">  `Comment` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `AppId` (`AppId`(<span class="number">191</span>)),</span><br><span class="line">  KEY `ClusterName` (`ClusterName`(<span class="number">191</span>)),</span><br><span class="line">  KEY `NamespaceName` (`NamespaceName`(<span class="number">191</span>))</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;commit 历史表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> grayreleaserule</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `GrayReleaseRule`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `GrayReleaseRule` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `ClusterName` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;Cluster Name&#x27;</span>,</span><br><span class="line">  `NamespaceName` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;Namespace Name&#x27;</span>,</span><br><span class="line">  `BranchName` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;branch name&#x27;</span>,</span><br><span class="line">  `Rules` <span class="type">varchar</span>(<span class="number">16000</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;[]&#x27;</span> COMMENT <span class="string">&#x27;灰度规则&#x27;</span>,</span><br><span class="line">  `ReleaseId` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;灰度对应的release&#x27;</span>,</span><br><span class="line">  `BranchStatus` tinyint(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;灰度分支状态: 0:删除分支,1:正在使用的规则 2：全量发布&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_Namespace` (`AppId`,`ClusterName`,`NamespaceName`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;灰度规则表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> instance</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Instance`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Instance` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `ClusterName` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;ClusterName&#x27;</span>,</span><br><span class="line">  `DataCenter` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;Data Center Name&#x27;</span>,</span><br><span class="line">  `Ip` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;instance ip&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `IX_UNIQUE_KEY` (`AppId`,`ClusterName`,`Ip`,`DataCenter`),</span><br><span class="line">  KEY `IX_IP` (`Ip`),</span><br><span class="line">  KEY `IX_DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;使用配置的应用实例&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> instanceconfig</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `InstanceConfig`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `InstanceConfig` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `InstanceId` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Instance Id&#x27;</span>,</span><br><span class="line">  `ConfigAppId` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;Config App Id&#x27;</span>,</span><br><span class="line">  `ConfigClusterName` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;Config Cluster Name&#x27;</span>,</span><br><span class="line">  `ConfigNamespaceName` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;Config Namespace Name&#x27;</span>,</span><br><span class="line">  `ReleaseKey` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;发布的Key&#x27;</span>,</span><br><span class="line">  `ReleaseDeliveryTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;配置获取时间&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `IX_UNIQUE_KEY` (`InstanceId`,`ConfigAppId`,`ConfigNamespaceName`),</span><br><span class="line">  KEY `IX_ReleaseKey` (`ReleaseKey`),</span><br><span class="line">  KEY `IX_DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_Valid_Namespace` (`ConfigAppId`,`ConfigClusterName`,`ConfigNamespaceName`,`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;应用实例的配置信息&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> item</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Item`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Item` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `NamespaceId` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;集群NamespaceId&#x27;</span>,</span><br><span class="line">  `Key` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;配置项Key&#x27;</span>,</span><br><span class="line">  `<span class="keyword">Value</span>` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;配置项值&#x27;</span>,</span><br><span class="line">  `Comment` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;注释&#x27;</span>,</span><br><span class="line">  `LineNum` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;行号&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_GroupId` (`NamespaceId`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;配置项目&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> namespace</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Namespace`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Namespace` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `ClusterName` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;Cluster Name&#x27;</span>,</span><br><span class="line">  `NamespaceName` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;Namespace Name&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `AppId_ClusterName_NamespaceName` (`AppId`(<span class="number">191</span>),`ClusterName`(<span class="number">191</span>),`NamespaceName`(<span class="number">191</span>)),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_NamespaceName` (`NamespaceName`(<span class="number">191</span>))</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;命名空间&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> namespacelock</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `NamespaceLock`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `NamespaceLock` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增id&#x27;</span>,</span><br><span class="line">  `NamespaceId` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;集群NamespaceId&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;软删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `IX_NamespaceId` (`NamespaceId`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;namespace的编辑锁&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">release</span></span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">Release</span>`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">Release</span>` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `ReleaseKey` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;发布的Key&#x27;</span>,</span><br><span class="line">  `Name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;发布名字&#x27;</span>,</span><br><span class="line">  `Comment` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;发布说明&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `ClusterName` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;ClusterName&#x27;</span>,</span><br><span class="line">  `NamespaceName` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;namespaceName&#x27;</span>,</span><br><span class="line">  `Configurations` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;发布配置&#x27;</span>,</span><br><span class="line">  `IsAbandoned` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否废弃&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `AppId_ClusterName_GroupName` (`AppId`(<span class="number">191</span>),`ClusterName`(<span class="number">191</span>),`NamespaceName`(<span class="number">191</span>)),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_ReleaseKey` (`ReleaseKey`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;发布&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> releasehistory</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ReleaseHistory`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ReleaseHistory` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `ClusterName` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;ClusterName&#x27;</span>,</span><br><span class="line">  `NamespaceName` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;namespaceName&#x27;</span>,</span><br><span class="line">  `BranchName` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;发布分支名&#x27;</span>,</span><br><span class="line">  `ReleaseId` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;关联的Release Id&#x27;</span>,</span><br><span class="line">  `PreviousReleaseId` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;前一次发布的ReleaseId&#x27;</span>,</span><br><span class="line">  `Operation` tinyint(<span class="number">3</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;发布类型，0: 普通发布，1: 回滚，2: 灰度发布，3: 灰度规则更新，4: 灰度合并回主分支发布，5: 主分支发布灰度自动发布，6: 主分支回滚灰度自动发布，7: 放弃灰度&#x27;</span>,</span><br><span class="line">  `OperationContext` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;发布上下文信息&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_Namespace` (`AppId`,`ClusterName`,`NamespaceName`,`BranchName`),</span><br><span class="line">  KEY `IX_ReleaseId` (`ReleaseId`),</span><br><span class="line">  KEY `IX_DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;发布历史&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> releasemessage</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ReleaseMessage`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ReleaseMessage` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `Message` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;发布的消息内容&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_Message` (`Message`(<span class="number">191</span>))</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;发布消息&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> serverconfig</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ServerConfig`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ServerConfig` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `Key` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;配置项Key&#x27;</span>,</span><br><span class="line">  `Cluster` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;配置对应的集群，default为不针对特定的集群&#x27;</span>,</span><br><span class="line">  `<span class="keyword">Value</span>` <span class="type">varchar</span>(<span class="number">2048</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;配置项值&#x27;</span>,</span><br><span class="line">  `Comment` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;注释&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_Key` (`Key`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;配置服务自身配置&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> accesskey</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `AccessKey`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `AccessKey` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `Secret` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Secret&#x27;</span>,</span><br><span class="line">  `IsEnabled` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: enabled, 0: disabled&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `AppId` (`AppId`(<span class="number">191</span>)),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;访问密钥&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># Config</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ServerConfig` (`Key`, `Cluster`, `<span class="keyword">Value</span>`, `Comment`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">&#x27;eureka.service.url&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;http://localhost:8080/eureka/&#x27;</span>, <span class="string">&#x27;Eureka服务Url，多个service以英文逗号分隔&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;namespace.lock.switch&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;false&#x27;</span>, <span class="string">&#x27;一次发布只能有一个人修改开关&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;item.value.length.limit&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;20000&#x27;</span>, <span class="string">&#x27;item value最大长度限制&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;config-service.cache.enabled&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;false&#x27;</span>, <span class="string">&#x27;ConfigService是否开启缓存，开启后能提高性能，但是会增大内存消耗！&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;item.key.length.limit&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;128&#x27;</span>, <span class="string">&#x27;item key 最大长度限制&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># Sample Data</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `App` (`AppId`, `Name`, `OrgId`, `OrgName`, `OwnerName`, `OwnerEmail`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;SampleApp&#x27;</span>, <span class="string">&#x27;Sample App&#x27;</span>, <span class="string">&#x27;TEST1&#x27;</span>, <span class="string">&#x27;样例部门1&#x27;</span>, <span class="string">&#x27;apollo&#x27;</span>, <span class="string">&#x27;apollo@acme.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `AppNamespace` (`Name`, `AppId`, `Format`, `IsPublic`, `Comment`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;application&#x27;</span>, <span class="string">&#x27;SampleApp&#x27;</span>, <span class="string">&#x27;properties&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;default app namespace&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `Cluster` (`Name`, `AppId`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;SampleApp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `Namespace` (`Id`, `AppId`, `ClusterName`, `NamespaceName`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;SampleApp&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;application&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `Item` (`NamespaceId`, `Key`, `<span class="keyword">Value</span>`, `Comment`, `LineNum`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;timeout&#x27;</span>, <span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;sample timeout配置&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">Release</span>` (`ReleaseKey`, `Name`, `Comment`, `AppId`, `ClusterName`, `NamespaceName`, `Configurations`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;20161009155425-d3a0749c6e20bc15&#x27;</span>, <span class="string">&#x27;20161009155424-release&#x27;</span>, <span class="string">&#x27;Sample发布&#x27;</span>, <span class="string">&#x27;SampleApp&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;application&#x27;</span>, <span class="string">&#x27;&#123;\&quot;timeout\&quot;:\&quot;100\&quot;&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ReleaseHistory` (`AppId`, `ClusterName`, `NamespaceName`, `BranchName`, `ReleaseId`, `PreviousReleaseId`, `Operation`, `OperationContext`, `DataChange_CreatedBy`, `DataChange_LastModifiedBy`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;SampleApp&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;application&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;&#123;&#125;&#x27;</span>, <span class="string">&#x27;apollo&#x27;</span>, <span class="string">&#x27;apollo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ReleaseMessage` (`Message`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;SampleApp+default+application&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>apolloportaldb.sql</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Create</span> Database</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ApolloPortalDB <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4;</span><br><span class="line"></span><br><span class="line">Use ApolloPortalDB;</span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> app</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `App`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `App` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `Name` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;应用名&#x27;</span>,</span><br><span class="line">  `OrgId` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;部门Id&#x27;</span>,</span><br><span class="line">  `OrgName` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;部门名字&#x27;</span>,</span><br><span class="line">  `OwnerName` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;ownerName&#x27;</span>,</span><br><span class="line">  `OwnerEmail` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;ownerEmail&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `AppId` (`AppId`(<span class="number">191</span>)),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_Name` (`Name`(<span class="number">191</span>))</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;应用表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> appnamespace</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `AppNamespace`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `AppNamespace` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `Name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;namespace名字，注意，需要全局唯一&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;app id&#x27;</span>,</span><br><span class="line">  `Format` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;properties&#x27;</span> COMMENT <span class="string">&#x27;namespace的format类型&#x27;</span>,</span><br><span class="line">  `IsPublic` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;namespace是否为公共&#x27;</span>,</span><br><span class="line">  `Comment` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;注释&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_AppId` (`AppId`),</span><br><span class="line">  KEY `Name_AppId` (`Name`,`AppId`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;应用namespace定义&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> consumer</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Consumer`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Consumer` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `Name` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;应用名&#x27;</span>,</span><br><span class="line">  `OrgId` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;部门Id&#x27;</span>,</span><br><span class="line">  `OrgName` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;部门名字&#x27;</span>,</span><br><span class="line">  `OwnerName` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;ownerName&#x27;</span>,</span><br><span class="line">  `OwnerEmail` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;ownerEmail&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `AppId` (`AppId`(<span class="number">191</span>)),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;开放API消费者&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> consumeraudit</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ConsumerAudit`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ConsumerAudit` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `ConsumerId` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Consumer Id&#x27;</span>,</span><br><span class="line">  `Uri` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;访问的Uri&#x27;</span>,</span><br><span class="line">  `<span class="keyword">Method</span>` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;访问的Method&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_ConsumerId` (`ConsumerId`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;consumer审计表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> consumerrole</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ConsumerRole`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ConsumerRole` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `ConsumerId` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Consumer Id&#x27;</span>,</span><br><span class="line">  `RoleId` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Role Id&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_RoleId` (`RoleId`),</span><br><span class="line">  KEY `IX_ConsumerId_RoleId` (`ConsumerId`,`RoleId`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;consumer和role的绑定表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> consumertoken</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ConsumerToken`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ConsumerToken` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `ConsumerId` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;ConsumerId&#x27;</span>,</span><br><span class="line">  `Token` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;token&#x27;</span>,</span><br><span class="line">  `Expires` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2099-01-01 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;token失效时间&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `IX_Token` (`Token`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;consumer token表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> favorite</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Favorite`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Favorite` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `UserId` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;收藏的用户&#x27;</span>,</span><br><span class="line">  `AppId` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;AppID&#x27;</span>,</span><br><span class="line">  `Position` <span class="type">int</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;10000&#x27;</span> COMMENT <span class="string">&#x27;收藏顺序&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `AppId` (`AppId`(<span class="number">191</span>)),</span><br><span class="line">  KEY `IX_UserId` (`UserId`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">23</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;应用收藏表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> permission</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Permission`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Permission` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `PermissionType` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;权限类型&#x27;</span>,</span><br><span class="line">  `TargetId` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;权限对象类型&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_TargetId_PermissionType` (`TargetId`(<span class="number">191</span>),`PermissionType`),</span><br><span class="line">  KEY `IX_DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;permission表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> role</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Role`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Role` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `RoleName` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Role name&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_RoleName` (`RoleName`(<span class="number">191</span>)),</span><br><span class="line">  KEY `IX_DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;角色表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> rolepermission</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `RolePermission`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `RolePermission` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `RoleId` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Role Id&#x27;</span>,</span><br><span class="line">  `PermissionId` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Permission Id&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_RoleId` (`RoleId`),</span><br><span class="line">  KEY `IX_PermissionId` (`PermissionId`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;角色和权限的绑定表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> serverconfig</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ServerConfig`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ServerConfig` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `Key` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;配置项Key&#x27;</span>,</span><br><span class="line">  `<span class="keyword">Value</span>` <span class="type">varchar</span>(<span class="number">2048</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;配置项值&#x27;</span>,</span><br><span class="line">  `Comment` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;注释&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_Key` (`Key`),</span><br><span class="line">  KEY `DataChange_LastTime` (`DataChange_LastTime`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;配置服务自身配置&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> userrole</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `UserRole`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `UserRole` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `UserId` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户身份标识&#x27;</span>,</span><br><span class="line">  `RoleId` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Role Id&#x27;</span>,</span><br><span class="line">  `IsDeleted` bit(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;1: deleted, 0: normal&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;创建人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_CreatedTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `DataChange_LastModifiedBy` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;最后修改人邮箱前缀&#x27;</span>,</span><br><span class="line">  `DataChange_LastTime` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`),</span><br><span class="line">  KEY `IX_DataChange_LastTime` (`DataChange_LastTime`),</span><br><span class="line">  KEY `IX_RoleId` (`RoleId`),</span><br><span class="line">  KEY `IX_UserId_RoleId` (`UserId`,`RoleId`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户和role的绑定表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> Users</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Users`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Users` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `Username` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `Password` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `Email` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;邮箱地址&#x27;</span>,</span><br><span class="line">  `Enabled` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否有效&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> Authorities</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Authorities`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Authorities` (</span><br><span class="line">  `Id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增Id&#x27;</span>,</span><br><span class="line">  `Username` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Authority` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Config</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ServerConfig` (`Key`, `<span class="keyword">Value</span>`, `Comment`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">&#x27;apollo.portal.envs&#x27;</span>, <span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;可支持的环境列表&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;organizations&#x27;</span>, <span class="string">&#x27;[&#123;\&quot;orgId\&quot;:\&quot;TEST1\&quot;,\&quot;orgName\&quot;:\&quot;样例部门1\&quot;&#125;,&#123;\&quot;orgId\&quot;:\&quot;TEST2\&quot;,\&quot;orgName\&quot;:\&quot;样例部门2\&quot;&#125;]&#x27;</span>, <span class="string">&#x27;部门列表&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;superAdmin&#x27;</span>, <span class="string">&#x27;apollo&#x27;</span>, <span class="string">&#x27;Portal超级管理员&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;api.readTimeout&#x27;</span>, <span class="string">&#x27;10000&#x27;</span>, <span class="string">&#x27;http接口read timeout&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;consumer.token.salt&#x27;</span>, <span class="string">&#x27;someSalt&#x27;</span>, <span class="string">&#x27;consumer token salt&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;admin.createPrivateNamespace.switch&#x27;</span>, <span class="string">&#x27;true&#x27;</span>, <span class="string">&#x27;是否允许项目管理员创建私有namespace&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;configView.memberOnly.envs&#x27;</span>, <span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;只对项目成员显示配置信息的环境列表，多个env以英文逗号分隔&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `Users` (`Username`, `Password`, `Email`, `Enabled`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;apollo&#x27;</span>, <span class="string">&#x27;$2a$10$7r20uS.BQ9uBpf3Baj3uQOZvMVvB1RN3PYoKE94gtz2.WAOuiiwXS&#x27;</span>, <span class="string">&#x27;apollo@acme.com&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `Authorities` (`Username`, `Authority`) <span class="keyword">VALUES</span> (<span class="string">&#x27;apollo&#x27;</span>, <span class="string">&#x27;ROLE_user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># Sample Data</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `App` (`AppId`, `Name`, `OrgId`, `OrgName`, `OwnerName`, `OwnerEmail`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;SampleApp&#x27;</span>, <span class="string">&#x27;Sample App&#x27;</span>, <span class="string">&#x27;TEST1&#x27;</span>, <span class="string">&#x27;样例部门1&#x27;</span>, <span class="string">&#x27;apollo&#x27;</span>, <span class="string">&#x27;apollo@acme.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `AppNamespace` (`Name`, `AppId`, `Format`, `IsPublic`, `Comment`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;application&#x27;</span>, <span class="string">&#x27;SampleApp&#x27;</span>, <span class="string">&#x27;properties&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;default app namespace&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `Permission` (`Id`, `PermissionType`, `TargetId`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;CreateCluster&#x27;</span>, <span class="string">&#x27;SampleApp&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;CreateNamespace&#x27;</span>, <span class="string">&#x27;SampleApp&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;AssignRole&#x27;</span>, <span class="string">&#x27;SampleApp&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;ModifyNamespace&#x27;</span>, <span class="string">&#x27;SampleApp+application&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;ReleaseNamespace&#x27;</span>, <span class="string">&#x27;SampleApp+application&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `Role` (`Id`, `RoleName`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Master+SampleApp&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;ModifyNamespace+SampleApp+application&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;ReleaseNamespace+SampleApp+application&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `RolePermission` (`RoleId`, `PermissionId`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `UserRole` (`UserId`, `RoleId`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;apollo&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;apollo&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;apollo&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写脚本启动这3个程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">echo</span><br><span class="line">​</span><br><span class="line">set url=&quot;47.103.99.109:3306&quot;</span><br><span class="line">set username=&quot;root&quot;</span><br><span class="line">set password=&quot;asdgfwgewer341231&quot;</span><br><span class="line">​</span><br><span class="line">start &quot;configService&quot; java -Xms256m -Xmx256m -Dapollo_profile=github -Dspring.datasource.url=jdbc:mysql://%url%/ApolloConfigDB?characterEncoding=utf8 -Dspring.datasource.username=%username% -Dspring.datasource.password=%password% -Dlogging.file=.\logs\apollo-configservice.log -jar .\apollo-configservice-1.8.2.jar</span><br><span class="line">start &quot;adminService&quot; java -Xms256m -Xmx256m -Dapollo_profile=github -Dspring.datasource.url=jdbc:mysql://%url%/ApolloConfigDB?characterEncoding=utf8 -Dspring.datasource.username=%username% -Dspring.datasource.password=%password% -Dlogging.file=.\logs\apollo-adminservice.log -jar .\apollo-adminservice-1.8.2.jar</span><br><span class="line">start &quot;ApolloPortal&quot; java -Xms256m -Xmx256m -Dapollo_profile=github,auth -Ddev_meta=http://localhost:8080/ -Dserver.port=8070 -Dspring.datasource.url=jdbc:mysql://%url%/ApolloPortalDB?characterEncoding=utf8 -Dspring.datasource.username=%username% -Dspring.datasource.password=%password% -Dlogging.file=.\logs\apollo-portal.log -jar .\apollo-portal-1.8.2.jar</span><br></pre></td></tr></table></figure><p>项目集成<code>Apollo Client</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.ctrip.framework.apollo/apollo-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ctrip.framework.apollo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apollo-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="comment">#Apollo项目id</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">springcloud-service-goods-apollo</span></span><br><span class="line"><span class="attr">apollo:</span></span><br><span class="line">  <span class="comment">#config services url</span></span><br><span class="line">  <span class="attr">meta:</span> <span class="string">http://192.168.1.107:8080</span></span><br></pre></td></tr></table></figure><p>启动类加上<code>@EnableAolloCinfig</code></p><p>本地缓存默认路径 windows在<code>C:\opt\data\</code>目录存放，Liunx是在<code>opt\data\</code>存放，<code>opt/data/&#123;appid&#125;/config-cache</code></p><h3 id="Apollo客户端实现原理"><a href="#Apollo客户端实现原理" class="headerlink" title="Apollo客户端实现原理"></a>Apollo客户端实现原理</h3><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210705133115.png" alt="1"></p><p>1.客户端和服务端保持一个长连接，从而能第一时间获取配置更新的推送（通过http Long Polling实现）；</p><p>2.客户端还会定时从Apollo配置中心服务端拉取应用的最新配置。这是一个fallback机制，为了防止推送机制失效导致配置不更新；</p><p>3.客户端定时拉取会上报本地版本，所以一般情况下，对于定时拉取的操作，服务端会返回304-Not Modified，定时频率默认每5分钟拉取一次，客户端也可以通过在运行时指定SystemProperty:apollo.refreshInterval来覆盖，单位为分钟；</p><p>4.客户端从Apollo配置中心服务端获取到应用的最新配置后，会保存在内存中，客户端会把从服务端获取到的配置在本地文件系统缓存一份，在遇到服务不可以，或网络不通的时候，依然能从本地恢复配置；</p><p>5.应用程序可以从Apollo客户端获取最新的配置、订阅配置更新通知；</p>]]></content>
    
    
    <summary type="html">微服务</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="微服务" scheme="https://www.isfate.xyz/categories/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://www.isfate.xyz/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Netflix学习-一</title>
    <link href="https://www.isfate.xyz/article/1db87a14.html"/>
    <id>https://www.isfate.xyz/article/1db87a14.html</id>
    <published>2021-06-08T09:30:41.000Z</published>
    <updated>2022-07-01T08:49:23.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h2><blockquote><p>Eureka是什么？</p></blockquote><ol><li><p><code>Eureka</code>是Netflix的一个子模块，也是核心模块之一。<code>Eureka</code>是一个基于Rest的服务，用于定位服务，以实现云端中间层服务发现和故障转移。</p></li><li><p><code>Eureka</code>采用了C-S的设计架构，<code>Eureka Server</code>作为服务注册功能的服务器，他是服务注册中心，而系统其他微服务，使用<code>Eureka</code>的客户端连接到<code>Eureka Server</code>并维持心跳连接，这样运维人员就可以通过<code>Eureka Server</code>来监控每个微服务是否正常运行。</p></li></ol><blockquote><p>什么是服务注册？</p></blockquote><p>服务注册：将服务所在主机、端口、版本号、通信协议等信息登记到注册中心。</p><blockquote><p>什么是服务发现？</p></blockquote><p>服务发现：服务消费者向注册中心请求已经登记的服务列表，然后得到某个服务的主机、端口、版本号、通信协议等信息。从而实现对具体服务的调用。</p><blockquote><p>Eureka在项目中解决了那些问题？</p></blockquote><ol><li>我们不要在去定义接口的地址</li><li>可以实现接口的负载均衡</li><li>同时实现故障转移，可以知道那些服务宕机等等</li></ol><blockquote><p>Eureka与zookeeper比较</p></blockquote><ol><li><p>CAP理论指出，一个分布式系统不可能同时满足<code>C(一致性)、A(可用性)、P(分区容错性-&gt;服务本身没有问题而是由于网络原因延迟导致服务无法访问)</code></p></li><li><p>由于分区容错性在分布式中必须要保证的，因此我们只能在A和C之间进行权衡，在此<code>zookeeper</code>保证的是<code>CP</code>，而<code>Eureka</code>保证的是<code>AP</code>。</p></li></ol><blockquote><p>Zookeeper保证CP</p></blockquote><p>在<code>zookeeper</code>中，当<code>master</code>节点因为网络故障与其他节点失去联系是，剩余节点会重新进行<code>leader</code>选举，但是问题在于，选举<code>leader</code>需要一定的时间，且选择期间整个<code>zookeeper</code>集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得<code>zookeeper</code>集群失去<code>master</code>节点是大概率时间，虽然服务最终能够恢复，但是在选举时间内导致服务注册长期不可用时难以容忍的。</p><blockquote><p>Eureka保证AP</p></blockquote><p><code>Eureka</code>优先保证可用性，<code>Eureka</code>各个节点时平等的，某几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和服务查询。而<code>Eureka</code>的客户端在向某个<code>Eureka</code>注册时如果发现连接失败，则会自动切换至其他节点，只要有一台<code>Eureka</code>还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(<code>不保证强一致性</code>)</p><blockquote><p>Eureka自我保护机制</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210504163136.png" alt="img"></p><p>在没有<code>Eureka</code>自我保护的情况下，如果<code>Eureka Server</code>在一定时间内没有接受到某个微服务实例的心跳，<code>Eureka Server</code> 将会注销实例，但是当发生网络分区故障时，那么微服务与<code>Eureka Server</code>之间将无法正常通讯，以上行为可能变的危险，因为微服务本身其实时没有问题的，此时不应该注销整个服务，如果没有自我保护机制，那么<code>Eureka Server</code>将直接注销掉该服务。</p><p><code>Eureka</code>通过<code>自我保护模式</code>来解决了网络分区故障的问题，当<code>Eureka Server</code>节点在短时间内丢失过多的客户端时，那么就会把整个微服务节点进行保护，一旦进入自我保护模式，<code>Eureka Server</code>就会保护服务注册表中的信息，不删除服务注册表中的数据（不注销服务）。当网络故障恢复后，<code>Eureka Server</code>节点会再自动退出自我保护模式。</p><p><code>Eureka自我保护模式主要解决了网络分区故障时，不注销服务</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#禁用eureka的自我保护模式</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><ol><li><p>这里就使用多配置文件的方式</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210503224946.png" alt="image-20210503224651824"></p></li><li><p>然后配置本地<code>hosts</code>文件：<code>C:\Windows\System32\drivers\etc</code></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       eureka8761</span><br><span class="line">127.0.0.1       eureka8762</span><br><span class="line">127.0.0.1       eureka8763</span><br></pre></td></tr></table></figure></li><li><p>配置idea启动项</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--spring.profiles.active=eureka8761</span><br><span class="line">--spring.profiles.active=eureka8762</span><br><span class="line">--spring.profiles.active=eureka8763</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210503225857.png" alt="image-20210503225857849"></p><blockquote><p>yml配置 端口改变 注册地址互相注册</p></blockquote> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#设置该服务注册中心的hostname</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false 表示不需要把该服务注册到注册中心去，因为这个服务本身就是注册中心</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false 表示不去从服务端索取其他服务信息，因为自己就是服务端，服务注册中心本身就是维护服务实例，他不需要去索取其他服务</span></span><br><span class="line">   <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#指定服务注册中心的位置</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka8762:8762/eureka,http://eureka8763:8763/eureka</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>问题</p></blockquote><ol><li><p>Eureka宕机了接口还能调用嘛？</p><p>只要服务没有挂掉，还能调用。因为服务注册到Eureka之后会被缓存到本地，所以Eureka宕机还是可以继续调用的。</p></li></ol><h3 id="Eureka安全认证"><a href="#Eureka安全认证" class="headerlink" title="Eureka安全认证"></a>Eureka安全认证</h3><p>一般情况下Eureka都会在一个内网环境中，但避免不了在某些项目中需要让其他外网服务注册到Eureka,这个时候就有必要让Eureka增加一套安全认证机制；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入security安全认证依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置eureka服务端</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置访问的账号密码</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">myiszhb</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>然后在eureka服务端编写EurekaSecurityConfig,重写configure方法，把csrf劫持置为不可以，让服务能被接收和注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="keyword">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eureka客户端配置</p><p><code>账号:密码@ip:端口</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#指定服务注册中心的位置</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://myiszhb:123456@127.0.0.1:8761/eureka,http://myiszhb:123456@127.0.0.1:8762/eureka,http://myiszhb:123456@127.0.0.1:8763/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Spring-Cloud-Ribbon"><a href="#Spring-Cloud-Ribbon" class="headerlink" title="Spring Cloud Ribbon"></a>Spring Cloud Ribbon</h2><blockquote><p>Ribbon是什么？</p></blockquote><p><code>Ribbon</code>是一个基于HTTP和TCP的客户端负载均衡器，当使用<code>Ribbon</code>对服务进行访问的时候，它会扩展<code>Eureka</code>客户端的服务发现功能，实现从<code>Eureka</code>注册中心中获取服务端列表，并通过<code>Eureka</code>客户端来确定是否已经启动。<code>Ribbon</code>是在<code>Eureka</code>客户端服务发现的基础上，实现了对服务实例的选择策略，从而实现对服务的负载均衡消费。</p><blockquote><p>Ribbon 负载均衡策略</p></blockquote><p><code>IRule</code>负载均衡实现，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210511153842.png" alt="image-20210511153832961"></p><div class="table-container"><table><thead><tr><th style="text-align:center">负载均衡实现</th><th style="text-align:center">策略</th></tr></thead><tbody><tr><td style="text-align:center">RandomRule</td><td style="text-align:center">随机</td></tr><tr><td style="text-align:center">RoundRobinRule</td><td style="text-align:center">轮询</td></tr><tr><td style="text-align:center">AuailabilityFilteringRule</td><td style="text-align:center">先过滤掉由于多次访问故障的服务，以及并发连接数超过阈值的服务，然后对剩下的服务进行轮询策略访问。</td></tr><tr><td style="text-align:center">WeightedResponseTimeRule</td><td style="text-align:center">根据平均响应时间计算所有服务的权重，响应时间越快服务权重越大被选择的概率越高，如服务刚启动时统计信息不足，则使用<code>RoundRobinRule</code>策略，待统计信息足够是切换回<code>WeightedResponseTimeRule</code>策略</td></tr><tr><td style="text-align:center">RetryRule</td><td style="text-align:center">先按照<code>RoundRobinRule</code>策略分发，如果分发到的服务不能访问，则在指定时间内进行重试，然后到分发其他可以的服务</td></tr><tr><td style="text-align:center">BestAvailableRule</td><td style="text-align:center">先过滤掉由于多次访问故障的服务，以及并发连接数超过阈值的服务，然后选择一个并发量最小的服务</td></tr><tr><td style="text-align:center">ZoneAvoidanceRule（新版本默认）</td><td style="text-align:center">综合判断服务节点所在区域的性能和服务节点的可用性，来决定选择那个服务器</td></tr></tbody></table></div><p>它会默认调用<code>ILoadBalancer</code>类，然后选择进入<code>chooseServer</code>方法，实现是在<code>ZoneAwareLoadBalancer</code>里面，默认走的是<code>ZoneAvoidanceRule</code>规则。</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210511154248.png" alt="image-20210511154247406"></p><h3 id="切换Ribbon的负载均衡"><a href="#切换Ribbon的负载均衡" class="headerlink" title="切换Ribbon的负载均衡"></a>切换Ribbon的负载均衡</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfig</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">iRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//采用轮询方式负载均衡</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RoundRobinRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义负载均衡算法"><a href="#自定义负载均衡算法" class="headerlink" title="自定义负载均衡算法"></a>自定义负载均衡算法</h3><p>需要继承<code>AbstractLoadBalancerRule</code>实现 其中的<code>choose</code>方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig iClientConfig)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//具体实现</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Cloud-Feign"><a href="#Spring-Cloud-Feign" class="headerlink" title="Spring Cloud Feign"></a>Spring Cloud Feign</h2><blockquote><p>Feign是什么？</p></blockquote><p><code>Fegin</code>是Netflix公司开发的一个声明式的REST调用客户端（<code>调用远程的restful风格的http接口组件</code>）。<code>Spring Cloud Feign</code>对<code>Ribbon</code>负载均衡进行了简化，在其基础上进行了进一步的封装，在配置上进行了简化，它是一种声明式的调用方式，它的使用方法是定义一个接口，然后在接口上添加注解，使其支持了<code>Spring MVC</code>标准注解和<code>HttpMessageConverters</code>,<code>Fegin</code>可以与<code>Eureka</code>和<code>Ribbon</code>组合使用以支持负载均衡。</p><blockquote><p>怎么使用Fegin</p></blockquote><p>所需架包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Fegin依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**开启Fegin,FeignClient(&quot;服务的名称&quot;)**/</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;SPRINGCLOUD-SERVICE-GOODS-01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/service/goods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultObject <span class="title">goods</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在消费模块启动类加上<code>@EnableFeignClients</code>开启对<code>Fegin</code>的支持</p><p>在<code>controller</code>引入<code>GoodsClient</code>,即可完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/service/goods&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultObject <span class="title">goodsFegin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;/service/goodsFegin --&gt;8080 被执行..........&quot;</span>);</span><br><span class="line">   ResultObject goods = goodsClient.goods();</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ResultObject(Constant.ZERO, <span class="string">&quot;查询成功&quot;</span>, goods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Cloud-Hystrix"><a href="#Spring-Cloud-Hystrix" class="headerlink" title="Spring Cloud Hystrix"></a>Spring Cloud Hystrix</h2><blockquote><p>Hystrix是什么？</p></blockquote><p><code>Hystrix</code>被称为熔断器，它是一个用于处理分布式系统的<code>延迟</code>和<code>容错</code>的开源库，在分布式系统里，许多服务之间通过远程调用实现信息交互，调用时不可避免会出现调用失败，比如超速、异常等原因导致调用失败，<code>Hystrix</code>能够保证在一个服务出现故障的情况下，不会导致整体服务失败，避免级联故障（服务雪崩），以提高分布式系统的弹性。</p><p>所以当某个服务单元发生故障之后，通过熔断器的故障监控，向调用方返回一个符合预期的、可处理的备选响应（<code>FallBack</code>也叫服务降级），而不是长时间的占用，从而避免了故障在分布式系统中的蔓延，甚至雪崩。</p><h3 id="Hystrix-基本使用"><a href="#Hystrix-基本使用" class="headerlink" title="Hystrix 基本使用"></a>Hystrix 基本使用</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Hystrix依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在springboot启动类加上<code>@EnableHystrix</code>或者<code>@SpringBootApplication</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">/** 开启对hystrix的服务熔断降级支持**/</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="comment">/**开启对Eureka的支持**/</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">/**开启对Fegin的支持**/</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringCloudApplication</span> 注解 包含了3个：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> springboot启动</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableDiscoveryClient</span> 这个注解等价于<span class="doctag">@EnableEurekaClient</span> 开启对Eureka</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableCircuitBreaker</span> 这个注解等价于<span class="doctag">@EnableHystrix</span> 开放hystrix</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortalApplicatin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PortalApplicatin.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;portal服务（消费者）已启动，端口：8000&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对应的方法上加上<code>@HystrixCommand(fallbackMethod = &quot;fallback&quot;)</code>注解，其中<code>fallback</code>是自己定义的其他方法，表示如果服务出现错误或者超时，就进去其方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Hystrix 查询所有商品</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@HystrixCommand(fallbackMethod = &quot;fallback&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/service/goodsHystrix&quot;, method = RequestMethod.GET)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResultObject <span class="title">goodsHystrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;/service/goodsHystrix --&gt;8080 被执行..........&quot;</span>);</span><br><span class="line">       ResultObject goods = goodsClient.goods();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ResultObject(Constant.ZERO, <span class="string">&quot;查询成功&quot;</span>, goods);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 服务降级了</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResultObject <span class="title">fallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ResultObject(Constant.ONE,<span class="string">&quot;服务降级了...&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>Hystrix</code>和<code>ribbon</code>的超时时间配置</p><p>这里<code>Hystrix</code>和<code>ribbon</code>的超时时间都必须配置，不然他是以最小的时间算，<code>Hystrix</code>和<code>ribbon</code>的超时时间都是<code>1秒</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置Hystrix的超时时间</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span> <span class="comment">#也可以针对多个服务</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">timeout:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">4000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置ribbon的超时时间</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">6000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><h3 id="Hystrix-异常处理"><a href="#Hystrix-异常处理" class="headerlink" title="Hystrix 异常处理"></a>Hystrix 异常处理</h3><p>指定方法加上<code>Throwable</code>参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResultObject <span class="title">fallback</span><span class="params">(Throwable throwable)</span></span>&#123;</span><br><span class="line">     throwable.printStackTrace();</span><br><span class="line">     System.out.println(throwable.getMessage());</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> ResultObject(Constant.ONE,<span class="string">&quot;服务降级了...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hystrix-忽略异常"><a href="#Hystrix-忽略异常" class="headerlink" title="Hystrix 忽略异常"></a>Hystrix 忽略异常</h3><p>在<code>@HystrixCommand</code>,加入<code>ignoreExceptions = Throwable.class</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@HystrixCommand(fallbackMethod = &quot;fallback&quot;,ignoreExceptions = Throwable.class)</span><br></pre></td></tr></table></figure><h3 id="Hystrix-限流"><a href="#Hystrix-限流" class="headerlink" title="Hystrix 限流"></a>Hystrix 限流</h3><p>限流就是限制某个微服务的使用量（可用线程数、信号量）</p><p><code>threadPoolKey</code>是线程池唯一表示，<code>Hystrix</code>会使用表示来计数，看线程占用是否超过了，超过了就会直接降级该次调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallback&quot;,</span></span><br><span class="line"><span class="meta">        //线程池唯一标识</span></span><br><span class="line"><span class="meta">threadPoolKey = &quot;goods&quot;,</span></span><br><span class="line"><span class="meta">threadPoolProperties = &#123;</span></span><br><span class="line"><span class="meta">        //可用线程数量（这里设置的是2个）</span></span><br><span class="line"><span class="meta">         @HystrixProperty(name = &quot;coreSize&quot;, value = &quot;2&quot;),</span></span><br><span class="line"><span class="meta">         //队列 （这里设置的是1 所以可以方一个），如果第4个就限流了</span></span><br><span class="line"><span class="meta">          @HystrixProperty(name = &quot;maxQueueSize&quot;, value = &quot;1&quot;)</span></span><br><span class="line"><span class="meta">   &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><h3 id="Hystrix-整合Feign"><a href="#Hystrix-整合Feign" class="headerlink" title="Hystrix 整合Feign"></a>Hystrix 整合Feign</h3><blockquote><p>没有处理异常</p></blockquote><p>在<code>@FeignClient</code>中加入<code>fallback = GoodsClientFallBack.class</code>,其中<code>GoodsClientFallBack</code>自定义的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**开启Fegin,FeignClient(&quot;服务的名称&quot;)**/</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;SPRINGCLOUD-SERVICE-GOODS-01&quot;,fallback = GoodsClientFallBack.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/service/goods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultObject <span class="title">goods</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GoodsClientFallBack</code>实现<code>GoodsClient</code>,并实现其方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsClientFallBack</span> <span class="keyword">implements</span> <span class="title">GoodsClient</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//goods的备用方法，如果goods出现超时或者错误，进入此方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultObject <span class="title">goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultObject(Constant.ONE,<span class="string">&quot;fegin 服务降级&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在配置文件开启开启fegin整合hystrix</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启fegin整合hystrix</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>获取异常信息</p></blockquote><p>在<code>@FeignClient</code>中加入<code>fallbackFactory = GoodsClientFallBack.class</code>,其中<code>GoodsClientFallBack</code>自定义的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;SPRINGCLOUD-SERVICE-GOODS-01&quot;,fallbackFactory = GoodsClientFallBack.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/service/goods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultObject <span class="title">goods</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GoodsClientFallBack</code>实现<code>FallbackFactory&lt;GoodsClient&gt;</code>,并实现其方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsClientFallBack</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">GoodsClient</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GoodsClient <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> GoodsClient()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ResultObject <span class="title">goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                String message = throwable.getMessage();</span><br><span class="line">                System.out.println(<span class="string">&quot;Fegin 远程调用出现错误&quot;</span> + message);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ResultObject(Constant.ONE,<span class="string">&quot;服务异常!&quot;</span>,message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hystrix-Dashboard"><a href="#Hystrix-Dashboard" class="headerlink" title="Hystrix Dashboard"></a>Hystrix Dashboard</h3><p>Hystrix仪表盘，就像汽车的仪表盘一样，实时显示汽车的各项数据，Hystrix仪表盘主要用来监控Hystrix的实时运行状态，通过它我们可以看到Hystrix的各项信息，从而快速发现系统中存在的问题进而解决问题。</p><blockquote><p>简单使用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在启动类加上`@EnableHystrixDashboard</p><p><code>消费者配置</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Hystrix依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springboot 提供的监控 actuator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>暴露端点</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">hystrix.stream</span></span><br></pre></td></tr></table></figure><p>访问：<code>http://localhost:8000/actuator/hystrix.stream</code>,如果一直出现<code>ping:</code>，就访问一下hystrix管理的接口。</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210518120124.png" alt="image-20210518120115126"></p><p>如果出现<code>Unable to connect to Command Metric Stream.</code>错误 可以尝试配置dashboard</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">proxy-stream-allow-list:</span> <span class="string">&quot;localhost&quot;</span></span><br></pre></td></tr></table></figure><p>最终结果</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210518120258.png" alt="image-20210518120256958"></p><h3 id="Hystrix-Turbine"><a href="#Hystrix-Turbine" class="headerlink" title="Hystrix Turbine"></a>Hystrix Turbine</h3><p><code>Turbine</code>可以对多个服务进行监控，然后<code>Hystrix Dashboard</code>在对其进行监控。</p><blockquote><p>简单使用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- eureka依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Hystrix依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- springboot 提供的监控 actuator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- turbine 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3722</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#不把服务注册到注册中心</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#指定服务注册中心的位置</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka8761:8761/eureka,http://eureka8762:8762/eureka,http://eureka8763:8763/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置turbine</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="comment">#对那几个hystrix服务聚合汇总，多个服务逗号分隔</span></span><br><span class="line">  <span class="attr">app-config:</span> <span class="string">springcloud-service-protal</span></span><br><span class="line">  <span class="comment"># 配置成：default 可能会出现报错 </span></span><br><span class="line">  <span class="attr">cluster-name-expression:</span> <span class="string">new</span> <span class="string">String(&#x27;default&#x27;)</span></span><br></pre></td></tr></table></figure><p>把<code>Dashboard</code>的地址改成<code>http://localhost:3722/turbine.stream</code></p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20210520120547.png" alt="2"></p><h2 id="Spring-Cloud-Zuul"><a href="#Spring-Cloud-Zuul" class="headerlink" title="Spring Cloud Zuul"></a>Spring Cloud Zuul</h2><p>在微服务中，一个独立的系统被拆分成很多独立的服务，为了确保安全，权限管理也是一个不可避免的问题，如果在每一个服务上都添加上相同的权限验证代码来确保系统不被非法访问，工作量就太大了，二期维护也非常不方便.Spring Cloud Zuul即可实现一套API网关服务。Zuul包含了对请求的路由和过滤。</p><h3 id="Zuul-路由使用"><a href="#Zuul-路由使用" class="headerlink" title="Zuul 路由使用"></a>Zuul 路由使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- eureka客户端依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- zuul 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-server-zuul</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#每间隔2s，向服务端发送一次心跳，证明自己存活</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment">#告诉服务端，如果我10s没有像你发送心跳，就代表我故障了，将我踢掉</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment">#告诉服务端，服务实例以ip作为链接，而不是机器名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#告诉服务端，服务实例的名称</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-service-zuul</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#指定服务注册中心的位置</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka8761:8761/eureka,http://eureka8762:8762/eureka,http://eureka8763:8763/eureka</span></span><br></pre></td></tr></table></figure><p>启动项目，然后我们就可以通过<code>http://127.0.0.1/springcloud-service-protal/service/goodsFeginHystrix</code>去访问接口了</p><p><code>http://127.0.0.1</code>（zuul服务本身）</p><p><code>/springcloud-service-protal</code>(调用的服务名称)</p><p><code>/service/goodsFeginHystrix</code>（接口地址）</p><h3 id="Zuul-路由规则"><a href="#Zuul-路由规则" class="headerlink" title="Zuul 路由规则"></a>Zuul 路由规则</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment"># zuul的超时时间</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line">    <span class="attr">connect-timeout-millis:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment"># zuul 路由规则</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">portal:</span></span><br><span class="line">      <span class="comment"># 服务名称</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">springcloud-service-protal</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/portal/**</span></span><br><span class="line">  <span class="comment"># zuul 忽略某个服务名，禁止通过服务名称调用</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">springcloud-service-protal</span> </span><br><span class="line">  <span class="comment"># *号表示禁止所有服务名调用</span></span><br><span class="line">  <span class="comment">#ignored-services: &#x27;*&#x27;</span></span><br><span class="line">  <span class="comment">#给所有经过zuul网关接口加一个访问权限，比如 http://127.0.0.1/api/portal/service/goodsFeginHystrix</span></span><br><span class="line">  <span class="comment">#prefix: /api</span></span><br><span class="line">  <span class="comment"># 禁止访问的路由</span></span><br><span class="line">  <span class="attr">ignored-patterns:</span> <span class="string">/**/feign/**</span></span><br></pre></td></tr></table></figure><p>然后就可以通过<code>http://127.0.0.1/portal/service/goodsFeginHystrix</code>去访问，因为配置了忽略服务名，上面那种方式就服务在访问了</p><h3 id="Zuul-过滤器"><a href="#Zuul-过滤器" class="headerlink" title="Zuul 过滤器"></a>Zuul 过滤器</h3><p>过滤器可以做限流、权限验证、记录日志等，过滤器（filter）是zuul的核心组件，zuul中定义了4中标准过滤器类型，这些过滤器对应于请求的典型生命周期。</p><p><code>PRE</code>:这种过滤器在请求被路由之前调用，可以利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等；</p><p><code>ROUTING</code>:这种过滤器将请求路由到微服务，这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Ribbon请求微服务；</p><p><code>POST</code>：这种过滤器在路由到微服务之后执行，这种过滤器可用来为响应添加标准的Http Header、收集统计信息和指标、将响应从微服务发送给客户端登；</p><p><code>ERROR</code>：在其他阶段发生错误时执行该过滤器</p><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过滤器状态 -&gt; 在路由时执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  出现错误</span></span><br><span class="line"><span class="comment">         *  public static final String ERROR_TYPE = &quot;error&quot;;</span></span><br><span class="line"><span class="comment">         *  路由之后执行</span></span><br><span class="line"><span class="comment">         *  public static final String POST_TYPE = &quot;post&quot;;</span></span><br><span class="line"><span class="comment">         *  路由之前执行</span></span><br><span class="line"><span class="comment">         *  public static final String PRE_TYPE = &quot;pre&quot;;</span></span><br><span class="line"><span class="comment">         *  路由</span></span><br><span class="line"><span class="comment">         *  public static final String ROUTE_TYPE = &quot;route&quot;;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> FilterConstants.ROUTE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路由顺序 （顺序小的先执行）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_DECORATION_FILTER_ORDER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  设置是否启用过滤器</span></span><br><span class="line"><span class="comment">     *  true 启用  反之</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在路由时执行run方法 具体逻辑实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext currentContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = currentContext.getRequest();</span><br><span class="line">        String serverName = request.getServerName();</span><br><span class="line">        System.out.println(<span class="string">&quot;访问地址：&quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个过滤器我们可以通过配置文件的方式来更改它的状态</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment">#过滤器名称</span></span><br><span class="line">  <span class="attr">LogFilter:</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">      <span class="attr">disable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Zuul-异常处理"><a href="#Zuul-异常处理" class="headerlink" title="Zuul 异常处理"></a>Zuul 异常处理</h3><p>首先先禁用掉Zuul自带的<code>SendErrorFilter</code>过滤器</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment">#过滤器名称</span></span><br><span class="line">  <span class="attr">SendErrorFilter:</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">      <span class="attr">disable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Zuul-熔断"><a href="#Zuul-熔断" class="headerlink" title="Zuul 熔断"></a>Zuul 熔断</h3><p>在zuul服务里面创建熔断,并实现<code>FallbackProvider</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulFallback</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置对那些服务进行使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置headers</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">                headers.set(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> headers;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置状态码</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.BAD_REQUEST;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置响应体</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(<span class="string">&quot;服务正在维护,请稍后再试&quot;</span>.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置状态码的值，如200，400等</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.BAD_REQUEST.value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置状态的文本</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.BAD_REQUEST.getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">微服务</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="微服务" scheme="https://www.isfate.xyz/categories/java/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://www.isfate.xyz/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-plus学习-二</title>
    <link href="https://www.isfate.xyz/article/1ad5be0d.html"/>
    <id>https://www.isfate.xyz/article/1ad5be0d.html</id>
    <published>2021-05-07T12:34:04.000Z</published>
    <updated>2022-03-31T07:40:09.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h1><p>在mp中，wrapper接口实现类关系如下：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210904194205586.png" alt="image-20210904194205586"></p><p>是由<code>AbstractWrapper</code>和<code>AbstractChainWrapper</code>是重点实现的；</p><h2 id="AbstractWrapper"><a href="#AbstractWrapper" class="headerlink" title="AbstractWrapper"></a>AbstractWrapper</h2><p><a href="https://mp.baomidou.com/guide/wrapper.html#abstractwrapper">官方文档</a></p><h3 id="allEq"><a href="#allEq" class="headerlink" title="allEq"></a>allEq</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">allEq(Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="keyword">boolean</span> condition, Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br><span class="line">    </span><br><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params)</span><br><span class="line">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="keyword">boolean</span> condition, BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br></pre></td></tr></table></figure><blockquote><p>案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAbstractWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testAllEq</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;password&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//用法一  全部条件都是and</span></span><br><span class="line">        <span class="comment">//wrapper.allEq(map);</span></span><br><span class="line">        <span class="comment">//用法二  为空的参数不加入判断</span></span><br><span class="line">        <span class="comment">//wrapper.allEq(map,false);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用法三 通过BiPredicate 来判断参数如果满足下面的参数名称，就加入条件筛选</span></span><br><span class="line">        wrapper.allEq((k,v)-&gt;(k.equals(<span class="string">&quot;age&quot;</span>)||k.equals(<span class="string">&quot;name&quot;</span>)),map);</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本比较操作"><a href="#基本比较操作" class="headerlink" title="基本比较操作"></a>基本比较操作</h3><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">eq</td><td style="text-align:center">等于=</td></tr><tr><td style="text-align:center">ne</td><td style="text-align:center">不等于&lt;&gt;</td></tr><tr><td style="text-align:center">gt</td><td style="text-align:center">大于&gt;</td></tr><tr><td style="text-align:center">ge</td><td style="text-align:center">大于等于&gt;=</td></tr><tr><td style="text-align:center">lt</td><td style="text-align:center">小于&lt;</td></tr><tr><td style="text-align:center">le</td><td style="text-align:center">小于等于&lt;=</td></tr><tr><td style="text-align:center">between</td><td style="text-align:center">between 值1 and 值2</td></tr><tr><td style="text-align:center">notBetween</td><td style="text-align:center">not between 值1 and 值2</td></tr><tr><td style="text-align:center">in</td><td style="text-align:center">字段in(1,2,3….)</td></tr><tr><td style="text-align:center">notln</td><td style="text-align:center">字段 not in(1,2,3….)</td></tr></tbody></table></div><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">like</td><td style="text-align:center">like ‘%王%’</td></tr><tr><td style="text-align:center">notlike</td><td style="text-align:center">not like ‘%王%’</td></tr><tr><td style="text-align:center">likeLeft</td><td style="text-align:center">like ‘%王’</td></tr><tr><td style="text-align:center">likeRight</td><td style="text-align:center">like ‘王%’</td></tr></tbody></table></div><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">order by</td><td style="text-align:center">排序</td></tr><tr><td style="text-align:center">orderByAsc</td><td style="text-align:center">正序</td></tr><tr><td style="text-align:center">orderByDesc</td><td style="text-align:center">倒叙</td></tr></tbody></table></div><h3 id="逻辑查询"><a href="#逻辑查询" class="headerlink" title="逻辑查询"></a>逻辑查询</h3><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">or</td><td style="text-align:center">或者</td></tr><tr><td style="text-align:center">and</td><td style="text-align:center">并且</td></tr></tbody></table></div><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>在mp查询中，默认查询所有的字段，如果有需要也可也i通过select方法进行指定字段的返回；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAbstractWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试select &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 返回指定字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;王五&quot;</span>)</span><br><span class="line">                .or()</span><br><span class="line">                .eq(<span class="string">&quot;age&quot;</span>,<span class="number">21</span>)</span><br><span class="line">                .select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ActiveRecord"><a href="#ActiveRecord" class="headerlink" title="ActiveRecord"></a>ActiveRecord</h1><p>ActiveRecord简称AR，属于ORM（对象关系映射）层，由Rails最早提出，遵循标准的ORM模型，表映射到记录，记录映射到对象，字段映射到对象属性，配合遵循的命名和配置惯例，能够很大程度的快速实现模型的操作；</p><p>ActiveRecord的主要思想：</p><p>1、每一个数据库表对应创建一个类，类的每一个对象实例对应于数据库中表的一行记录，通过表的每个字段在类中都有相应的Field;</p><p>2、ActiveRecord同时负责把自己持久化，在ActiveRecord中封装了对数据库的访问，即crud；</p><p>3、ActiveRecord是一种领域模型，封装了部分业务逻辑；</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>继承Model<T></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(value = &quot;email&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = User.builder().id(<span class="number">1L</span>).build();</span><br><span class="line">        user = user.selectById();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210905231802500.png" alt="image-20210905231802500"></p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = User.builder()</span><br><span class="line">                .userName(<span class="string">&quot;溜溜&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;1234&quot;</span>)</span><br><span class="line">                .age(<span class="number">10</span>)</span><br><span class="line">                .mail(<span class="string">&quot;10@qq.com&quot;</span>)</span><br><span class="line">                .name(<span class="string">&quot;假溜溜&quot;</span>)</span><br><span class="line">                .build().insert();</span><br><span class="line">        System.out.println(<span class="string">&quot;新增：&quot;</span>+(result?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ActiveRecord 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过id修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = User.builder()</span><br><span class="line">                .id(<span class="number">9L</span>)</span><br><span class="line">                .age(<span class="number">11</span>)</span><br><span class="line">                .build()</span><br><span class="line">                .updateById();</span><br><span class="line">        System.out.println(<span class="string">&quot;修改：&quot;</span>+(result?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过id删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = User.builder()</span><br><span class="line">                .id(<span class="number">9L</span>)</span><br><span class="line">                .build()</span><br><span class="line">                .deleteById();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除：&quot;</span>+(result?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据条件查询"><a href="#根据条件查询" class="headerlink" title="根据条件查询"></a>根据条件查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过条件查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;溜溜&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = User.builder().build().selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Oracle主键Sequence"><a href="#Oracle主键Sequence" class="headerlink" title="Oracle主键Sequence"></a>Oracle主键Sequence</h1><p> 在mysql中，主键往往是自增长的，这样使用起来是比较方便的，如果使用的是Oracle数据库，就得使用Sequence序列生成id值；</p><h2 id="Oracle安装"><a href="#Oracle安装" class="headerlink" title="Oracle安装"></a>Oracle安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像</span></span><br><span class="line">docker pull absolutapps/oracle-12c-ee</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建容器</span></span><br><span class="line">docker run -d --name oracle \</span><br><span class="line">    --privileged -v $(pwd)/oradata:/u01/app/oracle \</span><br><span class="line">    -p 8080:8080 -p 1521:1521 absolutapps/oracle-12c-ee</span><br></pre></td></tr></table></figure><p>连接，默认账号密码：system/oracle</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907230114807.png" alt="image-20210907230114807"></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建表，表名以及字段名都要大写</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;TB_USER&quot; (</span><br><span class="line">&quot;ID&quot; NUMBER ( <span class="number">20</span> ) VISIBLE <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">&quot;USER_NAME&quot; VARCHAR2 ( <span class="number">255</span> BYTE ) VISIBLE,</span><br><span class="line">&quot;PASSWORD&quot; VARCHAR2 ( <span class="number">255</span> BYTE ) VISIBLE,</span><br><span class="line">&quot;NAME&quot; VARCHAR2 ( <span class="number">255</span> BYTE ) VISIBLE,</span><br><span class="line">&quot;AGE&quot; NUMBER ( <span class="number">10</span> ) VISIBLE,</span><br><span class="line">&quot;EMAIL&quot; VARCHAR2 ( <span class="number">255</span> BYTE ) VISIBLE </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建序列 </span></span><br><span class="line"><span class="keyword">CREATE</span> SEQUENCE SEQ_USER <span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">1</span> INCREMENT <span class="keyword">BY</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="maven引入oracle包"><a href="#maven引入oracle包" class="headerlink" title="maven引入oracle包"></a>maven引入oracle包</h2><p><code>G:\apache-maven-3.6.3\ojdbc8.jar</code>你oracle.jar的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=G:\apache-maven-3.6.3\ojdbc8.jar -DgroupId=com.oracle -DartifactId=ojdbc8 -Dversion=12.1.0.1 -Dpackaging=jar </span><br></pre></td></tr></table></figure><p>xml引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p> 数据库连接配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># oracle配置</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">oracle.jdbc.driver.OracleDriver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:oracle:thin:@127.0.0.1:1521:orcl</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">system</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">oracle</span></span><br><span class="line"><span class="comment"># oracle 设置id为用户输入</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">input</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>序列id生成配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.july.learn.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * oracle 序列生成器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OracleKeyGenerator <span class="title">oracleKeyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OracleKeyGenerator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实体</p></blockquote><p>配置<code>@KeySequence(value = &quot;SEQ_USER&quot;,clazz = Long.class)</code>，其中<code>SEQ_USER</code>就是创建表中创建的序列；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="meta">@KeySequence(value = &quot;SEQ_USER&quot;,clazz = Long.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* @TableField(select = false) 大字段可设置为 false 不加入 select 查询范围 */</span></span><br><span class="line">    <span class="meta">@TableField(select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* @TableField(value = &quot;email&quot;)指定数据库中字段名 */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;email&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">    <span class="comment">/* @TableField(exist = false) 是否为数据库表字段 默认 true 存在，false 不存在 */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210907234206813.png" alt="image-20210907234206813"></p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="mybatis的插件机制"><a href="#mybatis的插件机制" class="headerlink" title="mybatis的插件机制"></a>mybatis的插件机制</h2><p>mybatis允许你在已映射语句执行过程中的某一点进行拦截调用，默认情况下，mybatis允许使用插件来拦截的方法调用如下：</p><p>1、Executor(update,query,flushStatements,commit,rollback,getTransaction,close,isClosed)</p><p>2、ParameterHandler(getParameterObject,setParameters)</p><p>3、ResultSetHandler(handleResultSets,handleOutputParameters)</p><p>4、StatementHandler(prepare,parameterize,batch,update,query)</p><p>概括：</p><p>1、拦截执行器的方法</p><p>2、拦截参数的处理</p><p>3、拦截结果集的处理</p><p>4、拦截sql语法构建的处理</p><blockquote><p>测试</p></blockquote><p>自定义拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;@Signature(</span></span><br><span class="line"><span class="meta">        type = Exception.class,</span></span><br><span class="line"><span class="meta">        method = &quot;update&quot;,</span></span><br><span class="line"><span class="meta">        args = &#123;MappedStatement.class,Object.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//拦截方法，具体逻辑编写的位置</span></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//插件target对象的代理对象，目的是将当前拦截器加入到对象中</span></span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//属性设置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入容器管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.july.learn.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义mybatis拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyInterceptor <span class="title">myInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如我们执行<code>update</code>方法，就会执行四次<code>plugin</code>方法</p><p>​    第一次<code>plugin</code>方法的target是<code>MybatisSimpleExecutor</code>，然后会进入<code>intercept</code>方法</p><p>​    第二次<code>plugin</code>方法的target是<code>MybatisDeaultParameterHandler</code></p><p>​    第三次<code>plugin</code>方法的target是<code>DefaultResultSetHandle</code></p><p>​    第四次<code>plugin</code>方法的target是<code>RoutingStatementHandler</code></p><p>如果是其他方法进入了<code>plugin</code>就会跳出；</p><h2 id="sql分析插件"><a href="#sql分析插件" class="headerlink" title="sql分析插件"></a>sql分析插件</h2><p> <a href="https://mp.baomidou.com/guide/p6spy.html">官方文档</a></p><blockquote><p>1、引包</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- p6spy --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、配置数据库连接</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># mysql配置</span></span><br><span class="line"><span class="comment">#    driver-class-name: com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#    url: jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line"><span class="comment">#    username: root</span></span><br><span class="line"><span class="comment">#    password: 123456</span></span><br><span class="line">    <span class="comment"># 整合p6spy sql分析</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:p6spy:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><blockquote><p>3、创建spy.properties</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.2.1以上使用</span></span><br><span class="line"><span class="attr">modulelist</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class="line"><span class="comment">#3.2.1以下使用或者不配置</span></span><br><span class="line"><span class="comment">#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class="line"><span class="comment"># 自定义日志打印</span></span><br><span class="line"><span class="comment"># 备注这里是自定义日志打印</span></span><br><span class="line"><span class="attr">logMessageFormat</span>=<span class="string">com.july.learn.config.P6SpyLogger </span></span><br><span class="line"><span class="comment">#日志输出到控制台</span></span><br><span class="line"><span class="attr">appender</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span></span><br><span class="line"><span class="comment"># 使用日志系统记录 sql</span></span><br><span class="line"><span class="comment">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span></span><br><span class="line"><span class="comment"># 设置 p6spy driver 代理</span></span><br><span class="line"><span class="attr">deregisterdrivers</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 取消JDBC URL前缀</span></span><br><span class="line"><span class="attr">useprefix</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span></span><br><span class="line"><span class="attr">excludecategories</span>=<span class="string">info,debug,result,commit,resultset</span></span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">dateformat</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"># 实际驱动可多个</span></span><br><span class="line"><span class="comment">#driverlist=org.h2.Driver</span></span><br><span class="line"><span class="comment"># 是否开启慢SQL记录</span></span><br><span class="line"><span class="attr">outagedetection</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 慢SQL记录标准 2 秒</span></span><br><span class="line"><span class="attr">outagedetectioninterval</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure><blockquote><p>4、自定义日志输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P6SpyLogger</span> <span class="keyword">implements</span> <span class="title">MessageFormattingStrategy</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Desc</span>: 重写日志格式方法</span></span><br><span class="line"><span class="comment">     * now:当前时间</span></span><br><span class="line"><span class="comment">     * elapsed:执行耗时</span></span><br><span class="line"><span class="comment">     * category：执行分组</span></span><br><span class="line"><span class="comment">     * prepared：预编译sql语句</span></span><br><span class="line"><span class="comment">     * sql:执行的真实SQL语句，已替换占位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">formatMessage</span><span class="params">(<span class="keyword">int</span> connectionId, String now, <span class="keyword">long</span> elapsed, String category, String prepared, String sql, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="string">&quot;&quot;</span>.equals(sql.trim()) ? <span class="string">&quot;[ 执行时间：&quot;</span> + now + <span class="string">&quot; | 耗时: &quot;</span></span><br><span class="line">                + elapsed + <span class="string">&quot;ms ] \nSQL 语句：&quot;</span>+ sql + <span class="string">&quot;;&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5、测试</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210909212046972.png" alt="image-20210909212046972"></p><h2 id="防止全表更新与删除"><a href="#防止全表更新与删除" class="headerlink" title="防止全表更新与删除"></a>防止全表更新与删除</h2><blockquote><p>配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.july.learn.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mybatis plus 新版分页 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 旧版本请查看官网</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> MybatisPlusInterceptor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        PaginationInnerInterceptor paginationInnerInterceptor = <span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL);</span><br><span class="line">        <span class="comment">// 阻止全表更新与删除</span></span><br><span class="line">        BlockAttackInnerInterceptor blockAttackInnerInterceptor = <span class="keyword">new</span> BlockAttackInnerInterceptor();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line">        <span class="comment">//把阻止全表更新与删除 加入到 mybatisPlusInterceptor</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(blockAttackInnerInterceptor);</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试全表删除</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210909214730517.png" alt="image-20210909214730517"></p><blockquote><p>测试全表更新</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210909214923673.png" alt="image-20210909214923673"></p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>​    当要更新一条记录的时候，希望这条记录没有被别人更新</p><blockquote><p>乐观锁实现方式</p></blockquote><p>1、取出记录时，获取当前的version</p><p>2、更新时，带上这个version</p><p>3、执行更新时，set version = newVersion where version = oldVersion</p><p>4、如果version不对，就更新失败</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>1.spring boot注解方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.注解实体字段</p></blockquote><p>给实体添加乐观锁版本字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//乐观锁版本</span></span><br><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span>  Integer version;</span><br></pre></td></tr></table></figure><p>初始化乐观锁版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `tb_user` ADD COLUMN `version` int(10) NULL AFTER `email`;</span><br><span class="line">UPDATE `tb_user` SET `version`=&#x27;1&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>3.测试</p></blockquote><p> <img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210912192818939.png" alt="image-20210912192818939"></p><p>测试成功，这里的自动+1，就是我们配置的乐观锁的插件完成的；</p><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>1、支持的数据类型只有：int、Integer、long、Long、Date、Timestamp、LocalDateTime</p><p>2、整数类型下 newVersion = oldVersion + 1；</p><p>3、newVersion会回写到entity中</p><p>3、仅支持updateById(id)与update(update，wrapper)方法</p><p>4、在update(update，wrapper)方法下，wrapper不能重复用！！！</p><h2 id="sql注入器"><a href="#sql注入器" class="headerlink" title="sql注入器"></a>sql注入器</h2><p>在mp中，通过<code>AbstractSqlInjector</code>将BaseMapper中的方法注入到了Mybatis容器，这样这些方法才能正常执行，如果BaseMapper中没有我们想要的方法，该怎么做？</p><blockquote><p>1、继承BaseMapper<T>接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyBaseMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义查询全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、UserMapper也继承我们自定义的mapper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">MyBaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、实现自定义的查询方法<code>FindAll</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindAll</span> <span class="keyword">extends</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法名称</span></span><br><span class="line">        String sqlMethod = <span class="string">&quot;findAll&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：configuration</span></span><br><span class="line"><span class="comment">         * 参数2：sql语句</span></span><br><span class="line"><span class="comment">         * 参数3：参数类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SqlSource sqlSource = <span class="keyword">new</span> RawSqlSource(configuration, String.format(<span class="string">&quot;SELECT %s FROM %s&quot;</span>,sqlSelectColumns(tableInfo, <span class="keyword">false</span>),tableInfo.getTableName()), Object.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addSelectMappedStatementForTable(mapperClass, sqlMethod, sqlSource, tableInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4、然后把方法注入到sql注入器里面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 自定义sql注入器 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlInjector</span> <span class="keyword">extends</span> <span class="title">DefaultSqlInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 重写getMethodList方法 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取父类（DefaultSqlInjector） 原有的方法（不影响原因的方法）</span></span><br><span class="line">        List&lt;AbstractMethod&gt; list = <span class="keyword">super</span>.getMethodList(mapperClass);</span><br><span class="line">        <span class="comment">//把自定义的方法加入其中</span></span><br><span class="line">        list.add(<span class="keyword">new</span> FindAll());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5、测试</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210912203114090.png" alt="image-20210912203114090"></p><h2 id="自动填充功能"><a href="#自动填充功能" class="headerlink" title="自动填充功能"></a>自动填充功能</h2><blockquote><p>1、添加注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@TableField(value = &quot;create_time&quot;,fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(value = &quot;update_time&quot;,fill = FieldFill.UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure><p><code>@TableField(value = &quot;update_time&quot;,fill = FieldFill.UPDATE)</code>，指定什么时候填充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">FieldFill</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入和更新时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT_UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、创建对应的实现</p></blockquote><p>实现<code>MetaObjectHandler</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动填充功能&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 实现创建时间和修改时间的填充</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//注入到ioc容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateTimeOrUpdateTimeMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：字段名称</span></span><br><span class="line"><span class="comment">         * 参赛2：值</span></span><br><span class="line"><span class="comment">         * 参数3：元对象参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、测试</p></blockquote><p>新增：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210912205038799.png" alt="image-20210912205038799"></p><p>修改：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210912205424437.png" alt="image-20210912205424437"></p><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>开发系统时，有时候实现功能时。删除操作需要实现逻辑删除，查询时需要携带状态条件，确保被标记的数据不被查询到，这样做的目的就是避免数据被真正的删除，mp也提过了这样的功能；</p><blockquote><p>1、添加注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><p><code>@TableLogic</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表字段逻辑处理注解（逻辑删除）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hubin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017-09-09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TableLogic &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认逻辑未删除值（该值可无、会自动获取全局配置）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认逻辑删除值（该值可无、会自动获取全局配置）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">delval</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      # 告诉mybatis-plus已删除状态的值为1</span><br><span class="line">      logic-delete-value: 1</span><br><span class="line">      # 告诉mybatis-plus删除状态的值为0</span><br><span class="line">      logic-not-delete-value: 0</span><br></pre></td></tr></table></figure><blockquote><p>3、测试</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210912210753704.png" alt="image-20210912210753704"></p><h2 id="通用枚举"><a href="#通用枚举" class="headerlink" title="通用枚举"></a>通用枚举</h2><p>解决繁琐的配置</p><blockquote><p>1、创建枚举</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SexEnum</span> <span class="keyword">implements</span> <span class="title">IEnum</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MAN(<span class="number">1</span>,<span class="string">&quot;男&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 女</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WOMAN(<span class="number">2</span>,<span class="string">&quot;女&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    SexEnum(<span class="keyword">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、添加对应字段</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用枚举</span></span><br><span class="line"><span class="keyword">private</span> SexEnum sex;</span><br></pre></td></tr></table></figure><blockquote><p>3、配置文件</p></blockquote><p>让mybatis-plus扫描到对应的枚举</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 扫描对应包下的枚举</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.july.learn.enums</span></span><br></pre></td></tr></table></figure><blockquote><p>4、测试</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210912212237098.png" alt="image-20210912212237098"></p><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p>AutoGenerator时mybatis-plus的代码生成器，通过AutoGenerator可以快速生成Entity、Mapper、MapperXML、Service、Controller等各个模块的代码；</p><p><a href="https://mp.baomidou.com/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">官方地址</a></p><blockquote><p>1、添加依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代码生成 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、引入代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;jobob&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/ant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;密码&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(scanner(<span class="string">&quot;模块名&quot;</span>));</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.baomidou.ant&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.ftl&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;/src/main/resources/mapper/&quot;</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);</span></span><br><span class="line"><span class="comment">                if (fileType == FileType.MAPPER) &#123;</span></span><br><span class="line"><span class="comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span></span><br><span class="line"><span class="comment">                    return !new File(filePath).exists();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                // 允许生成模板文件</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        <span class="comment">// templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span></span><br><span class="line">        <span class="comment">// templateConfig.setService();</span></span><br><span class="line">        <span class="comment">// templateConfig.setController();</span></span><br><span class="line"></span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setSuperEntityClass(<span class="string">&quot;你自己的父类实体,没有就不用设置!&quot;</span>);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 公共父类</span></span><br><span class="line">        strategy.setSuperControllerClass(<span class="string">&quot;你自己的父类控制器,没有就不用设置!&quot;</span>);</span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line">        strategy.setSuperEntityColumns(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        strategy.setInclude(scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、结果</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210912220327349.png" alt="image-20210912220327349"></p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="TableFieId"><a href="#TableFieId" class="headerlink" title="@TableFieId"></a>@TableFieId</h2><p>在mp中通过@TableFiedId注解可以指定字段的一些属性，常常解决的问题有2个：</p><p>1、对象中的属性名和字段不一致的问题（非驼峰）</p><p>2、对象中的属性字段在表中不存在的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/* @TableField(select = false) 大字段可设置为 false 不加入 select 查询范围 */</span></span><br><span class="line">    <span class="meta">@TableField(select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@TableField</span>(value = &quot;email&quot;)</span></span><br><span class="line"><span class="comment">     * 指定数据库中字段名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;email&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/* @TableField(exist = false) 是否为数据库表字段 默认 true 存在，false 不存在 */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* @TableField(fill = FieldFill.UPDATE) 什么时候自动填充 需要配置 参考9.6 */</span></span><br><span class="line">  <span class="meta">@TableField(value = &quot;update_time&quot;,fill = FieldFill.UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">mybatis-plus</summary>
    
    
    
    <category term="mybatis-plus" scheme="https://www.isfate.xyz/categories/mybatis-plus/"/>
    
    
    <category term="mybatis-plus" scheme="https://www.isfate.xyz/tags/mybatis-plus/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-plus学习-一</title>
    <link href="https://www.isfate.xyz/article/83dcefb7.html"/>
    <id>https://www.isfate.xyz/article/83dcefb7.html</id>
    <published>2021-05-07T11:34:04.000Z</published>
    <updated>2022-02-07T11:50:20.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="了解mybatis-plus"><a href="#了解mybatis-plus" class="headerlink" title="了解mybatis-plus"></a>了解mybatis-plus</h1><h2 id="mybatis-plus简介"><a href="#mybatis-plus简介" class="headerlink" title="mybatis-plus简介"></a>mybatis-plus简介</h2><p>​    <a href="https://mp.baomidou.com/">官网网址</a>，mybatis-plus(简称MP)是一个mybatis的增强工具，在mybatis的基础上只做增强不做改变，为简化开发、提高效率而生，</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li><code>无侵入</code>：只做增强不做改变，引入它不会对现有工程产生影响；</li><li><code>损耗小</code>：启动即会自动注入基本的CRUD，性能基本无消耗，直接面向对象操作；</li><li><code>强大的CRUD操作</code>：内置通过的mapper、service，仅仅通过少量配置即可实现单表大部分CRUD操作，更有强大的条件构造器，满足各类使用需求；</li><li><code>支持Lambda形式调用</code>：通过lambda表达式，方便的编写各类查询条件，无需再担心字段写错；</li><li><code>支持多种数据库</code>：Mysql、maruaDB、Oracle、DB2、H2、HSQL、SQLite、Postgr、SQLServer等多种数据库；</li><li><code>支持主键自动生成</code>：支持多达4种主键策略（内涵分布式唯一ID生成器-Sequence），可自由配置，完美解决主键问题；</li><li><code>支持XML热加载</code>：mapper对应的xml支持热加载，对简单的crud操作，甚至可以无xml启动；</li><li><code>支持ActiveRecord模式</code>：支持ActiveRecord形式调用，实体类只需要基础Model类即可以进行crud操作；</li><li><code>支持自定义全局通过操作</code>：支持全局通用方法注入（write once,use anywhere）;</li><li><code>支持关键词自动转义</code>：支持数据库关键词（order，key…..）自动转义，还可以自定义关键词；</li><li><code>内置代码生成器</code>：采用代码或者maven插件可以快速生成mapper、model、service、controller层代码，支持模板引擎，更多自定义配置；</li><li><code>内置分页插件</code>：基于mybatis物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通的List查询；</li><li><code>内置性能分析插件</code>：可以输出sql语句以及其执行时间，建议开发测试时启用该功能，能快速找到慢查询；</li><li><code>内置全局拦截插件</code>：提供全表delete、update操作智能分析阻断，也可以自定义拦截规则，预防误操作；</li><li><code>内置sql注入剥离器</code>：支持sql注入剥离，有效预防sql注入攻击；</li></ol><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210808183916550.png" alt="image-20210808183916550"></p><p>annotaion: 注解模块</p><p>extension: 扩展模块</p><p>core: 核心模块</p><p>generator: 代码生成模块</p><blockquote><p>执行流程</p></blockquote><p>扫描实体（Scan Entity），通过反射（reflection extraction）去分析表的名称和字段（Analysis Table Name Column）然后生成sql语句执行crud，最后把它注入到mybatis容器（Injecttion Mybatis Container）</p><h1 id="使用mybatis-plus"><a href="#使用mybatis-plus" class="headerlink" title="使用mybatis-plus"></a>使用mybatis-plus</h1><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><blockquote><p>1.引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.配置mybatis-config</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                characterEncoding=utf8<span class="symbol">&amp;amp;</span>autoReconnect=true<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                allowMultiQueries=true<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>3.User实体</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mybatis查询"><a href="#mybatis查询" class="headerlink" title="mybatis查询"></a>mybatis查询</h2><blockquote><p>1.UserMapper.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.july.simple.learn.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.july.simple.learn.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.UserMapper.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;User&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.查询</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String config = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(config);</span><br><span class="line">        <span class="comment">//拿到session工程</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//得到sqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试查询</span></span><br><span class="line">        List&lt;User&gt; all = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : all) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mybatis-mp查询"><a href="#mybatis-mp查询" class="headerlink" title="mybatis+mp查询"></a>mybatis+mp查询</h2><blockquote><p>1.将UserMapper.java继承BaseMapper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.使用mp种的mybatisSqlSessionFactoryBuilder进行构建</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatisPlus</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String config = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(config);</span><br><span class="line">        <span class="comment">//通过MybatisSqlSessionFactoryBuilder进行构建整合mp</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> MybatisSqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试查询</span></span><br><span class="line">        List&lt;User&gt; all = mapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : all) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring-mp"><a href="#spring-mp" class="headerlink" title="spring+mp"></a>spring+mp</h2><blockquote><p>1.引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.创建applicationContext.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://111.231.207.228:3306/mp?useUnicode=true<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                characterEncoding=utf8<span class="symbol">&amp;amp;</span>autoReconnect=true<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                allowMultiQueries=true<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2020Fate!&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描mapper接口，使用的依然是Mybatis原生的扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.july.learn.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>3.UserMapper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.User</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//指定spring的配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatisSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>6.结果</p></blockquote><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210829185944775.png" alt="image-20210829185944775"></p><h2 id="springboot-mq"><a href="#springboot-mq" class="headerlink" title="springboot+mq"></a>springboot+mq</h2><blockquote><p>1.引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus依赖--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.配置连接</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.07:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><blockquote><p>3.User及UserMapper</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：@MapperScan(&quot;com.july.learn.mapper&quot;)和@Mapper不能同时使用</code></p><h1 id="通过CRUD"><a href="#通过CRUD" class="headerlink" title="通过CRUD"></a>通过CRUD</h1><h2 id="BaseMappe"><a href="#BaseMappe" class="headerlink" title="BaseMappe"></a>BaseMappe</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList 主键ID列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity        实体对象 (set 条件值,可以为 null)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">selectById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList 主键ID列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;注意： 只返回第一个字段的值&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Object&gt; <span class="title">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页查询条件（可以为 RowBounds.DEFAULT）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;E extends IPage&lt;T&gt;&gt; <span class="function">E <span class="title">selectPage</span><span class="params">(E page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; <span class="function">E <span class="title">selectMapsPage</span><span class="params">(E page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBaseMapperMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = User.builder().userName(<span class="string">&quot;浩浩浩&quot;</span>)</span><br><span class="line">                .name(<span class="string">&quot;浩哥&quot;</span>)</span><br><span class="line">                .age(<span class="number">27</span>)</span><br><span class="line">                .password(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">                .email(<span class="string">&quot;hao@163.com&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//这里返回的int，表示受影响的行数</span></span><br><span class="line">        <span class="keyword">int</span> insert = userMapper.insert(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数&quot;</span> + insert+<span class="string">&quot;===&gt; id:&quot;</span>+user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBaseMapperMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 删除 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：int deleteById(Serializable id);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteById(<span class="number">6L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 columnMap 条件，删除记录 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：int deleteByMap(<span class="doctag">@Param</span>(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteByMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;sunqi&quot;</span>);</span><br><span class="line">        <span class="comment">//根据map删除数据，多条件之间是and关系</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteByMap(map);</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，删除记 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：int delete(<span class="doctag">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*  方式一  */</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper1 = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper1.eq(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;zhaoliu&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result1 = <span class="keyword">this</span>.userMapper.delete(wrapper1);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式一受影响的行数&quot;</span> + result1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*  方式二  推荐 */</span></span><br><span class="line">        User user = User.builder().userName(<span class="string">&quot;zhaoliu&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;123456&quot;</span>).build();</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper2 = <span class="keyword">new</span> QueryWrapper&lt;&gt;(user);</span><br><span class="line">        <span class="keyword">int</span> result2 = <span class="keyword">this</span>.userMapper.delete(wrapper2);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式二受影响的行数&quot;</span> + result2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除（根据ID 批量删除 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：int deleteBatchIds(<span class="doctag">@Param</span>(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteBatchIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteBatchIds(Arrays.asList(<span class="number">7L</span>, <span class="number">8L</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBaseMapperMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 修改</span></span><br><span class="line"><span class="comment">     * 方法：int updateById(<span class="doctag">@Param</span>(Constants.ENTITY) T entity);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testUpdateById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = User.builder()</span><br><span class="line">                .id(<span class="number">1L</span>)</span><br><span class="line">                .userName(<span class="string">&quot;张三三&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//这里返回的int，表示受影响的行数</span></span><br><span class="line">        <span class="keyword">int</span> updateById = <span class="keyword">this</span>.userMapper.updateById(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数&quot;</span> + updateById+<span class="string">&quot;===&gt; user:&quot;</span>+<span class="keyword">this</span>.userMapper.selectById(<span class="number">1L</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记</span></span><br><span class="line"><span class="comment">     * 方法：int update(<span class="doctag">@Param</span>(Constants.ENTITY) T entity, <span class="doctag">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; updateWrapper);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**********  方式一 ************/</span></span><br><span class="line">        User user = User.builder().age(<span class="number">100</span>).mail(<span class="string">&quot;110@qq.com&quot;</span>).build();</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;张三三&quot;</span>);</span><br><span class="line">        <span class="comment">//更具用户名称为张三三的进行修改</span></span><br><span class="line">        <span class="keyword">int</span> update1 = <span class="keyword">this</span>.userMapper.update(user, wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式一受影响的行数&quot;</span> + update1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// /**********  方式二 ************/</span></span><br><span class="line">        UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">        updateWrapper.set(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;120&quot;</span>).set(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;浩浩浩&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> update2 = <span class="keyword">this</span>.userMapper.update(<span class="keyword">null</span>, updateWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式二受影响的行数&quot;</span> + update2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBaseMapperMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 查询 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：T selectById(Serializable id);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据ID 批量查询） &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：ist&lt;T&gt; selectBatchIds(<span class="doctag">@Param</span>(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectBatchIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>));</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据 columnMap 条件 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：List&lt;T&gt; selectByMap(<span class="doctag">@Param</span>(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectByMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        <span class="comment">//根据map查询数据，多条件之间是and关系</span></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectByMap(map);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询一条记录 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：T selectOne(<span class="doctag">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//此方法如果查询出来多条数据会报错</span></span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.selectOne(wrapper);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询总记录数 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：Integer selectCount(<span class="doctag">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        Integer result = <span class="keyword">this</span>.userMapper.selectCount(wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;总条数：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：List&lt;T&gt; selectList(<span class="doctag">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        List&lt;User&gt; result = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        result.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 据 Wrapper 条件，查询全部记录&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：ist&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class="doctag">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectMaps</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//查询出来的结果已map形式返回</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = <span class="keyword">this</span>.userMapper.selectMaps(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; map : maps) &#123;</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;String,Object&gt; entry: map.entrySet())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;key:&quot;</span>+entry.getKey()+<span class="string">&quot;==&gt; value:&quot;</span>+entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 注意： 只返回第一个字段的值 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：List&lt;Object&gt; selectObjs(<span class="doctag">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectObjs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        List&lt;Object&gt; objects = <span class="keyword">this</span>.userMapper.selectObjs(wrapper);</span><br><span class="line">        objects.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录（并翻页） &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：&lt;E extends IPage&lt;T&gt;&gt; E selectPage(E page, <span class="doctag">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        Page&lt;User&gt; userPage = <span class="keyword">this</span>.userMapper.selectPage(page, wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;总条数：&quot;</span>+userPage.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;总页数：&quot;</span>+userPage.getPages());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前页数：&quot;</span>+userPage.getCurrent());</span><br><span class="line">        userPage.getRecords().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录（并翻页 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 方法：&lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; E selectMapsPage(E page, <span class="doctag">@Param</span>(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSelectMapsPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        IPage&lt;Map&lt;String, Object&gt;&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.userMapper.selectMapsPage(page, wrapper);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;总页数：&quot;</span> + page.getPages());</span><br><span class="line">        System.out.println(<span class="string">&quot;总记录数：&quot;</span> + page.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前页数：&quot;</span>+page.getCurrent());</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = page.getRecords();</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页配置"><a href="#分页配置" class="headerlink" title="分页配置"></a>分页配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.july.learn.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mybatis plus 新版分页 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 旧版本请查看官网</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> MybatisPlusInterceptor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h1><p>mp在启动后会将BaseMapper中的一系列的方法注入到meppedStatements中，注入的流程如下：</p><p>在mp中，ISqlinjector负责SQL的注入工作，它是一个接口，AbstractSqlinjector是它的实现类，实现关系如下：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210904184703823.png" alt="image-20210904184703823"></p><p>其中调用inject()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inspectInject</span><span class="params">(MapperBuilderAssistant builderAssistant, Class&lt;?&gt; mapperClass)</span> </span>&#123;</span><br><span class="line">       Class&lt;?&gt; modelClass = extractModelClass(mapperClass);</span><br><span class="line">       <span class="keyword">if</span> (modelClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">           String className = mapperClass.toString();</span><br><span class="line">           Set&lt;String&gt; mapperRegistryCache = GlobalConfigUtils.getMapperRegistryCache(builderAssistant.getConfiguration());</span><br><span class="line">           <span class="keyword">if</span> (!mapperRegistryCache.contains(className)) &#123;</span><br><span class="line">               List&lt;AbstractMethod&gt; methodList = <span class="keyword">this</span>.getMethodList(mapperClass);</span><br><span class="line">               <span class="keyword">if</span> (CollectionUtils.isNotEmpty(methodList)) &#123;</span><br><span class="line">                   TableInfo tableInfo = TableInfoHelper.initTableInfo(builderAssistant, modelClass);</span><br><span class="line">                   <span class="comment">// 循环注入自定义方法</span></span><br><span class="line">                   methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass, modelClass, tableInfo));</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   logger.debug(mapperClass.toString() + <span class="string">&quot;, No effective injection method was found.&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               mapperRegistryCache.add(className);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>inject方法</code>，通过<code>injectMappedStatement</code>自定义注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MapperBuilderAssistant builderAssistant, Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.configuration = builderAssistant.getConfiguration();</span><br><span class="line">    <span class="keyword">this</span>.builderAssistant = builderAssistant;</span><br><span class="line">    <span class="keyword">this</span>.languageDriver = configuration.getDefaultScriptingLanguageInstance();</span><br><span class="line">    <span class="comment">/* 注入自定义方法 */</span></span><br><span class="line">    injectMappedStatement(mapperClass, modelClass, tableInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>injectMappedStatement</code>实现类如下：</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210904185030787.png" alt="image-20210904185030787"></p><p>举例<code>SelectById</code>方法</p><p><img src="https://myiszhb-blog.oss-cn-beijing.aliyuncs.com/blog/image-20210904185458123.png" alt="image-20210904185458123"></p><p>它会先进入<code>selectById</code>方法，进行<code>SqlSource</code>的封装，最后添加到mybatis容器，最后就是调用了；</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="configLocation"><a href="#configLocation" class="headerlink" title="configLocation"></a>configLocation</h3><p>mybatis配置文件位置，如果你有单独的mybatis配置，将其通过配置的configLocation中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定全局的配置文件</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis-config.xml</span></span><br></pre></td></tr></table></figure><h3 id="mapperLocations"><a href="#mapperLocations" class="headerlink" title="mapperLocations"></a>mapperLocations</h3><p>mybatis mapper所对应的xml位置，如果你在mapper中有自定义方法，需要进行该配置，告诉mapper所对应的xml位置；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定mapper.xml文件路径</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mybatis/*.xml</span></span><br></pre></td></tr></table></figure><h3 id="typeAliasesPackage"><a href="#typeAliasesPackage" class="headerlink" title="typeAliasesPackage"></a>typeAliasesPackage</h3><p>mybatis别名扫描路径，通过该属性可以给包中的类注册别名，注册后再mapper对应的xml文件中可以直接使用类名，而不用使用全限定的类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 实体对象的扫描包</span><br><span class="line">mybatis-plus:</span><br><span class="line">  type-aliases-<span class="keyword">package</span>: com.july.learn.pojo</span><br></pre></td></tr></table></figure><h2 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h2><h3 id="mapUnderscoreToCamelCase"><a href="#mapUnderscoreToCamelCase" class="headerlink" title="mapUnderscoreToCamelCase"></a>mapUnderscoreToCamelCase</h3><p>是否开启自动驼峰命名规则映射，<code>mybatis中默认值是false，而mybatis plus中默认值是true</code>;</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认配置就是true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="cacheEnabled"><a href="#cacheEnabled" class="headerlink" title="cacheEnabled"></a>cacheEnabled</h3><p>全局的开启或者关闭配置文件中的所有映射器已经配置的任何缓存（二级缓存），默认为true；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="DB策略配置"><a href="#DB策略配置" class="headerlink" title="DB策略配置"></a>DB策略配置</h2><h3 id="IdType"><a href="#IdType" class="headerlink" title="IdType"></a>IdType</h3><p>全局默认主键类型，设置后，即可省略实体对象中的<code>@TableId(value = &quot;id&quot;,type = IdType.AUTO)</code>配置；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><p>有一些类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IdType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库ID自增</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;该类型请确保数据库设置了 ID自增 否则无效&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTO(<span class="number">0</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NONE(<span class="number">1</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户输入ID</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;该类型可以通过自己注册自动填充插件进行填充&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INPUT(<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 以下3种类型、只有当插入对象ID 为空，才自动填充。 */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分配ID (主键类型为number或string）,</span></span><br><span class="line"><span class="comment">     * 默认实现类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator&#125;(雪花算法)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.3.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ASSIGN_ID(<span class="number">3</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分配UUID (主键类型为 string)</span></span><br><span class="line"><span class="comment">     * 默认实现类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator&#125;(UUID.replace(&quot;-&quot;,&quot;&quot;))</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ASSIGN_UUID(<span class="number">4</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> 3.3.0 please use &#123;<span class="doctag">@link</span> #ASSIGN_ID&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    ID_WORKER(<span class="number">3</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> 3.3.0 please use &#123;<span class="doctag">@link</span> #ASSIGN_ID&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    ID_WORKER_STR(<span class="number">3</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> 3.3.0 please use &#123;<span class="doctag">@link</span> #ASSIGN_UUID&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    UUID(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> key;</span><br><span class="line"></span><br><span class="line">    IdType(<span class="keyword">int</span> key) &#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tablePrefix"><a href="#tablePrefix" class="headerlink" title="tablePrefix"></a>tablePrefix</h3><p>表名后缀，全局配置后可省略<code>@TableName()</code>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tb_</span></span><br></pre></td></tr></table></figure><p>例如：表名叫User，数据库对应的就是<code>tb_user</code>;</p>]]></content>
    
    
    <summary type="html">mybatis-plus</summary>
    
    
    
    <category term="mybatis-plus" scheme="https://www.isfate.xyz/categories/mybatis-plus/"/>
    
    
    <category term="mybatis-plus" scheme="https://www.isfate.xyz/tags/mybatis-plus/"/>
    
  </entry>
  
  <entry>
    <title>juc</title>
    <link href="https://www.isfate.xyz/article/3cf22ab5.html"/>
    <id>https://www.isfate.xyz/article/3cf22ab5.html</id>
    <published>2021-01-04T14:06:33.000Z</published>
    <updated>2022-01-27T14:50:10.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是JUC"><a href="#什么是JUC" class="headerlink" title="什么是JUC"></a>什么是JUC</h1><p>java.util.concurrent在并发编程中使用的工具类</p><h1 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h1><p>进程是要给应用程序。<br>线程是一个进程中的一个执行单元。<br>一个进程可以有多个线程。  </p><h1 id="Synchronized和Lock区别"><a href="#Synchronized和Lock区别" class="headerlink" title="Synchronized和Lock区别"></a>Synchronized和Lock区别</h1><ol><li>Synchronized内置的Java关键字，Lock是一个Java类</li><li>Synchronized无法判断获取锁的状态，Lock 可以判断是否获取到锁</li><li>Synchronized会自动释放锁，Lock必须手动释放锁！如果没有释放锁会造成<code>死锁</code></li><li>Synchronized 线程1(获得锁，阻塞)，线程2(一直等待)，Lock锁就不会一直等待。</li><li>Synchronized可重入锁，不可以中断的，非公平；Lock可重入锁，可以判断锁，非公平（可以自己设置，默认非公平）</li><li>Synchronized适合锁少量的代码同步问题，Lock适合锁大量的同步代码块。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单的Lock代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">50</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();<span class="comment">//默认不公平锁 true 公平  false 不公平</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sava</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(name+<span class="string">&quot; 购买了,当前剩余数量：&quot;</span>+(num--));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">                user.sava(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">                user.sava(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">                user.sava(<span class="string">&quot;小猪&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">小王 购买了,当前剩余数量：<span class="number">50</span></span><br><span class="line">小猪 购买了,当前剩余数量：<span class="number">49</span></span><br><span class="line">小猪 购买了,当前剩余数量：<span class="number">48</span></span><br><span class="line">小猪 购买了,当前剩余数量：<span class="number">47</span></span><br><span class="line">小猪 购买了,当前剩余数量：<span class="number">46</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h1 id="生产者和消费者问题"><a href="#生产者和消费者问题" class="headerlink" title="生产者和消费者问题"></a>生产者和消费者问题</h1><blockquote><p>synchronized版本（以下代码还是存在线程安全问题）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断等待，业务，通知</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//+1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number ++ ;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&gt;&quot;</span>+number);</span><br><span class="line">        <span class="comment">//通知其他线程我加完了</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&gt;&quot;</span>+number);</span><br><span class="line">        <span class="comment">//通知其他线程我减完了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码在只要2个线程（A,B）的情况不会出现问题，如果在加（C,D）两个线程会出现是问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A==&gt;&gt;<span class="number">6</span></span><br><span class="line">C==&gt;&gt;<span class="number">7</span></span><br><span class="line">A==&gt;&gt;<span class="number">8</span></span><br><span class="line">D==&gt;&gt;<span class="number">7</span></span><br><span class="line">C==&gt;&gt;<span class="number">8</span></span><br></pre></td></tr></table></figure><p><code>线程也可以被唤醒，而不会被通知，中断或者超时，这种情况被称为虚假唤醒，所以这里应该把if判断改为while循环</code></p><p><code>因为if判断只判断一次，而while判断会等待</code></p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201214171351.png" alt="img"></p><blockquote><p>Lock版本（其中lock替代synchronized ，Condition取代了对象监视器）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                data.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                data.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                data.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                data.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断等待，业务，通知</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//创建lock锁（lock替代了synchronized）</span></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">//创建监视器（Condition替代了同步监视器）</span></span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//+1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number ++ ;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&gt;&quot;</span>+number);</span><br><span class="line">            <span class="comment">//通知其他线程我加完了</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//必须关闭不然会出现死锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number -- ;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&gt;&quot;</span>+number);</span><br><span class="line">            <span class="comment">//通知其他线程我加完了</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Condition 如何精准的通知和唤醒线程（A-&gt;B-&gt;C-&gt;D）</p></blockquote><p>通过创建多个Condition 来实现精准的通知和唤醒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                data.condition1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                data.condition2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                data.condition3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition1 = lock.newCondition();</span><br><span class="line">    Condition condition2 = lock.newCondition();</span><br><span class="line">    Condition condition3 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">condition1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">1</span>)&#123;</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;===&gt;&gt;&gt;AAAAA&quot;</span>);</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">condition2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">2</span>)&#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;===&gt;&gt;&gt;BBBBB&quot;</span>);</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">condition3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">3</span>)&#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number=<span class="number">1</span>;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;===&gt;&gt;&gt;CCCCC&quot;</span>);</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8锁现象"><a href="#8锁现象" class="headerlink" title="8锁现象"></a>8锁现象</h1><blockquote><p>此处synchronized锁的是方法的调用者，sendSms()和call()两个方法用的是同一把锁,谁先拿到谁先执行</p></blockquote><p><code>TimeUnit.SECONDS.sleep(1)不管放在方法里还是线程A和线程B之间 它的执行结果都是一样的</code></p><ol><li>一个对象，两个同步方法块，睡眠放在线程A和线程B之间</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="comment">//synchronized 锁的是方法的调用者</span></span><br><span class="line">    <span class="comment">//两个方法用的是同一把锁,谁先拿到谁先执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>一个对象，两个同步方法块，睡眠放在同步方法里</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="comment">//synchronized 锁的是方法的调用者</span></span><br><span class="line">    <span class="comment">//两个方法用的是同一把锁,谁先拿到谁先执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">发短信</span><br><span class="line">打电话</span><br></pre></td></tr></table></figure><blockquote><p>hello()方法没有synchronized关键字，所以不受影响正常输出</p></blockquote><ol><li>一个对象，两个同步方法块，一个普通方法（随机）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone2 phone = <span class="keyword">new</span> Phone2();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone.hello();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//hello没有synchronized关键字所以不受影响</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为是2个对象调用方法，锁的不是同一个对象，sendSms()睡了1秒，所以先输出打电话，在输出发短信，如果没有睡眠，就是随机的。</p></blockquote><ol><li>两个对象，两个同步方法块（随机）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone2 phone1 = <span class="keyword">new</span> Phone2();</span><br><span class="line">        Phone2 phone2 = <span class="keyword">new</span> Phone2();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone1.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone2.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为sendSms()和call()方法都是static修饰的，所以类一加载就有了，实际这里锁的是class模版</p></blockquote><ol><li>增加两个静态的同步方法，只有一个对象（先输出发短信）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone3 phone = <span class="keyword">new</span> Phone3();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone3</span></span>&#123;</span><br><span class="line">    <span class="comment">//synchronized 锁的是对象</span></span><br><span class="line">    <span class="comment">//因为是static修饰的，所以类一加载就有了，实际这里锁的是class模版</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>两个对象，两个静态的同步方法 （随机）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone3 phone1 = <span class="keyword">new</span> Phone3();</span><br><span class="line">        Phone3 phone2 = <span class="keyword">new</span> Phone3();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone1.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone2.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone3</span></span>&#123;</span><br><span class="line">    <span class="comment">//synchronized 锁的是对象</span></span><br><span class="line">    <span class="comment">//因为是static修饰的，所以类一加载就有了，实际这里锁的是class模版</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果同一个对象调用对象的一个非静态同步方法与同步方法，此时会出现两把锁，一个是类锁，一个是对象调用者锁</p></blockquote><ol><li>一个静态的同步方法，一个非静态的同步方法（随机）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone3 phone = <span class="keyword">new</span> Phone3();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone3</span></span>&#123;</span><br><span class="line">    <span class="comment">//static修饰的方法锁的实际上是class模版</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span>   </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//正常情况下锁的是方法的调用者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">发短信</span><br><span class="line">打电话</span><br></pre></td></tr></table></figure><ol><li>两个不同的对象，一个静态同步方法块，一个非静态同步方法块（随机）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone3 phone1 = <span class="keyword">new</span> Phone3();</span><br><span class="line">        Phone3 phone2 = <span class="keyword">new</span> Phone3();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone1.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            phone2.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span>   </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">结果随机</span><br></pre></td></tr></table></figure><blockquote><p>总结</p></blockquote><ol><li>new,this 具体的一个对象（对象锁）</li><li>static 唯一的（class锁，类锁）</li></ol><h1 id="集合类不安全"><a href="#集合类不安全" class="headerlink" title="集合类不安全"></a>集合类不安全</h1><blockquote><p>List</p></blockquote><p>并发情况下往ArrayList写入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会出现 java.util.ConcurrentModificationException 并发修改异常</span></span><br></pre></td></tr></table></figure><p>解决方法</p><ol><li><code>List&lt;String&gt; list = new Vector&lt;&gt;()</code>不建议用，因为底层是synchronized修饰的效率低</li><li><code>List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;())</code></li><li><code>List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();juc下面的CopyOnWriteArrayList方法</code><ol><li><code>CopyOnWrite</code> 写入时复制，简称COW 计算机设计领域的一种优化策略。</li><li>多个线程调用的时候，list读取的时候，固定的，写入会出现覆盖，所以写入数据前会先复制原有数据，避免造成数据问</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Set (与list差不多)</p></blockquote><p>解决办法</p><ol><li><code>Collections.synchronizedSet(new HashSet&lt;&gt;())</code></li><li><code>Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;()</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HashSet底层其实就是HashMap的key</code></p><blockquote><p>Map</p></blockquote><p>解决办法</p><ol><li><code>Collections.synchronizedMap(new HashMap&lt;&gt;())</code></li><li><code>Map&lt;String,String&gt; map = new ConcurrentHashMap&lt;&gt;()</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                map.put(Thread.currentThread().getName(),UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Map默认的两个参数为加载因子0.75f，初始容量1&lt;&lt;4（16）</code></p><h1 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h1><h2 id="什么是Callable"><a href="#什么是Callable" class="headerlink" title="什么是Callable"></a>什么是Callable</h2><p><code>Callable</code>接口类似于<code>Runnable</code>，因为它们都是为其实例可能由另一个线程执行的类设计的。 然而，<code>Runnable</code>不返回结果，也不能抛出被检查的异常，<code>Callable</code>能返回结果也可以抛出异常。</p><h2 id="怎么启动Callable"><a href="#怎么启动Callable" class="headerlink" title="怎么启动Callable"></a>怎么启动Callable</h2><p>通过FutureTask，FutureTask的本质就是Runnable，因为Runnable实现了FutureTask</p><p>FutureTask.get()方法可能会造成阻塞，因为这里会去等待线程的执行，可以通过异步的方式解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//FutureTask的本质就是Runnable,FutureTask是一个适配器，来适配Callable</span></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        FutureTask myThreadFutureTask = <span class="keyword">new</span> FutureTask(myThread);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(myThreadFutureTask,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="comment">//这里会有缓存，所以执行结果之会输出一次</span></span><br><span class="line">        <span class="keyword">new</span> Thread(myThreadFutureTask,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="comment">//这里通过FutureTask.get()方法可以获取到Callable的返回值</span></span><br><span class="line">        Object o = myThreadFutureTask.get();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">call()</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h1 id="常用的辅助类"><a href="#常用的辅助类" class="headerlink" title="常用的辅助类"></a>常用的辅助类</h1><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>定义：可以直接理解为一个减法计数器</p><p>用法：<code>CountDownLatch</code>用给定的<em>计数</em>初始化。 <code>await</code>方法阻塞，直到由于<code>countDown()</code>方法的调用而导致当前计数达到零，之后所有等待线程被释放，并且任何后续的<code>await</code>调用立即返回。这是一个一次性的现象 - 计数无法重置。 如果您需要重置计数的版本，请考虑使用<code>CyclicBarrier</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">3</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="comment">//-1操作</span></span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;出去了&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//阻塞，直到线程执行完毕</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;出去完了，可以关门了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line"><span class="number">1</span>出去了</span><br><span class="line"><span class="number">3</span>出去了</span><br><span class="line"><span class="number">2</span>出去了</span><br><span class="line">出去完了，可以关门了</span><br></pre></td></tr></table></figure><p>理解：</p><pre><code>` countDownLatch.countDown()`每次调用减1`countDownLatch.await()`等待计数器归零，然后才往下继续执行。</code></pre><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>定义：可以理解为一个加法计数器</p><p>用法：CyclicBarrier支持一格可选的<code>Runnable</code>命令，每个屏障点运行一次，在派对在的最后一格线程到达之后，但在任何线程释放之前，在任何一方继续进行之前，此屏障点操作对更新共享状态很有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">10</span>,() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小明有10元钱，可以打游戏了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小明现在&quot;</span>+temp+<span class="string">&quot;元,还不能打游戏&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//cyclicBarrier.await()会一直阻塞直到值为10的时候，才会去执行， System.out.println(&quot;小明有10元钱，可以打游戏了&quot;);这个线程</span></span><br><span class="line">                    <span class="comment">//如果这里循环9次，它会一直阻塞在这里。</span></span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">小明现在<span class="number">1</span>元,还不能打游戏</span><br><span class="line">小明现在<span class="number">4</span>元,还不能打游戏</span><br><span class="line">小明现在<span class="number">3</span>元,还不能打游戏</span><br><span class="line">小明现在<span class="number">2</span>元,还不能打游戏</span><br><span class="line">小明现在<span class="number">6</span>元,还不能打游戏</span><br><span class="line">小明现在<span class="number">5</span>元,还不能打游戏</span><br><span class="line">小明现在<span class="number">7</span>元,还不能打游戏</span><br><span class="line">小明现在<span class="number">8</span>元,还不能打游戏</span><br><span class="line">小明现在<span class="number">9</span>元,还不能打游戏</span><br><span class="line">小明现在<span class="number">10</span>元,还不能打游戏</span><br><span class="line">小明有<span class="number">10</span>元钱，可以打游戏了</span><br></pre></td></tr></table></figure><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>定义：相当于信号量</p><p>用法：一个个计数信号量。 在概念上，信号量维持一组许可证。 如果有必要，每个<code>acquire()</code>都会阻塞，直到许可证可用，然后才能使用它。 每个<code>release()</code>添加许可证，潜在地释放阻塞获取方。 但是，没有使用实际的许可证对象; Semaphore只保留可用数量的计数，并相应地执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//例子：打游戏，一共2台电脑,但是有4个人想玩</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这个参数表示最大2个线程数</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//获得</span></span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;号小朋友，抢到了电脑可以完游戏了&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;号小朋友，玩了5秒钟，被他妈妈叫走了&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放</span></span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line"><span class="number">1</span>号小朋友，抢到了电脑可以完游戏了</span><br><span class="line"><span class="number">3</span>号小朋友，抢到了电脑可以完游戏了</span><br><span class="line"><span class="number">3</span>号小朋友，玩了<span class="number">5</span>秒钟，被他妈妈叫走了</span><br><span class="line"><span class="number">1</span>号小朋友，玩了<span class="number">5</span>秒钟，被他妈妈叫走了</span><br><span class="line"><span class="number">2</span>号小朋友，抢到了电脑可以完游戏了</span><br><span class="line"><span class="number">4</span>号小朋友，抢到了电脑可以完游戏了</span><br><span class="line"><span class="number">2</span>号小朋友，玩了<span class="number">5</span>秒钟，被他妈妈叫走了</span><br><span class="line"><span class="number">4</span>号小朋友，玩了<span class="number">5</span>秒钟，被他妈妈叫走了</span><br></pre></td></tr></table></figure><p>理解：</p><pre><code>`semaphore.acquire()`会获取线程，如果线程满了，它会等待线程释放，然后在去获取。（相当于减1）` semaphore.release()`释放线程,然后唤醒等待的线程。（相当于加1）</code></pre><p>作用：</p><pre><code>多个共享资源互斥的时候使用并发限流，保证最大线程数</code></pre><h1 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h1><blockquote><p>ReadWriteLock</p></blockquote><p>ReadWriteLock维护一堆关联的locks，一个用于只读操作，一个用于写入操作，read lock可以有多个线程同时进行，write lock只有一个。</p><p>读锁也叫<code>共享锁</code>（一次可以多个线程共享）</p><p>写锁也叫<code>独占锁</code>,<code>排它锁</code>（一次只能一个线程独有）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCache myCache = <span class="keyword">new</span> MyCache();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                myCache.put(temp+<span class="string">&quot;&quot;</span>,temp+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                myCache.get(temp+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//获取读写锁</span></span><br><span class="line">    <span class="keyword">private</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取写锁</span></span><br><span class="line">        readWriteLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程,写入&quot;</span>+key);</span><br><span class="line">            Object o = map.put(key,value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程,写入完毕&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭写锁</span></span><br><span class="line">            readWriteLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取读锁</span></span><br><span class="line">        readWriteLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程,读取&quot;</span>+key);</span><br><span class="line">            Object o = map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程,读取完毕&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭锁</span></span><br><span class="line">            readWriteLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><p><code>BlockingQueue</code>常用的实现类：<code>ArrayBlockingQueue</code>,<code>LinkedBlockingQueue</code>,<code>SynchronousQueue</code></p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201216175649.png" alt="image-20201216175639630"></p><p><code>什么情况下会使用阻塞队列：多线程并发处理，线程池</code></p><p><code>队列是先去先出</code></p><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><blockquote><p>四组API</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">抛出异常</th><th style="text-align:center">有返回值，不抛出异常</th><th style="text-align:center">阻塞等待</th><th style="text-align:center">超时等待</th></tr></thead><tbody><tr><td style="text-align:center">添加</td><td style="text-align:center">add()</td><td style="text-align:center">offer()[E e]</td><td style="text-align:center">put()</td><td style="text-align:center">offer()[E e, long timeout, TimeUnit unit]</td></tr><tr><td style="text-align:center">移除</td><td style="text-align:center">remove()</td><td style="text-align:center">poll()</td><td style="text-align:center">take()</td><td style="text-align:center">poll()[long timeout, TimeUnit unit]</td></tr><tr><td style="text-align:center">检查队列首元素</td><td style="text-align:center">element()</td><td style="text-align:center">peek()</td><td style="text-align:center"></td></tr></tbody></table></div><ol><li>抛出异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建array队列，给定大小3</span></span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    System.out.println(queue.add(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    System.out.println(queue.add(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">    System.out.println(queue.add(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">    <span class="comment">//添加第四个抛出异常，java.lang.IllegalStateException: Queue full 队列已满</span></span><br><span class="line">    <span class="comment">//System.out.println(queue.add(&quot;4&quot;));</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//检查队首</span></span><br><span class="line">    System.out.println(queue.element());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除元素</span></span><br><span class="line">    System.out.println(queue.remove());</span><br><span class="line">    System.out.println(queue.remove());</span><br><span class="line">    System.out.println(queue.remove());</span><br><span class="line">    <span class="comment">//移除第四个抛出异常，java.util.NoSuchElementException 队列已空</span></span><br><span class="line">    <span class="comment">//System.out.println(queue.remove());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>有返回值，不抛出异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建array队列，给定大小3</span></span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    System.out.println(queue.offer(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    System.out.println(queue.offer(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">    System.out.println(queue.offer(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">    <span class="comment">//返回false，不会抛出异常</span></span><br><span class="line">    System.out.println(queue.offer(<span class="string">&quot;4&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查队首</span></span><br><span class="line">    System.out.println(queue.peek());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//移除元素</span></span><br><span class="line">    System.out.println(queue.poll());</span><br><span class="line">    System.out.println(queue.poll());</span><br><span class="line">    System.out.println(queue.poll());</span><br><span class="line">    <span class="comment">//返回null，不会抛出异常</span></span><br><span class="line">    System.out.println(queue.poll());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>阻塞等待</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//创建array队列，给定大小3</span></span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    queue.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    queue.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    queue.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    <span class="comment">//当第四往里存的时候会一直等待(阻塞)</span></span><br><span class="line">    queue.put(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除元素</span></span><br><span class="line">    System.out.println(queue.take());</span><br><span class="line">    System.out.println(queue.take());</span><br><span class="line">    System.out.println(queue.take());</span><br><span class="line">    <span class="comment">//当里面没有元素的时候，在去取，它会一直等待(阻塞)</span></span><br><span class="line">    System.out.println(queue.take());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>超时等待</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//创建array队列，给定大小3</span></span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    System.out.println(queue.offer(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    System.out.println(queue.offer(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">    System.out.println(queue.offer(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">    <span class="comment">//添加第四个元素等待3秒，如果3秒过后还没位子，就自动退出</span></span><br><span class="line">    System.out.println(queue.offer(<span class="string">&quot;4&quot;</span>,<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    System.out.println(queue.peek());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除元素</span></span><br><span class="line">    System.out.println(queue.poll());</span><br><span class="line">    System.out.println(queue.poll());</span><br><span class="line">    System.out.println(queue.poll());</span><br><span class="line">    <span class="comment">//移除，也是同理 先等待3秒，有就移除，3秒过后自动退出</span></span><br><span class="line">    System.out.println(queue.poll(<span class="number">3</span>,TimeUnit.SECONDS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SynchronousQueue同步队列"><a href="#SynchronousQueue同步队列" class="headerlink" title="SynchronousQueue同步队列"></a>SynchronousQueue同步队列</h2><p><code>这个队列容量为1，进入一个元素之后，必选把这个元素取出来才能继续存</code>,对应的存是<code>put()</code>,取是<code>take()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SynchronousQueue&lt;String&gt; synchronousQueue = <span class="keyword">new</span> SynchronousQueue&lt;String&gt;();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程写入==&gt;&gt;&quot;</span>+<span class="number">1</span>);</span><br><span class="line">                synchronousQueue.put(<span class="number">1</span>+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程写入==&gt;&gt;&quot;</span>+<span class="number">2</span>);</span><br><span class="line">                synchronousQueue.put(<span class="number">2</span>+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程写入==&gt;&gt;&quot;</span>+<span class="number">3</span>);</span><br><span class="line">                synchronousQueue.put(<span class="number">3</span>+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程取出==&gt;&gt;&quot;</span>+synchronousQueue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程取出==&gt;&gt;&quot;</span>+synchronousQueue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程取出==&gt;&gt;&quot;</span>+synchronousQueue.take());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">A线程写入==&gt;&gt;<span class="number">1</span></span><br><span class="line">B线程取出==&gt;&gt;<span class="number">1</span></span><br><span class="line">A线程写入==&gt;&gt;<span class="number">2</span></span><br><span class="line">B线程取出==&gt;&gt;<span class="number">2</span></span><br><span class="line">A线程写入==&gt;&gt;<span class="number">3</span></span><br><span class="line">B线程取出==&gt;&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="线程池-重要"><a href="#线程池-重要" class="headerlink" title="线程池(重要)"></a>线程池(重要)</h1><blockquote><p>池化技术</p></blockquote><p>程序的运行会占用系统的资源,优化资源的使用称之为<code>池化技术</code>，如：线程池、内存池、对象池等等</p><p>如果平凡的创建、销毁非常浪费资源。</p><p><code>池化技术：就是事先准备好一些资源，有人要用，就直接在这里拿，用完之后在换回来</code></p><blockquote><p>线程池的好处</p></blockquote><ol><li>降低资源的消耗</li><li>提高响应的速度</li><li>方便管理</li></ol><p><code>总结：线程可复用，可以控制最大并发数，可以管理线程</code></p><blockquote><p>线程池——三大方法</p></blockquote><ol><li><code>Executors.newSingleThreadExecutor()</code>单个线程</li><li><code>Executors.newFixedThreadPool(3)</code>自定义最大线程数</li><li><code>Executors.newCachedThreadPool()</code>可伸缩的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService service1 = Executors.newSingleThreadExecutor();</span><br><span class="line">    ExecutorService service2 = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">    ExecutorService service3 = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            service1.execute(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        service1.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>线程池——七大参数</p></blockquote><p>三大方法的底层都调用的是：<code>ThreadPoolExecutor</code></p><ol><li><code>int corePoolSize</code> ——&gt; 核心线程池大小</li><li><code>int maximumPoolSize</code> ——&gt; 最大核心线程池大小</li><li><code>long keepAliveTime</code> ——&gt; 超时时间，如果超时了，自动释放</li><li><code>TimeUnit unit</code> ——&gt; 超时单位</li><li><code>BlockingQueue&lt;Runnable&gt; workQueue</code> ——&gt; 阻塞队列</li><li><code>ThreadFactory threadFactory</code> ——&gt; 线程工厂，创建线程使用，一般不用动</li><li><code>RejectedExecutionHandler handler</code> ——&gt; 拒绝策略</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">           (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                   <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                     <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                     <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                     <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                     <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, //核心线程池大小</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> maximumPoolSize,//最大核心线程池大小</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">long</span> keepAliveTime,//超时时间，如果超时了，自动释放</span></span></span><br><span class="line"><span class="params"><span class="function">                             TimeUnit unit,//超时单位</span></span></span><br><span class="line"><span class="params"><span class="function">                             BlockingQueue&lt;Runnable&gt; workQueue,//阻塞队列</span></span></span><br><span class="line"><span class="params"><span class="function">                             ThreadFactory threadFactory,//线程工厂，创建线程使用，一般不用动</span></span></span><br><span class="line"><span class="params"><span class="function">                             RejectedExecutionHandler handler)</span> <span class="comment">//拒绝策略</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">           keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">       <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">       <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">       <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">       <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">       <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">       <span class="keyword">this</span>.handler = handler;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义线程池</p></blockquote><p>i&lt;=4,有2个线程在执行，因为队列未满</p><p>i&lt;=5,有2个线程在执行，因为队列未满</p><p>i&lt;=6,有3个线程在执行，因为队列已满</p><p>i&lt;=7,有4个线程在执行，因为队列已满</p><p>i&lt;=8,有5个线程在执行，因为队列已满</p><p>i&lt;=9,报错 因为已经超出最大承载了，最大承载为5+3（最大核心线程数+队列容量）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService service1 = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            <span class="number">2</span>,<span class="comment">//核心线程2</span></span><br><span class="line">            <span class="number">5</span>,<span class="comment">//最大核心线程5</span></span><br><span class="line">            <span class="number">3</span>,<span class="comment">//等待时长3秒</span></span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">3</span>),<span class="comment">//队列容量3</span></span><br><span class="line">            Executors.defaultThreadFactory(),</span><br><span class="line">            <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy()<span class="comment">//表示如果队列满了，还有人进来，就不处理，抛出异常</span></span><br><span class="line">            );</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//最大承载Deque+maximumPoolSize(最大核心线程)</span></span><br><span class="line">        <span class="comment">//如果超出就会报错java.util.concurrent.RejectedExecutionException</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">9</span> ; i++) &#123;</span><br><span class="line">            service1.execute(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        service1.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>四种拒绝策略</p></blockquote><ol><li><code>new ThreadPoolExecutor.AbortPolicy()</code>——&gt; 表示如果队列满了，还有人进来，就不处理，抛出异常</li><li><code>new ThreadPoolExecutor.CallerRunsPolicy()</code>——&gt; 哪里来的就回哪里去，如果是main线程来的就回main线程</li><li><code>new ThreadPoolExecutor.DiscardOldestPolicy()</code>——&gt; 如果队列满了，它会尝试和最早的竞争，如果成功，就会执行，如果失败，就会被抛弃，也不会抛出异常</li><li><code>new ThreadPoolExecutor.DiscardPolicy()</code>——&gt; 如果队列满了就会丢掉任务，不会抛出异常</li></ol><blockquote><p>如何去设置线程池最大的大小</p></blockquote><ol><li><code>CPU密集型</code>，电脑几核，就是几核，可以保证CPU的效率最高！</li><li><code>IO密集型</code>，判断你程序中十分消耗IO的线程，只要大于就可以</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取CPU的核数 </span></span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure><h1 id="四大函数式接口-重要"><a href="#四大函数式接口-重要" class="headerlink" title="四大函数式接口(重要)"></a>四大函数式接口(重要)</h1><blockquote><p>函数式接口—&gt;只有一个方法的接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简化编程模型，在新版本的框架底层大量使用</span></span><br></pre></td></tr></table></figure><p>四大函数式接口：<code>Consumer</code>、<code>Function</code>、<code>Predicate</code>、<code>Supplier</code></p><ol><li>Function</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function函数接口，有一个输入参数，有一个输出</span></span><br><span class="line"><span class="comment">//只要是函数型接口都可以通过lambda表达是简化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Function&lt;String,String&gt; function = str -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(function.apply(<span class="string">&quot;231&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">231</span></span><br></pre></td></tr></table></figure><ol><li>Predicate（断定型接口）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Predicate函数接口，有一个输入参数，会固定返回一个boolean值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Predicate&lt;String&gt; predicate = (str)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> str.equals(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(predicate.test(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><ol><li>Consumer(消费型接口)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Consumer 消费型接口，只有输入，没有返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = str -&gt; &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer.accept(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Supplier(生产型接口)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Supplier 生产型接口，没有输入，只有返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Supplier&lt;String&gt; supplier = () -&gt;&#123;</span><br><span class="line">          <span class="keyword">return</span> String.valueOf(<span class="number">1024</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">1024</span></span><br></pre></td></tr></table></figure><h1 id="Stream流式计算"><a href="#Stream流式计算" class="headerlink" title="Stream流式计算"></a>Stream流式计算</h1><blockquote><p>什么是Stream流式计算</p></blockquote><p>存储+计算，集合、Mysql本质就是存储东西的，计算机应该交给流来操作！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一分钟内完成此题，只能用一行代码实现</span></span><br><span class="line"><span class="comment">     * 现在有5个用户，筛选：</span></span><br><span class="line"><span class="comment">     * 1. ID 必须是偶数</span></span><br><span class="line"><span class="comment">     * 2. 年龄必须大于23岁</span></span><br><span class="line"><span class="comment">     * 3. 用户名转大写字母</span></span><br><span class="line"><span class="comment">     * 4. 用户名字母倒序</span></span><br><span class="line"><span class="comment">     * 5. 只输出一个用户！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">&quot;b&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">&quot;c&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">&quot;d&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        User u5 = <span class="keyword">new</span> User(<span class="number">6</span>,<span class="string">&quot;e&quot;</span>,<span class="number">25</span>);</span><br><span class="line">        List&lt;User&gt; list = Arrays.asList(u1, u2, u3, u4, u5);</span><br><span class="line">        <span class="comment">//链式计算</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(u-&gt;&#123;<span class="keyword">return</span> u.getId()%<span class="number">2</span>==<span class="number">0</span>;&#125;)</span><br><span class="line">                .filter(u-&gt;&#123;<span class="keyword">return</span> u.getAge()&gt;<span class="number">23</span>;&#125;)</span><br><span class="line">                .map(u-&gt;&#123;<span class="keyword">return</span> u.getName().toUpperCase();&#125;)</span><br><span class="line">                .sorted((uu1,uu2)-&gt;&#123;<span class="keyword">return</span> uu2.compareTo(uu1);&#125;)</span><br><span class="line">                .limit(<span class="number">1</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h1><blockquote><p>什么是ForkJoin</p></blockquote><p>ForkJoin在JDK1.7，并行执行任务！提高效率，在数据量很大的情况下。</p><p>ForkJoin会把一个大数据量的东西，拆分成小的，如果还是很大，它会继续拆分，每一个小模块都会有一个结果，最后把这些结果汇总。</p><blockquote><p>ForkJoin特点：工作窃取</p></blockquote><p>多线程下如果一个线程做完了该做的，它会把其他线程没做的窃取过来自己做，不然线程等待。这里面维护的都是<code>双端队列</code></p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201221165358.png" alt=""></p><blockquote><p>ForkJoin的使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinDemo</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long start;</span><br><span class="line">    <span class="keyword">private</span> Long end;</span><br><span class="line">    <span class="comment">//临界值</span></span><br><span class="line">    <span class="keyword">private</span> Long temp=<span class="number">20_0000_0000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinDemo</span><span class="params">(Long start, Long end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((end-start)&lt;temp)&#123;</span><br><span class="line">            Long sum = <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">for</span> (Long i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//中间值</span></span><br><span class="line">            <span class="keyword">long</span> middle = (start+end)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            ForkJoinDemo task1 = <span class="keyword">new</span> ForkJoinDemo(start,middle);</span><br><span class="line">            task1.fork();<span class="comment">//拆分任务，把任务压入线程队列</span></span><br><span class="line">            ForkJoinDemo task2 = <span class="keyword">new</span> ForkJoinDemo(middle+<span class="number">1</span>,end);</span><br><span class="line">            task2.fork();</span><br><span class="line">            <span class="keyword">return</span> task1.join()+task2.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        test1();</span><br><span class="line">        test2();</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Long sum = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Long i = <span class="number">1L</span>; i &lt;= <span class="number">10_0000_0000</span> ; i++) &#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span>+sum+<span class="string">&quot;---&gt;&gt;&gt;耗时&quot;</span> +(end-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用forkjoin</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> ForkJoinDemo(<span class="number">0L</span>,<span class="number">10_0000_0000L</span>);</span><br><span class="line">        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task);</span><br><span class="line">        Long sum = submit.get();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span>+sum+<span class="string">&quot;---&gt;&gt;&gt;耗时&quot;</span> +(end-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Stream 并行流</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> sum = LongStream.rangeClosed(<span class="number">0L</span>, <span class="number">10_0000_0000L</span>).parallel().reduce(<span class="number">0</span>, Long::sum);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span>+sum+<span class="string">&quot;---&gt;&gt;&gt;耗时&quot;</span> +(end-start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试结果：</span><br><span class="line">sum=<span class="number">500000000500000000</span>---&gt;&gt;&gt;耗时<span class="number">7018</span></span><br><span class="line">sum=<span class="number">500000000500000000</span>---&gt;&gt;&gt;耗时<span class="number">6157</span></span><br><span class="line">sum=<span class="number">500000000500000000</span>---&gt;&gt;&gt;耗时<span class="number">203</span></span><br></pre></td></tr></table></figure><h1 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h1><blockquote><p>Future设计初衷：对将来的某个事件的结果进行建模</p></blockquote><ol><li>没有返回的异步</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;异步回调&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;我先输出....&quot;</span>);</span><br><span class="line">        <span class="comment">//这里会阻塞等待结果返回</span></span><br><span class="line">        completableFuture.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">执行结果：</span><br><span class="line">我先输出....</span><br><span class="line">异步回调   </span><br></pre></td></tr></table></figure><ol><li>有返回的异步</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">400</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(</span><br><span class="line">                future.whenComplete((aVoid, throwable) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;aVoid=&gt;&quot;</span>+aVoid);<span class="comment">//这里如果是正确就会是正确的返回值，如果错误就为null</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;throwable=&gt;&quot;</span>+throwable);<span class="comment">//如果有错误 这里输出错误</span></span><br><span class="line">                &#125;).exceptionally(e -&gt; &#123;</span><br><span class="line">                    e.getMessage(); <span class="comment">//可以捕获错误</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">                &#125;).get()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">正确执行结果：</span><br><span class="line">aVoid=&gt;<span class="number">400</span></span><br><span class="line">throwable=&gt;<span class="keyword">null</span></span><br><span class="line"><span class="number">400</span></span><br><span class="line">    </span><br><span class="line">错误执行结果：</span><br><span class="line">aVoid=&gt;<span class="keyword">null</span></span><br><span class="line">throwable=&gt;java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span><br><span class="line"><span class="number">500</span>    </span><br></pre></td></tr></table></figure><h1 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h1><blockquote><p>什么是JMM（JMM就是为了保证线程安全）</p></blockquote><p>JMM是Java内存模型，不存在的东西，相当于概念，约定！</p><p><strong>关于JMM的一些同步约定</strong></p><p>1、线程解锁前，<code>必须把共享变量立刻刷回主内存</code>。</p><p>2、线程加锁前，必须读取主内存当中的最新值到工作内存中！</p><p>3、加锁和解锁必须是同一把锁。</p><p><strong>线程：工作内存、主内存</strong></p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201222104707.png" alt=""></p><blockquote><p>在JMM中有8种操作</p></blockquote><ul><li>lock(锁定)：作用于主内存的变量，把一个变量标识为线程独占状态。</li><li>unlock(解锁)：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才能被其他线程锁定。</li><li>read(读取)：作用于主内存变量，它把一个变量从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li>load(载入)：作用于工作内存中的变量，它把read操作从主内存中变量放入工作内存中。</li><li>use(使用)：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每个虚拟机遇到一个需要使用的变量的值，就会执行这个指令。</li><li>assign(赋值/返还)：作用于工作内存中的变量，它把一个从执行引擎接收到的值放入工作内存的变量副本中。</li><li>store(存储)：作用于主内存中的变量，它把一个从工作内存中的变量的值传送到主内存中，以便后续write使用。</li><li>write(写入)：作用于主内存中的变量，它把store操作从工作内存中获取的变量的值，放入主内存的变量中</li></ul><blockquote><p>JMM对这八种指令的使用，指定了对应的规则</p></blockquote><ul><li>不允许read和load、store和write操作之一单独出现，即使用read就必须load，使用了store就必须write。</li><li>不允许线程丢弃它最近的assign操作，即工作变量的数据改变之后，必须告知主内存。</li><li>不允许一个线程将没用assign的数据从工作内存同步会主内存。</li><li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量，就是对变量实施use、store操作之前，必须经过assign和load操作。</li><li>一个变量同一时间只有一个线程能对其进行lock，多次lock后，必须执行相同次数的unlock才能解锁。</li><li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值。</li><li>如果对一个变量没有被lock，就不能对其进行unlock操作，也不能unlock一个被其他线程锁住的变量。</li><li>对一个变量进行unlock操作之前，必须把此变量同步回主内存中。</li></ul><blockquote><p> 问题: 假设B线程已经把值写入主内存，怎么才能告诉A线程，主内存中的值已经发生变化？</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201222112724.png" alt=""></p><h1 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h1><blockquote><p>请你谈谈你对Volatile的理解</p></blockquote><p><strong>Volatile是Java虚拟机提供的轻量级的同步机制</strong></p><p>1、保证可见性</p><p>2、<code>不保证原子性</code></p><p>3、禁止指令重排</p><blockquote><p>保证可见性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不加volatile 程序就会死循环</span></span><br><span class="line">    <span class="comment">//加上volatile 可以保证可见性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> num =<span class="number">0</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;<span class="comment">//对主内存的变化不知道</span></span><br><span class="line">            <span class="keyword">while</span> (num == <span class="number">0</span>)&#123;&#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>不保证原子性</p></blockquote><p>原子性：要么同时成功，要么同时失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span> ; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//线程数大于2说明没有执行完,多线程下一定不要用if。</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果 不是<span class="number">10000</span>  所以不能保证原子性</span><br></pre></td></tr></table></figure><p><strong>如何在不适用synchronized和lock的情况下保证原子性呢！</strong></p><p><code>使用java.util.concurrent.atomic下面的原子类</code>，这样就保证了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> AtomicInteger num = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span> ; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//线程数大于2说明没有执行完,多线程下一定不要用if。</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">10000</span></span><br></pre></td></tr></table></figure><p>这些类的底层都直接和操作系统挂钩！在内存中修改值，Unsafe类是一个很特殊的存在。</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201222163634.png" alt=""></p><blockquote><p>什么是指令重排</p></blockquote><p>好比你写的代码，计算机并不是按照你写的代码的顺序去执行的。</p><p>源代码—-&gt;&gt;编译器优化重排—-&gt;&gt;指令并行也可能重排—-&gt;&gt;内存系统也会重排—-&gt;&gt;执行</p><p><code>volatile</code>可以避免指令重排</p><p>内存屏障，CPU指令。作用：</p><p>1、保证特定的操作的执行顺序！</p><p>2、可以保证某些变量的内存可见性。(利用这些特性volatile就可以实现可见性)</p><p><code>加了volatile关键字的操作，都会在上方和下方形成一个屏障来保证代码的顺序，防止指令重排</code></p><blockquote><p>总结</p></blockquote><p>Volatile可以保证可见性，不能保证原子性，由于内存屏障，可以避免指令重排的现象产生！</p><p>Volatile在单例模式中使用的最多。</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote><p>饿汉式</p></blockquote><p><code>可能会出现浪费内存的现象，因为程序一启动，就加载了</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span>  <span class="keyword">static</span> Hungry HUNGRY = <span class="keyword">new</span> Hungry();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>懒汉式</p></blockquote><p><code>懒汉式在单线程下是安全的，但是在多线程下是不安全的</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lazy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Lazy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lazy lazy;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Lazy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazy == <span class="keyword">null</span>)&#123;</span><br><span class="line">            lazy = <span class="keyword">new</span> Lazy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>双重校验锁(DCL懒汉)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lazy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Lazy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处要加volatile，来保证原子性</span></span><br><span class="line">    <span class="comment">// lazy = new Lazy();创建的时候会出现指令重排</span></span><br><span class="line">   <span class="comment">//如果不加会出现以下情况：比如a线程正在创建，还没有创建好，b现在就来了，lazy == null判断就不会是空</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Lazy lazy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Lazy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazy == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Lazy.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazy == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//不是一个原子性操作</span></span><br><span class="line">                    lazy = <span class="keyword">new</span> Lazy();</span><br><span class="line">                     <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 创建对象的过程</span></span><br><span class="line"><span class="comment">                     * 1、分配内存空间</span></span><br><span class="line"><span class="comment">                     * 2、执行构造方法，初始化对象</span></span><br><span class="line"><span class="comment">                     * 3、把这个对象指向这个空间</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态内部类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Holder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Holder <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Holder HOLDER = <span class="keyword">new</span> Holder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>单例模式是能被破坏的—-&gt;&gt;枚举除外</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Lazy lazy1 = Lazy.getInstance();</span><br><span class="line">        <span class="comment">//获取对象类的构造器</span></span><br><span class="line">        Constructor&lt;Lazy&gt; constructor = Lazy.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//破环其私有方法</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Lazy lazy2 = constructor.newInstance();</span><br><span class="line">        System.out.println(lazy1.hashCode());</span><br><span class="line">        System.out.println(lazy2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>枚举也是单例模式—-&gt;&gt;不会被反射破坏</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EnumSigle</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> EnumSigle <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EnumSigle的class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.se.base.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EnumSigle</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EnumSigle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EnumSigle <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试破坏枚举</p><p><code>java.lang.NoSuchMethodException: com.se.base.demo.EnumSigle.&lt;init&gt;()在这个枚举类中没有这个空参构造</code></p><p><code>在EnumSigle的Class文件中出现了空参构造，但是这里报错说没有空参构造</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Constructor&lt;EnumSigle&gt; constructor = EnumSigle.class.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        EnumSigle enumSigle = constructor.newInstance();</span><br><span class="line">        System.out.println(enumSigle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NoSuchMethodException: com.se.base.demo.EnumSigle.&lt;init&gt;()</span><br><span class="line">at java.lang.Class.getConstructor0(Class.java:<span class="number">3082</span>)</span><br><span class="line">at java.lang.Class.getDeclaredConstructor(Class.java:<span class="number">2178</span>)</span><br><span class="line">at com.se.base.demo.Test1.main(EnumSigle.java:<span class="number">21</span>)</span><br></pre></td></tr></table></figure><p>通过对<code>Constructor.newInstance()</code>的源码分析可得</p><p>如果是个枚举它会报错：<code>Cannot reflectively create enum objects</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">           IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">            checkAccess(caller, clazz, <span class="keyword">null</span>, modifiers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot reflectively create enum objects&quot;</span>);</span><br><span class="line">    ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">    <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ca = acquireConstructorAccessor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    T inst = (T) ca.newInstance(initargs);</span><br><span class="line">    <span class="keyword">return</span> inst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>javap -p EnumSigle.class</code>反编译还是出现了空参构造</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201228151023.png" alt="img"></p><p>通过jad软件对EnumSigle.class进行反编译成java文件查看</p><p><code>jad -sjava EnumSigle.class</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.18363.1256]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">G:\学习\基础\base\target\classes\com\se\base\demo&gt;jad -sjava EnumSigle.class</span><br><span class="line">Parsing EnumSigle.class... Generating EnumSigle.java</span><br></pre></td></tr></table></figure><p>编译过后的java文件，<code>这里我们就可以看到一个有参的构造器了</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.</span></span><br><span class="line"><span class="comment">// Jad home page: http://www.kpdus.com/jad.html</span></span><br><span class="line"><span class="comment">// Decompiler options: packimports(3) </span></span><br><span class="line"><span class="comment">// Source File Name:   EnumSigle.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.se.base.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSigle</span> <span class="keyword">extends</span> <span class="title">Enum</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnumSigle[] values()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (EnumSigle[])$VALUES.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EnumSigle <span class="title">valueOf</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (EnumSigle)Enum.valueOf(com/se/base/demo/EnumSigle, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EnumSigle</span><span class="params">(String s, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EnumSigle <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumSigle INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumSigle $VALUES[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> </span><br><span class="line">    &#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> EnumSigle(<span class="string">&quot;INSTANCE&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        $VALUES = (<span class="keyword">new</span> EnumSigle[] &#123;</span><br><span class="line">            INSTANCE</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>重新进行破坏</code></p><p>这次的报错信息符合预期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Constructor&lt;EnumSigle&gt; constructor = EnumSigle.class.getDeclaredConstructor(String.class,<span class="keyword">int</span>.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        EnumSigle enumSigle = constructor.newInstance();</span><br><span class="line">        System.out.println(enumSigle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果 </span></span><br><span class="line"><span class="comment">//无法以反射方式创建枚举对象</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.IllegalArgumentException: Cannot reflectively create <span class="class"><span class="keyword">enum</span> <span class="title">objects</span></span></span><br><span class="line"><span class="class"><span class="title">at</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">reflect</span>.<span class="title">Constructor</span>.<span class="title">newInstance</span>(<span class="title">Constructor</span>.<span class="title">java</span>:417)</span></span><br><span class="line"><span class="class"><span class="title">at</span> <span class="title">com</span>.<span class="title">se</span>.<span class="title">base</span>.<span class="title">demo</span>.<span class="title">Test1</span>.<span class="title">main</span>(<span class="title">EnumSigle</span>.<span class="title">java</span>:23)</span></span><br></pre></td></tr></table></figure><h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><blockquote><p>什么是CAS</p></blockquote><p>比较当前工作内存中的值和主内存中的值，如果满足期望就执行操作，如果不是就一直循环！</p><blockquote><p>java层面的cas—&gt;compareAndSet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//CAS compareAndSet:比较并交换！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//期望、更新,如果满足2000，就跟新成2001</span></span><br><span class="line">        <span class="comment">//否则不更新</span></span><br><span class="line">        atomicInteger.compareAndSet(<span class="number">2000</span>, <span class="number">2001</span>);</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2000</span>, <span class="number">2002</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>compareAndSet底层代码</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>java无法操作内存需要通过native调用C++去操作内存，Java还可以通过Unsafe这个类去操作内存</code></p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201228165428.png" alt="image-20201228165426843"></p><p><code>unsafe.compareAndSwapInt(this, valueOffset, expect, update)</code></p><p>标准的自旋锁，不满足就一直执行</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201228170728.png" alt="image-20201228170726744"></p><blockquote><p>CAS优缺点</p></blockquote><p>缺点：</p><ul><li>底层是自旋锁，循环会耗时</li><li>一次性只能保证一个共享变量的原子性</li><li>会出现ABA问题</li></ul><blockquote><p>ABA问题</p></blockquote><p>ABA问题就像西游记里面的真假葫芦一样，真的已经被人掉包了，而他自己还傻傻分不清。</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201228174652.png" alt=""></p><h1 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h1><blockquote><p>什么是原子引用</p></blockquote><p>带有版本号的原子操作，称之为原子引用</p><p><code>AtomicReference</code>不带标记的原子引用</p><p><code>AtomicStampedReference</code>带标记的原子引用</p><blockquote><p>原子引用可以解决ABA问题，对应的思想就是乐观锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CasDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; stampedReference = <span class="keyword">new</span> AtomicStampedReference&lt;Integer&gt;(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//获取到标识</span></span><br><span class="line">            <span class="keyword">int</span> stamp = stampedReference.getStamp();</span><br><span class="line">            System.out.println(<span class="string">&quot;A1==&gt;&gt;&quot;</span>+stamp);</span><br><span class="line">            <span class="comment">//休眠2秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果满足就更换，并且修改标识值</span></span><br><span class="line">            <span class="comment">//stampedReference.compareAndSet(预期值，替换的值，获取当前标识值，更换的标示值)</span></span><br><span class="line">            <span class="keyword">boolean</span> value1 = stampedReference.compareAndSet(<span class="number">10</span>, <span class="number">11</span>, stampedReference.getStamp(), stampedReference.getStamp() + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//输出操作是否执行成功</span></span><br><span class="line">            System.out.println(<span class="string">&quot;A2操作==&gt;&gt;&quot;</span>+value1);</span><br><span class="line">            <span class="comment">//输出此时的标识值</span></span><br><span class="line">            System.out.println(<span class="string">&quot;A2==&gt;&gt;&quot;</span>+stampedReference.getStamp());</span><br><span class="line">            <span class="comment">//和上面同理</span></span><br><span class="line">            <span class="keyword">boolean</span> value2 = stampedReference.compareAndSet(<span class="number">11</span>,<span class="number">10</span>,stampedReference.getStamp(),stampedReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//输出操作是否执行成功</span></span><br><span class="line">            System.out.println(<span class="string">&quot;A3操作==&gt;&gt;&quot;</span>+value2);</span><br><span class="line">            System.out.println(<span class="string">&quot;A3==&gt;&gt;&quot;</span>+stampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//获取到标识</span></span><br><span class="line">            <span class="keyword">int</span> stamp = stampedReference.getStamp();</span><br><span class="line">            System.out.println(<span class="string">&quot;B1==&gt;&gt;&quot;</span>+stamp);</span><br><span class="line">            <span class="comment">//休眠2秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//因为这里的标识值已经发生变化了，所以这里会输出false</span></span><br><span class="line">            <span class="keyword">boolean</span> value = stampedReference.compareAndSet(<span class="number">10</span>, <span class="number">111</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//输出操作是否执行成功</span></span><br><span class="line">            System.out.println(<span class="string">&quot;B2操作==&gt;&gt;&quot;</span>+value);</span><br><span class="line">            System.out.println(<span class="string">&quot;B2==&gt;&gt;&quot;</span>+stampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">A1==&gt;&gt;<span class="number">1</span></span><br><span class="line">B1==&gt;&gt;<span class="number">1</span></span><br><span class="line">A2操作==&gt;&gt;<span class="keyword">true</span></span><br><span class="line">A2==&gt;&gt;<span class="number">2</span></span><br><span class="line">A3操作==&gt;&gt;<span class="keyword">true</span></span><br><span class="line">A3==&gt;&gt;<span class="number">3</span></span><br><span class="line">B2操作==&gt;&gt;<span class="keyword">false</span></span><br><span class="line">B2==&gt;&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="锁的理解"><a href="#锁的理解" class="headerlink" title="锁的理解"></a>锁的理解</h1><blockquote><p>公平锁、非公平锁</p></blockquote><p>公平锁：是非常公平的，它不允许插队，必须排队。</p><p>非公平锁：是不公平的，它允许查询，锁默认值都是非公平的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lock默认创建的是非公平锁</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//方法重载 可以通过参数来控制创建的是公平锁还是非公平锁</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">       sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>可重入锁（递归锁）</p></blockquote><p>个人理解：锁中锁，如果获取到外面的锁，那么里面的锁也自动获取。</p><p>synchronized版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Home1 home1 = <span class="keyword">new</span> Home1();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                home1.getIntoHome(<span class="string">&quot;张三&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//家</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home1</span></span>&#123;</span><br><span class="line">    <span class="comment">//进入家</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span>  <span class="title">getIntoHome</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;回家&quot;</span>);</span><br><span class="line">        getIntoBedroom(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进入卧室</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getIntoBedroom</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;进入卧室&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">张三<span class="number">1</span>回家</span><br><span class="line">张三<span class="number">1</span>进入卧室</span><br><span class="line">张三<span class="number">5</span>回家</span><br><span class="line">张三<span class="number">5</span>进入卧室</span><br><span class="line">张三<span class="number">2</span>回家</span><br><span class="line">张三<span class="number">2</span>进入卧室</span><br><span class="line">张三<span class="number">3</span>回家</span><br><span class="line">张三<span class="number">3</span>进入卧室</span><br><span class="line">张三<span class="number">4</span>回家</span><br><span class="line">张三<span class="number">4</span>进入卧室</span><br></pre></td></tr></table></figure><p>Lock版本</p><p><code>Lock锁必须配对，不然就会出现死锁现象，一个lock.lock()就必须要有一个lock.unlock()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Home1 home1 = <span class="keyword">new</span> Home1();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                home1.getIntoHome(<span class="string">&quot;张三&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//家</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home1</span></span>&#123;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">//进入家</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">getIntoHome</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        lock.lock();<span class="comment">//此处会拿到一把锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(name+<span class="string">&quot;回家&quot;</span>);</span><br><span class="line">            <span class="comment">//这里也会拿到对应方法的那把锁</span></span><br><span class="line">            getIntoBedroom(name);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进入卧室</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">getIntoBedroom</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(name+<span class="string">&quot;进入卧室&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">张三<span class="number">2</span>回家</span><br><span class="line">张三<span class="number">2</span>进入卧室</span><br><span class="line">张三<span class="number">4</span>回家</span><br><span class="line">张三<span class="number">4</span>进入卧室</span><br><span class="line">张三<span class="number">1</span>回家</span><br><span class="line">张三<span class="number">1</span>进入卧室</span><br><span class="line">张三<span class="number">5</span>回家</span><br><span class="line">张三<span class="number">5</span>进入卧室</span><br><span class="line">张三<span class="number">3</span>回家</span><br><span class="line">张三<span class="number">3</span>进入卧室</span><br></pre></td></tr></table></figure><blockquote><p>自旋锁</p></blockquote><p><code>自旋锁就是不满足条件就一直执行，直到满足条件为止</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string默认为空</span></span><br><span class="line">    AtomicReference&lt;String&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;加锁中.... &quot;</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="keyword">null</span>,<span class="string">&quot;哈哈&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;解锁中....&quot;</span>);</span><br><span class="line">        atomicReference.compareAndSet(<span class="string">&quot;哈哈&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SpinLock spinLock = <span class="keyword">new</span> SpinLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            spinLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//随眠3秒</span></span><br><span class="line">               TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.getMessage();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                spinLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="comment">//休眠1秒 保证A线程先加锁</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            spinLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//随眠1秒</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.getMessage();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                spinLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">A加锁中.... </span><br><span class="line">B加锁中.... </span><br><span class="line">A解锁中....</span><br><span class="line">B解锁中....</span><br></pre></td></tr></table></figure><blockquote><p>死锁</p></blockquote><p>死锁就是多条线程想去操作同一资源</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201229170446.png" alt=""></p><p>死锁产生的条件:</p><ul><li><strong>互斥条件：</strong>资源是独占的且排他使用，进程互斥使用资源，即任意时刻一个资源只能给一个进程使用，其他进程若申请一个资源，而该资源被另一进程占有时，则申请者等待直到资源被占有者释放。</li><li><strong>不可剥夺条件：</strong>进程所获得的资源在未使用完毕之前，不被其他进程强行剥夺，而只能由获得该资源的进程资源释放。</li><li><strong>请求和保持条件：</strong>进程每次申请它所需要的一部分资源，在申请新的资源的同时，继续占用已分配到的资源。</li><li><strong>循环等待条件：</strong>在发生死锁时必然存在一个进程等待队列{P1,P2,…,P<br>n},其中P1等待P2占有的资源，P2等待P3占有的资源，…，Pn等待P1占有的资源，形成一个进程等待环路，环路中每一个进程所占有的资源同时被另一个申请，也就是前一个进程占有后一个进程所深情地资源。<br>以上给出了导致死锁的四个必要条件，只要系统发生死锁则以上四个条件至少有一个成立。事实上<strong>循环等待</strong>的成立蕴含了前三个条件的成立，似乎没有必要列出然而考虑这些条件对死锁的预防是有利的，因为可以通过破坏四个条件中的任何一个来预防死锁的发生</li></ul><p>死锁示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">![<span class="number">2</span>](C:\Users\July\Desktop\图片\<span class="number">2.</span>png)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deadlock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String lockA = <span class="string">&quot;lockA&quot;</span>;</span><br><span class="line">        String lockB = <span class="string">&quot;lockB&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Dead(lockA,lockB),<span class="string">&quot;T1线程&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Dead(lockB,lockA),<span class="string">&quot;T2线程&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dead</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    String lockA;</span><br><span class="line">    String lockB;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dead</span><span class="params">(String lockA, String lockB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockA = lockA;</span><br><span class="line">        <span class="keyword">this</span>.lockB = lockB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lockA)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&gt;&quot;</span>+lockA+<span class="string">&quot;尝试获取+&quot;</span>+lockB);</span><br><span class="line">            <span class="comment">//休眠2秒 保证测试正确</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockB)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>排查死锁</p></blockquote><p>1.通过jdk自带的工具命令<code>jps -l</code>排查存活的进程</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201229165357.png" alt="img"></p><p>2.通过命令<code>jstack 17680(进程号)</code>查询</p><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201229170050.png" alt=""></p><p>这样就能排查到死锁的信息！</p>]]></content>
    
    
    <summary type="html">juc</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="并发" scheme="https://www.isfate.xyz/categories/java/%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="java" scheme="https://www.isfate.xyz/tags/java/"/>
    
    <category term="juc" scheme="https://www.isfate.xyz/tags/juc/"/>
    
  </entry>
  
  <entry>
    <title>io流</title>
    <link href="https://www.isfate.xyz/article/9f27402d.html"/>
    <id>https://www.isfate.xyz/article/9f27402d.html</id>
    <published>2020-12-22T12:26:26.000Z</published>
    <updated>2022-01-27T14:49:52.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是IO流"><a href="#什么是IO流" class="headerlink" title="什么是IO流"></a>什么是IO流</h2><p><img src="https://img-blog.csdnimg.cn/20200925161118214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTE0NzY2,size_16,color_FFFFFF,t_70" alt="image"></p><h1 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h1><ol><li><p>一种方式是按照流的方向进行分类的（输入流，输出流）</p><p> 以内存作为参照物：</p><ul><li>往内存中去的，叫做输入（Input），或者叫做<code>读（Read）</code></li><li>从内存中出来，叫做输出（Output），或者叫做<code>写（Write)</code></li></ul></li><li><p>另外一种方式是按照读取数据方式不同进行分类：（字节流，字符流）</p><ul><li><p>有的流是按照字节的方式读取数据，一次读取1个字节byte，等同于一次读取8个二进制，这种刘是万能的，什么类型的文件都可以读取。（字节流）</p><p>  例子：</p><p>  ​    假设文本：a中国bc<br>  ​    使用字节流读取：<br>  ​    第一次读取到 a<br>  ​    第二次读取到 中的一半<br>  ​    第三次读取到 中的另外一半</p></li><li><p>有的流是按照字符的方式读取数据，一次读取一个字符，这种流是为了方便读取普通文本而存在的，这种流只能读取本文文件。（字符流）</p><p>  例子：</p><p>  ​    假设文本：a中国bc<br>  ​    使用字节流读取：<br>  ​    第一次读取到 a<br>  ​    第二次读取到 中</p></li></ul></li></ol><h1 id="Java-IO流四大家族"><a href="#Java-IO流四大家族" class="headerlink" title="Java IO流四大家族"></a>Java IO流四大家族</h1><ol><li>java.io.InputStream（字节输入流）</li><li>java.io.OutputStream（字节输出流）</li><li>java.io.Reader（字符输入流）</li><li>java.io.Writer （字符输出流）</li></ol><p><strong>注意：在Java中只要类名以Stream结尾的都是字节流，以Reader或者是Writer结尾的都是字符流</strong></p><blockquote><p>四大家族的都是抽象类（abstract class）</p></blockquote><p>所有流都实现了java.io.Cloaseble接口：</p><ul><li>java.io.Cloaseble接口，都是可以关闭的，都有close()方法</li><li>流毕竟是一个管道，这个是内存和硬盘之间的通道，用完之后一定要关闭，不然会消耗很多资源</li></ul><p>所有流都实现了java.io.Flushable接口：</p><ul><li>实现了java.io.Fulshable接口，都是可以刷新的，都有flush()方法</li><li>输出流在最终输出智慧，一定要记得flush()，刷新一下，这个刷新表示将通道/管道当中剩余未输出的数据强行输出完（清空管道）</li></ul><p>注意：如果没用flush()可以导致丢失数据</p><h1 id="java-io-包下面需要知道的流有16个"><a href="#java-io-包下面需要知道的流有16个" class="headerlink" title="java.io 包下面需要知道的流有16个"></a>java.io 包下面需要知道的流有16个</h1><blockquote><p>文件专属</p></blockquote><ul><li>java.io.FileInputStream (掌握)</li><li>java.io.FileOutputStream (掌握)</li><li>java.io.FileReader</li><li>java.io.Writer</li></ul><blockquote><p>转换流：(将字节流转换成字符流)</p></blockquote><ul><li>java.io.InputStreamReader</li><li>java.io.OutputStreamWriter</li></ul><blockquote><p>缓冲流专属</p></blockquote><ul><li>java.io.BufferedReader</li><li>java.io.BufferedWriter</li><li>java.io.BufferedInputStream</li><li>java.io.BufferedOutputStream</li></ul><blockquote><p>数据流专属</p></blockquote><ul><li>java.io.DataInputStream</li><li>java.io.DataOutputStream</li></ul><blockquote><p>标准输出流</p></blockquote><ul><li>java.io.PrintWriter</li><li>java.io.PrintStream (掌握)</li></ul><blockquote><p>对象专属流</p></blockquote><ul><li>java.io.ObjectInputStream  (掌握)</li><li>java.io.ObjectOutputStream  (掌握)</li></ul><h2 id="文件专属"><a href="#文件专属" class="headerlink" title="文件专属"></a>文件专属</h2><blockquote><p>FileInputStream   (字符输入流)</p></blockquote><p>常用的方法：<br>    avaiable(); 返回剩下多个字节没用读取<br>    skip(); 跳过几个字节不读取  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputSteamTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一个一个字符读取</span></span><br><span class="line">    <span class="comment">//这样读取有缺陷：内存和硬盘交互的太频繁 ，不推荐这样写。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream stream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\myiszhb\\记录\\fileInputStream.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> readData = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//一个个读取数据，如果返回-1说明没有数据了。</span></span><br><span class="line">            <span class="keyword">while</span> ((readData = stream.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(readData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(stream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stream.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过byte[]数组读取，推荐</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> test1 &#123;</span><br><span class="line">        FileInputStream stream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\myiszhb\\记录\\fileInputStream.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//定义一个byte[]数组一次读取多个</span></span><br><span class="line">            <span class="comment">//注意这种方法不适用于大数据文件</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> red = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//往byte[]数组中读取数据,如果返回-1说明没有数据了。</span></span><br><span class="line">            <span class="keyword">while</span> ( (red = stream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//byte[]数组转string</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,red));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(stream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stream.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FileOutputStream (字符输出流)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FileOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//文件没有会自动创建文件，注意如果有文件的话会清空原有的文件</span></span><br><span class="line">        <span class="comment">//outputStream = new FileOutputStream(&quot;D:\\myiszhb\\记录\\copy.txt&quot;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//文件没有会自动创建文件，第二个参数为true，会在原文件上继续追加内容</span></span><br><span class="line">        outputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\myiszhb\\记录\\copy.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] value = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        <span class="comment">//将byte[]数组全部写出！</span></span><br><span class="line">        outputStream.write(value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//表示读取0-2下标的数据</span></span><br><span class="line">        <span class="comment">//outputStream.write(value,0,2);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//写完之后，清刷一下管道</span></span><br><span class="line">        outputStream.flush();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(outputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><blockquote><p>FileReader (文件字符输入流)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FileReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建文件字符输入流</span></span><br><span class="line">        reader = <span class="keyword">new</span> FileReader(<span class="string">&quot;D:\\myiszhb\\记录\\fileInputStream.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//开始读取，如果为-1表示读完了</span></span><br><span class="line">        <span class="keyword">if</span>((read = reader.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(chars,<span class="number">0</span>,chars.length));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(reader != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FileWriter (文件字符输出流)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FileWriter writer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建文件字符输出流</span></span><br><span class="line">        <span class="comment">//没有文件会自动创建,有文件的话会先清空文件内容 </span></span><br><span class="line">        <span class="comment">//writer = new FileWriter(&quot;D:\\myiszhb\\记录\\fileInputStream1.txt&quot;);</span></span><br><span class="line">        <span class="comment">//没有文件会自动创建,第二个参数为true表示追加内容</span></span><br><span class="line">        writer = <span class="keyword">new</span> FileWriter(<span class="string">&quot;D:\\myiszhb\\记录\\fileInputStream1.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">char</span>[] value = &#123;<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;中&#x27;</span>,<span class="string">&#x27;国&#x27;</span>,<span class="string">&#x27;人&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        writer.write(value);</span><br><span class="line">        <span class="comment">//刷新管道</span></span><br><span class="line">        writer.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(writer != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><blockquote><p>InputStreamReader (将字节流转换成字符流)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字节输入流转成字符输入流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//字节流</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\myiszhb\\记录\\fileInputStream.txt&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过InputStreamReader转换流转换成字符流</span></span><br><span class="line">     <span class="comment">//此时in是节点流，inputStreamReader是包装流</span></span><br><span class="line">    InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(in);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这是个字符缓冲流，这个构造方法只能传一个字符流，不能穿字节流</span></span><br><span class="line">    <span class="comment">//此时inputStreamReader是节点流，bufferedReader是包装流</span></span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭最外层</span></span><br><span class="line">    bufferedReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>OutputStreamWriter (将字节输出流转换成字符输出流)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将字节输出流转换成字符输出流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//字节流</span></span><br><span class="line">    FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\myiszhb\\记录\\fileInputStream.txt&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过OutputStreamWriter转换流转换成字符流</span></span><br><span class="line">    <span class="comment">//此时outputStream是节点流，outputStreamWriter是包装流</span></span><br><span class="line">    OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(outputStream);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这是个字符缓冲流，这个构造方法只能传一个字符流，不能穿字节流</span></span><br><span class="line">    <span class="comment">//此时outputStreamWriter是节点流，bufferedReader是包装流</span></span><br><span class="line">    BufferedWriter bufferedReader = <span class="keyword">new</span> BufferedWriter(outputStreamWriter);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭最外层</span></span><br><span class="line">    bufferedReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓冲流专属"><a href="#缓冲流专属" class="headerlink" title="缓冲流专属"></a>缓冲流专属</h2><p><code>带有缓冲的流，不要再去定义char，byte数组去接收了</code></p><ol><li>BufferedReader </li><li>BufferedWriter</li><li>BufferedInputStream</li><li>BufferedOutputStream</li></ol><h2 id="数据流专属"><a href="#数据流专属" class="headerlink" title="数据流专属"></a>数据流专属</h2><blockquote><p>DataInputStream (数据输入流)  </p></blockquote><p><strong>DataOutputStream写的文件，只能通过DataInputStream去读，并且读的时候需要提前知道写入的顺序，必须顺序一致才能取出。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建数据输入流</span></span><br><span class="line">    DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\myiszhb\\记录\\fileInputStream2&quot;</span>));</span><br><span class="line">    <span class="keyword">int</span>  v1 = dataInputStream.readInt();</span><br><span class="line">    <span class="keyword">boolean</span> v2 = dataInputStream.readBoolean();</span><br><span class="line">    <span class="keyword">double</span> v3 = dataInputStream.readDouble();</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    dataInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DataOutputStream (数据输出流)  </p></blockquote><p>这个流可以将数据连同数据的类型一并写入文件，<code>这个文件不是普通文本文档 无法打开</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建数据输出流</span></span><br><span class="line">    DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\myiszhb\\记录\\fileInputStream2&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>  v1 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">boolean</span> v2 = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">double</span> v3 = <span class="number">200L</span>;</span><br><span class="line">    <span class="comment">//写数据</span></span><br><span class="line">    dataOutputStream.writeInt(v1);</span><br><span class="line">    dataOutputStream.writeBoolean(v2);</span><br><span class="line">    dataOutputStream.writeDouble(v3);</span><br><span class="line">    <span class="comment">//关闭流</span></span><br><span class="line">    dataOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准输出流"><a href="#标准输出流" class="headerlink" title="标准输出流"></a>标准输出流</h2><blockquote><p>PrintStream</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标准输出流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//标准输出流不再指向控制台，而是指向log文件</span></span><br><span class="line">    PrintStream prinStream = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\myiszhb\\记录\\log.txt&quot;</span>,<span class="keyword">true</span>));</span><br><span class="line">    <span class="comment">//修改输出方向，将输出方向修改到log文件</span></span><br><span class="line">    System.setOut(prinStream);        System.out.println(<span class="string">&quot;这是一个测试&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;这是二个测试&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;这是三个测试&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象专属流"><a href="#对象专属流" class="headerlink" title="对象专属流"></a>对象专属流</h2><blockquote><p>ObjectOutoutStream</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">    <span class="number">1.</span> 参与序列化和反序列化的对象，必须实现Serializable接口。</span><br><span class="line">    <span class="number">2.</span> 通过源代码发现，Serializable接口只是一个标识接口，这个接口当中什么代码都没有，起到标识作用，Java虚拟机看到这个类实现了这个接口，可能会对这个类有特殊待遇</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建java对象</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="number">111</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;D:\\myiszhb\\记录\\student&quot;</span>))</span><br><span class="line">        <span class="comment">//序列化对象</span></span><br><span class="line">        oos.writeObject(student);</span><br><span class="line">        <span class="comment">//刷新</span></span><br><span class="line">        oos.flush();</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> no,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get/set 暂时没写...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> ObjectInputStream</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> File(<span class="string">&quot;D:\\myiszhb\\记录\\student&quot;</span>);</span><br><span class="line">        <span class="comment">//开始反序列化</span></span><br><span class="line">        Object o = ois.readObject();</span><br><span class="line">        <span class="comment">//student对象必须重写toString对象</span></span><br><span class="line">        System.out.println(o.toString());</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>transient</code> 表示<code>游离的</code>，不参与序列化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> no,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get/set 暂时没写...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="IO-Properties"><a href="#IO-Properties" class="headerlink" title="IO+Properties"></a>IO+Properties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       非常好的一个设计理念：</span></span><br><span class="line"><span class="comment">            以后经常改变的数据，可以单独写道一个文件中，使用程序动态读取。</span></span><br><span class="line"><span class="comment">            将来只需要修改这个文件的内存，java代码不需要改动，不需要重新</span></span><br><span class="line"><span class="comment">            编译，服务器也不需要重启，就可以拿到动态的信息。</span></span><br><span class="line"><span class="comment">        类似于这种机制的文件，被称为配置文件。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Properties是一个map集合，key和value都是string类型</span></span><br><span class="line"><span class="comment">            想将user文件中的数据加载到Properties对象当中。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//创建一个输入流对象</span></span><br><span class="line">        FileReader reader = <span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">&quot;H:\\ce\\user&quot;</span>));</span><br><span class="line">        <span class="comment">//创建一个map集合</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用Properties对象的load方法将文件中的数据加载到map集合当中。</span></span><br><span class="line">        <span class="comment">//文件中的数据顺着管道加载到map集合中，其中等号=左边作为key，右边作为value</span></span><br><span class="line">        properties.load(reader);</span><br><span class="line"></span><br><span class="line">        String name = properties.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//user内容</span></span><br><span class="line">name=zhangsan</span><br><span class="line">password=<span class="number">123</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">io</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="基础" scheme="https://www.isfate.xyz/categories/java/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://www.isfate.xyz/tags/java/"/>
    
    <category term="io" scheme="https://www.isfate.xyz/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://www.isfate.xyz/article/d366874c.html"/>
    <id>https://www.isfate.xyz/article/d366874c.html</id>
    <published>2020-12-16T12:57:55.000Z</published>
    <updated>2022-01-27T14:49:13.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是集合？有什么用？"><a href="#什么是集合？有什么用？" class="headerlink" title="什么是集合？有什么用？"></a>什么是集合？有什么用？</h1><ol><li>数组其实就是一个集合。集合实际上就是一个容器，可以来容纳其他类型的数据。</li><li>集合不能直接存储基本数据类型，另外集合也不能直接存储Java对象。集合当作存储的都是Java对象的内存地址(引用)。 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">    集合在Java中本身就是一个容器，是一个对象。</span><br><span class="line">    集合中任何时候存储的都是引用。</span><br><span class="line"></span><br><span class="line">list.add(100);//属于自动装箱Integer,属于对象</span><br></pre></td></tr></table></figure></li><li>在Java中每一个不同的集合，底层会对应不同的数据结果。往不同的集合中存储元素，等于往不同的数据结构中存储。</li><li>在Java中集合分为两大类：<ol><li>一类是单个方式存储元素，这一类集合的super父接口：java.util.Collection。</li><li>一类是以键值对方式存储元素，这一类集合的super父接口：java.util.Map。</li></ol></li></ol><h1 id="集合的继承结构"><a href="#集合的继承结构" class="headerlink" title="集合的继承结构"></a>集合的继承结构</h1><h2 id="list和set"><a href="#list和set" class="headerlink" title="list和set"></a>list和set</h2><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201216210150.png" alt="image"></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201216210242.png" alt="image"></p><h2 id="所有集合的实现类"><a href="#所有集合的实现类" class="headerlink" title="所有集合的实现类"></a>所有集合的实现类</h2><ol><li>ArrayList: 底层是数组。</li><li>LinkedList: 底层是双向链表。</li><li>Vector: 底层是数组，线程安全的，效率较低。</li><li>HashSet: 底层是HashMap，放在HashSet集合中的元素等同于放在了HasgMap集合的key部分。</li><li>TreeSet: 底层是TreeMap，放在TreeSet集合中的元素等同于放在了TreeMap集合的key部分。</li><li>HashMap: 底层是哈希表</li><li>HashTable: 底层也是哈希表，只不过线程安全的，效率较低。</li><li>Properties: 是线程安全的，并且key和value只能存储字符串String。</li><li>TreeMap: 底层是二叉树，TreeMap集合的key可以自动按照大小顺序排序。</li></ol><h2 id="List存储集合元素的特点"><a href="#List存储集合元素的特点" class="headerlink" title="List存储集合元素的特点"></a>List存储集合元素的特点</h2><ol><li>有序可重复。  <ol><li>有序：<br> 存进去的顺序和取出来的顺序相同，每一个元素都有下标。</li><li>可重复：<br> 存进去1，可以在存储一个1。</li></ol></li></ol><h2 id="Set-Map-存储集合元素的特点"><a href="#Set-Map-存储集合元素的特点" class="headerlink" title="Set(Map)存储集合元素的特点"></a>Set(Map)存储集合元素的特点</h2><ol><li>无序不可重复<ol><li>无序：<br> 存进去的顺序和取出来的顺序不一定相同，另外Set集合没有下标。</li><li>不可重复：<br> 存进去1，不能在存储一个1。</li></ol></li></ol><h2 id="SortedSet-SortedMap-存储集合元素的特点"><a href="#SortedSet-SortedMap-存储集合元素的特点" class="headerlink" title="SortedSet(SortedMap)存储集合元素的特点"></a>SortedSet(SortedMap)存储集合元素的特点</h2><ol><li>首先是无序不可重复的，但是SortedSet集合中的元素是可排序的<ol><li>无序：<br> 存进去的顺序和取出来的顺序不一定相同，另外Set集合没有下标。</li><li>不可重复：<br> 存进去1，不能在存储一个1。</li><li>可排序：<br> 按照大小顺序排序。</li></ol></li></ol><blockquote><p>备注：Map集合的key，就是一个Set集合。往Set集合中放数据，实际上放到了Map的key部分</p></blockquote><h1 id="Collection-常用的方法"><a href="#Collection-常用的方法" class="headerlink" title="Collection 常用的方法"></a>Collection 常用的方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 关于Java.util.Collection接口的常用方法。</span></span><br><span class="line"><span class="comment"> 1.Collection中能存放什么元素？</span></span><br><span class="line"><span class="comment">    没有使用“泛型”，Collection中可以存储Object的所有类型，</span></span><br><span class="line"><span class="comment">    使用了“泛型”之后，Collection只能存储对于泛型的数据</span></span><br><span class="line"><span class="comment"> 2。Collection常用方法</span></span><br><span class="line"><span class="comment">    1. boolean add(Object e) 向集合添加元素</span></span><br><span class="line"><span class="comment">    2. int size() 获取集合中的元素个数</span></span><br><span class="line"><span class="comment">    3. void clear() 清空集合元素</span></span><br><span class="line"><span class="comment">    4. boolean contains(Object e) 判断集合里面是否包含某个元素</span></span><br><span class="line"><span class="comment">    5. boolean remove(Object e) 删除集合中的某个元素</span></span><br><span class="line"><span class="comment">    6. boolean isEmpty() 判断集合元素个数是否为0</span></span><br><span class="line"><span class="comment">    7. Object[] toArray() 将集合转换成数组</span></span><br><span class="line"><span class="comment">    8. Iterator iterator() 获取集合对象的迭代器对象Iterator</span></span><br><span class="line"><span class="comment">        以下两个方法时迭代器对象Iterator中的方法：</span></span><br><span class="line"><span class="comment">            boolean hasNext() 如果仍有元素可以叠，则返回true</span></span><br><span class="line"><span class="comment">            Object next() 返回迭代的下一个元素</span></span><br><span class="line"><span class="comment">        注意：此时获取的迭代器，指向的是那个集合中没有元素的状态下的迭代器</span></span><br><span class="line"><span class="comment">        注意：集合结果只要发生改变，迭代器必须重写获取</span></span><br><span class="line"><span class="comment">        注意：在集合元素迭代的时候不能调用remove方法。不能调用集合的remove方法，可以调用迭代器的remove方法，因为调用集合的remove方法 它不会通知迭代器，而调用迭代器的remove方法，它会删除集合以及迭代器的元素。</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         接口时抽象的，无法实例化</span></span><br><span class="line"><span class="comment">         Collection collection = new Collection();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">        Collection c =  <span class="keyword">new</span> ArrayList();</span><br><span class="line">        c.add(<span class="number">100</span>);<span class="comment">//自动装箱机制，实际上时放进去了一个对象的内存地址。Integer integer = new Integer(100)</span></span><br><span class="line">        c.size();</span><br><span class="line">        c.clear();</span><br><span class="line">        c.contains(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        c.remove(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        c.isEmpty();</span><br><span class="line">        Object[] objects = c.toArray();</span><br><span class="line">        <span class="comment">//注意：此时获取的迭代器，指向的是那个集合中没有元素的状态下的迭代器</span></span><br><span class="line">        <span class="comment">//集合结果只要发生改变，迭代器必须重写获取</span></span><br><span class="line">        Iterator iterator = c.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Object o = iterator.next();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Map接口中常用方法"><a href="#Map接口中常用方法" class="headerlink" title="Map接口中常用方法"></a>Map接口中常用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.Map</span></span><br><span class="line"><span class="comment">    1. Map和Collection没有集成关系。</span></span><br><span class="line"><span class="comment">    2. Map集合以key和value的方式存储数据：键值对</span></span><br><span class="line"><span class="comment">        key和value都是引用数据类型。</span></span><br><span class="line"><span class="comment">        key和value都是存储对象的内存地址。</span></span><br><span class="line"><span class="comment">        key起到主导第地位，value是key的一个附属品。</span></span><br><span class="line"><span class="comment">    3. Map接口中常用方法：</span></span><br><span class="line"><span class="comment">        V put(K key,V value) 向Map集合中添加键值对</span></span><br><span class="line"><span class="comment">        V get(Object key) 通过key查询value</span></span><br><span class="line"><span class="comment">        void clear() 清空Map集合</span></span><br><span class="line"><span class="comment">        boolean containsKey(Object key) 判断Map集合是否包含key</span></span><br><span class="line"><span class="comment">        boolean containsVlaue(Object value) 判断Map集合是否包含value</span></span><br><span class="line"><span class="comment">        boolean isEmpty() 判断Map集合中元素个数是否为0（为空）</span></span><br><span class="line"><span class="comment">        Set&lt;K&gt; keySet() 获取Map集合所有的key（所有的键是一个set集合）</span></span><br><span class="line"><span class="comment">        V remove(Object key) 通过key删除Map集合中的元素</span></span><br><span class="line"><span class="comment">        int size() 获取Map集合的个数</span></span><br><span class="line"><span class="comment">        Collection&lt;V&gt; values() 获取Map集合中所有的value，返回一个Collection</span></span><br><span class="line"><span class="comment">        Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() 将Map集合转换成Set集合</span></span><br><span class="line"><span class="comment">            假设： map 集合对象的</span></span><br><span class="line"><span class="comment">                 key  value</span></span><br><span class="line"><span class="comment">                 1    zhangsan</span></span><br><span class="line"><span class="comment">             -------------------------------</span></span><br><span class="line"><span class="comment">             转换后： Set set = map.entrySet();</span></span><br><span class="line"><span class="comment">                1=zhangsan  (这是一个值)</span></span><br><span class="line"><span class="comment">             备注：Map集合调用entrySet()方法得到set集合类型是Map.Entry类型的，</span></span><br><span class="line"><span class="comment">             Map.Entry和String一样，都是一种类型的名字，不过Map.Entry是静态内部类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历Map的3种方式</span></span><br><span class="line">        <span class="comment">//1.foreach 先获取所有的key</span></span><br><span class="line">        Set&lt;Integer&gt; integers = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : integers) &#123;</span><br><span class="line">            System.out.println(integer+<span class="string">&quot;=&quot;</span>+map.get(integer));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 通过entrySet()方法转换成set集合 遍历</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, String&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : set) &#123;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot;=&quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 通过entrySet()方法转换成set集合,在转换成迭代器,遍历迭代器</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, String&gt;&gt; set1 = map.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = set1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;Integer, String&gt; next = iterator.next();<span class="comment">//这里的Map.Entry 实际上就是一个node</span></span><br><span class="line">            System.out.println(next.getKey()+<span class="string">&quot;=&quot;</span>+next.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="List-常用方法"><a href="#List-常用方法" class="headerlink" title="List 常用方法"></a>List 常用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> List集合存储元素的特点：有序可重复</span><br><span class="line">    <span class="number">1.1</span> 有序，指List集合中的元素有下标。从<span class="number">0</span>开始，依次递增</span><br><span class="line">    <span class="number">1.2</span> 可重复，存储一个<span class="number">1</span>，还可以在存储一个<span class="number">1.</span></span><br><span class="line"><span class="number">2.</span> List既然是Collection接口的子接口，肯定List接口有自己特色的常用方法：</span><br><span class="line">    <span class="number">2.1</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,Object element)</span> 添加元素</span></span><br><span class="line"><span class="function">    2.2 Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> 根据下标取元素</span></span><br><span class="line"><span class="function">    2.3 <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> 获取指定元素第一次出现的索引</span></span><br><span class="line"><span class="function">    2.4 <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> 获取指定元素最后一次出现的索引</span></span><br><span class="line"><span class="function">    2.5 Object <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> 通过索引删除元素</span></span><br><span class="line"><span class="function">    2.6 Object <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,Object element)</span> 往指定索引添加元素</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><code>总结</code></h1><blockquote><p>ArrayList</p></blockquote><ol><li>有序可重复</li><li>List的初始化容量为10（底层先创建了一个长度为0的数组，当添加第一个元素的时候，初始化容量10）。</li><li>ArryList集合底层是Object[]数组`。</li><li><p>ArryList集合扩容容量是(旧容量+旧容量&gt;&gt;1)，扩容原数组的1.5倍。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">    旧容量 = <span class="number">10</span>;</span><br><span class="line">    扩容之后: <span class="number">10</span> + (<span class="number">10</span>&gt;&gt;<span class="number">1</span>) = <span class="number">15</span></span><br><span class="line">    解析：<span class="number">10</span> 的二进制 <span class="number">0000</span> <span class="number">1010</span></span><br><span class="line">    右移后：<span class="number">0000</span> <span class="number">0101</span> 的十进制 <span class="number">4</span>+<span class="number">1</span>=<span class="number">5</span></span><br><span class="line"></span><br><span class="line">add扩容底层源码</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;<span class="comment">//旧的容量</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);<span class="comment">//扩容后的容量</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);<span class="comment">//copy数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ArrayList集合非线程安全</p></li><li>ArryList的优点：检索效率比较高（因为底层是数组，数组的检索效率高，但是增删操作效率低）。</li><li>ArryList的缺点：随机增删元素效率较低，但是在末尾增删效率不变。</li></ol><blockquote><p>LinkedList</p></blockquote><ol><li>LinkedList集合底层也有下标。</li><li>LinkedList集合没有初始化容量。</li><li>LinkedList集合底层是双向链表。</li><li>LinkedList的优点：由于链表上的元素空间存储地址不连续，所以随机增删元素的时候不会有大量元素位移，因此随机增删效率高</li><li>LinkedList的缺点：不能通过数学表达式查找元素的内存地址，每一次都需要从头节点开始遍历，直到找到为止，所以检索效率较低。</li><li>LinkedList非线程安全。</li><li>有序可重复。</li></ol><blockquote><p>Vector</p></blockquote><ol><li>Vector集合底层也是一个数组。</li><li>Vector集合底层初始容量为10。</li><li>Vector集合的扩容,扩容数后时原数组的2倍大小。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">备注：</span><br><span class="line">    java.utls.Collection 是接口</span><br><span class="line">    java.utls.Collections 是工具类 里面封装了方法用于集合操作</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> var1)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获得数组的长度</span></span><br><span class="line">    <span class="keyword">int</span> var2 = <span class="keyword">this</span>.elementData.length;</span><br><span class="line">    <span class="comment">//capacityIncrement一直为0;</span></span><br><span class="line">    <span class="comment">//数组长度+ （初始长度&gt;0?初始长度：数组长度）</span></span><br><span class="line">    <span class="comment">//默认扩容var2+var2;</span></span><br><span class="line">    <span class="keyword">int</span> var3 = var2 + (<span class="keyword">this</span>.capacityIncrement &gt; <span class="number">0</span> ? <span class="keyword">this</span>.capacityIncrement : var2);</span><br><span class="line">    <span class="keyword">if</span> (var3 - var1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        var3 = var1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (var3 - <span class="number">2147483639</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        var3 = hugeCapacity(var1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.elementData = Arrays.copyOf(<span class="keyword">this</span>.elementData, var3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Vector集合线程安全，都带有synchronized关键字修饰，效率较低。</li><li>有序可重复。</li></ol><blockquote><p>HashSet</p></blockquote><ol><li>无序不可重复（无序：存进去的顺序和取出来的顺序不同）</li><li>放到HsahSet集合的元素实际是存放到HashMap集合的key部分。</li><li>HashSet集合非线程安全。</li></ol><blockquote><p>HashMap</p></blockquote><ol><li>HashMap集合底层是哈希表/散列表的数据结构。  </li><li>哈希表是一个怎么样的数据结构呢？<br> 哈希表是一个数组和单向链表的结合体。<br> 数组：在查询方面效率很高，随机增删方面效率很低。<br> 单向链表：在查询方法效率低，随机增删方法效率高。<br> 哈希表将数组、单向链表两种数据结构融合在一起，充分发挥它们各自的优点。</li><li><p>HashMap集合底层的源代码 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span></span>&#123;</span><br><span class="line">    <span class="comment">//HashMap底层实际上就是一个数组。</span></span><br><span class="line">    Node&lt;k,v&gt;[] table;</span><br><span class="line">    <span class="comment">//静态的内部类HashMap.Node</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash; <span class="comment">//哈希值（哈希值是key通过hashCode()方法的执行结构,hash值通过哈希函数/算法,可转换成数组的下标）</span></span><br><span class="line">        <span class="keyword">final</span> K key; <span class="comment">//存储的Map集合中的key</span></span><br><span class="line">        V value; <span class="comment">//存储到Map集合中的value</span></span><br><span class="line">        Node&lt;K,V&gt; next; <span class="comment">//下一个节点的内存地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HashMap集合key的部分特点<br> 无序：存进去和取出来的顺序不同,所以无序。<br> 不可重复：因为底层采用了equals方法来保证HashMap集合的key不可重复,如果可以重复了,value的值会被直接覆盖。<br> HashMap是非线程安全的。<br> 放在HashMap集合key部分的元素其实就是放在了HashSet集合中了。<br> 所以HashSet集合中的元素也需要同时重写hashCode()和equals()方法。</p></li><li>哈希表HashMap使用不当时无法发挥性能<br> 我们要保证散列分布均匀，那什么是散列分布均匀呢？  <pre><code> 假设有100个元素，10个单向链表，那么么个单向链表上有10个节点，这是最好的，是散列分布均匀的。</code></pre></li><li>重点<br> 放在HashMap集合key部分的元素，以及放在HashSet集合中的元素，需要同时重写hashCode()和equals()方法。</li><li>HashMap集合默认初始容量是16,默认加载因子是0.75f，扩容后的容量是原容量的2倍 。<br> 这个默认加载因子是当HashMap集合底层数组的容量达到75%的时候,数组开始扩容。<br> 重点：HashMap初始容量必须是2的倍数,这是官方推荐的,这样能达到散列均匀,为了提高HashMap集合的存储效率。</li><li>JDK1.8之后HashMap中哈希表单向链表的数量超过8个就会换成红黑树结构,如果数量小于6就会转换成单向链表结构。</li><li>map.put(k,v)实现原理<br>第一步：先将k,v封装到Node对象当中。<br>第二步：底层会调用k的hashCode()方法得到hash值,然后通过哈希函数/哈希算法，<br>将hash值转换成数组的下标,下标位置上如果没有任何元素,就把Node添加到这个位置<br>上,如果说下标对于的位置上有链表(Node),此时会拿着k和链表上每一个节点中的k进<br>行equals比较,如果所有的equals方法返回false,那么这个节点将被添加到链表的末<br>尾,如果其中一个equals返回了true,那么这个节点的value将会被覆盖。</li><li>map.get(k)实现原理<br>先调用k的hansCode()方法得到哈希值,通过哈希算法转换成数组下标,通过数组下标<br>快速找到对应位置上，如果这个位置上面都没有,返回null。如果这个节点上有单向链<br>表(Node),那么会拿着参数k和单向链表上的每个节点中的k进行equals比较,如果所<br>有的equals都返回false,那么get方法返回null。只要其中一个节点返回true,那<br>么此时就会把这个节点上的value,返回回去。</li></ol><blockquote><p>HashTable</p></blockquote><ol><li>HashTable集合的底层也是哈希表/散列表结构。</li><li>HashTable集合的初始化容量是11，默认加载因子也是0.75f,扩容量是：(原长度*2)+1</li></ol><blockquote><p>Properties</p></blockquote><ol><li>Properties是一个Map集合，继承HashTable，properties是key和value都是String类型的。</li><li>Properties被称为属性对象。</li><li>Properties是线程安全的。</li></ol><blockquote><p>TreeSet</p></blockquote><ol><li>TreeSet集合底层实际上是一个TreeMap</li><li>TreeMap集合底层是一个二叉树</li><li>放在TreeSet集合中的元素，等同于放在TreeMap的key部分</li><li>TreeSet集合中的元素 无序不可重复，但是可以按照元素的大小顺序真的排序，称为：可排序集合。</li><li>TreeSet集合非线程安全。</li><li><p>TreeSet集如果存入自定义对象，自定义对象必须实现Comparable&lt;&gt;接口<br> TreeMap底层源码是先判断有无比较器的。<br> Comparable和Comparator怎么选择？</p><pre><code> 1. 比较规则经常发生改变时，使用Comparator，Comparator接口符合OCP原则。   2. 比较规则不会发生变动时，使用Comparable。</code></pre><p> 方式1：实现java.long.Comparable接口,并重写其compareTo方法。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    User对象按照年龄排序</span></span><br><span class="line"><span class="comment">    如果年龄一样就按照name排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">20</span>,<span class="string">&quot;三毛&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="number">30</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="number">18</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="number">20</span>,<span class="string">&quot;阿珂&quot;</span>);</span><br><span class="line">        Set set = <span class="keyword">new</span> TreeSet&lt;User&gt;();</span><br><span class="line">        set.add(user1);</span><br><span class="line">        set.add(user2);</span><br><span class="line">        set.add(user3);</span><br><span class="line">        set.add(user4);</span><br><span class="line">        <span class="keyword">for</span> (Object o : set) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重点：TreeSet存入自定义对象必须重写Comparable接口,并实现其compareTo方法。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;User&#123;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;age=&quot;</span>).append(age);</span><br><span class="line">        sb.append(<span class="string">&quot;, name=&#x27;&quot;</span>).append(name).append(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">        sb.append(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        compareTo方法的返回值很重要：</span></span><br><span class="line"><span class="comment">            返回0表示相同，value会覆盖。</span></span><br><span class="line"><span class="comment">            返回&gt;0，会继续在右子树上找。（10-9=1，1&gt;0 说明左边这个数字比较大，所以在右子树上找）</span></span><br><span class="line"><span class="comment">            返回&lt;0，会继续在左子树上找。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(User o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.age == o.getAge())&#123;</span><br><span class="line">            <span class="keyword">return</span> o.getName().compareTo(<span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age-o.getAge();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 方式2：创建一个比较器实现java.utls.Comparator接口，并重写的compare方法，然后创建TreeSet集合的时候传入进去</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">20</span>,<span class="string">&quot;三毛&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="number">30</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="number">18</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="number">20</span>,<span class="string">&quot;阿珂&quot;</span>);</span><br><span class="line">        Set set = <span class="keyword">new</span> TreeSet&lt;User&gt;(<span class="keyword">new</span> UserComparator());</span><br><span class="line">        <span class="comment">//或者使用匿名内部类</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Set set = new TreeSet&lt;User&gt;(new Comparator&lt;User&gt;()&#123;</span></span><br><span class="line"><span class="comment">                 public int compare(User o1, User o2) &#123;</span></span><br><span class="line"><span class="comment">                    if(o1.getAge() == o2.getAge())&#123;</span></span><br><span class="line"><span class="comment">                        return o2.getName().compareTo(o1.getName());</span></span><br><span class="line"><span class="comment">                    &#125;else&#123;</span></span><br><span class="line"><span class="comment">                        return o1.getAge()-o2.getAge();</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        set.add(user1);</span><br><span class="line">        set.add(user2);</span><br><span class="line">        set.add(user3);</span><br><span class="line">        set.add(user4);</span><br><span class="line">        <span class="keyword">for</span> (Object o : set) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;User&#123;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;age=&quot;</span>).append(age);</span><br><span class="line">        sb.append(<span class="string">&quot;, name=&#x27;&quot;</span>).append(name).append(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">        sb.append(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建比较器实现compare方法，写判断规则</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(User o1, User o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o1.getAge() == o2.getAge())&#123;</span><br><span class="line">            <span class="keyword">return</span> o2.getName().compareTo(o1.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="Collection的方法：-boolean-contains-Object-e"><a href="#Collection的方法：-boolean-contains-Object-e" class="headerlink" title="Collection的方法： boolean contains(Object e)"></a>Collection的方法： boolean contains(Object e)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection c = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        c.add(s1);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">        c.add(s2);</span><br><span class="line"></span><br><span class="line">        String s3 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="comment">//这里返回true为什么？？</span></span><br><span class="line">        <span class="comment">//因为底层代码调用了equals方法比较，而这个内容又是String的，string时重写了equals方法的，所以比较这里比较的时内容，而不是引用。</span></span><br><span class="line">        System.out.println(c.contains(s3));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//源码分析</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))<span class="comment">//这里调用equals进行比较</span></span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存分析图：<br><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201216210311.png" alt="image"></p><h2 id="Collection的方法：boolean-remove-Object-o"><a href="#Collection的方法：boolean-remove-Object-o" class="headerlink" title="Collection的方法：boolean remove(Object o)"></a>Collection的方法：boolean remove(Object o)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection c = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(s1);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.remove(s2);</span><br><span class="line">        <span class="comment">//输出结果0,因为remove方法的底层也调用了equals去比较，String类型底层代码重写了equals方法，比较值</span></span><br><span class="line">        System.out.println(c.size());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//源码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123; <span class="comment">//测出调用了equals方法</span></span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  如果类重写了equals方法：<br>       contains就包含<br>       equals就可以删除<br>   如果不重写equals方法，它会默认取调用Object的equals方法，默认==比较，比较引用<br>       contains就不包含<br>       equals就不可删除  </p></blockquote><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="单向链表结构"><a href="#单向链表结构" class="headerlink" title="单向链表结构"></a>单向链表结构</h2><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201216210340.png" alt="image"></p><h2 id="哈希表-散列表结构-Map"><a href="#哈希表-散列表结构-Map" class="headerlink" title="哈希表/散列表结构 Map"></a>哈希表/散列表结构 Map</h2><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201216210409.png" alt="image"></p><h2 id="自平衡二叉树-TreeMap就是"><a href="#自平衡二叉树-TreeMap就是" class="headerlink" title="自平衡二叉树 TreeMap就是"></a>自平衡二叉树 TreeMap就是</h2><p><img src="https://cdn.jsdelivr.net/gh/my-zhb/CDN/img/20201216210429.png" alt="image"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a><code>问题</code></h1><blockquote><p>1.HashMap集合key部分允许为null吗？  </p></blockquote><p>允许，但是HashMap集合的key，null值只能有一个。<br>HashMap集合的key和value都允许为null;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//这里输出1,说明HashMap的key部分可以为null</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//也可以通过null来进行查询,结果为100</span></span><br><span class="line">        System.out.println(map.get(<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.HashTable的key可以为null吗？  </p></blockquote><p>HashTable的key河value都不能为空。</p><blockquote><p>3.HashMap和HashTable的区别？  </p></blockquote><ol><li>HashMap线程不安全,HashTable线程安全</li><li>HashMap的key和value都可以为null,HashTable的key和value不允许为null.</li></ol>]]></content>
    
    
    <summary type="html">集合</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="基础" scheme="https://www.isfate.xyz/categories/java/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://www.isfate.xyz/tags/java/"/>
    
    <category term="集合" scheme="https://www.isfate.xyz/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>包装类</title>
    <link href="https://www.isfate.xyz/article/52c58cb2.html"/>
    <id>https://www.isfate.xyz/article/52c58cb2.html</id>
    <published>2020-12-14T12:24:34.000Z</published>
    <updated>2022-01-27T14:48:55.237Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java中为8种基本数据类型准备了8种包装类型。8种包装类型都属于引用类型。</span><br><span class="line">思考：为什么需要再提供8种包装类型呢？</span><br><span class="line">    因为8种基本数据类型不够用，所以SUN又提供了8种包装类型。</span><br></pre></td></tr></table></figure><h1 id="Java中对每种基本类型都有一个对应的包装类"><a href="#Java中对每种基本类型都有一个对应的包装类" class="headerlink" title="Java中对每种基本类型都有一个对应的包装类"></a>Java中对每种基本类型都有一个对应的包装类</h1><ul><li>byte -&gt; Byte 继承number</li><li>short -&gt; Short 继承number</li><li>int -&gt; Integer 继承number</li><li>long -&gt; Long 继承number</li><li>float -&gt; Float 继承number</li><li>double -&gt; Double 继承number</li><li>boolean -&gt; Boolean 继承Object</li><li>char -&gt; Character  继承Object</li></ul><h1 id="什么是包装类？"><a href="#什么是包装类？" class="headerlink" title="什么是包装类？"></a>什么是包装类？</h1><p>Java种的基本数据类型并不制裁面向对象编程，不具备“对象”的特征，不携带属性、没有方法可以调用，无法提供向上转型取到Object提供的方法。个人理解：就是把基本数据类型封装成对象，有属性，有方法，更能利于开发。</p><h1 id="基本数据类型和包装类的区别？"><a href="#基本数据类型和包装类的区别？" class="headerlink" title="基本数据类型和包装类的区别？"></a>基本数据类型和包装类的区别？</h1><ol><li>定义不同。包装类属于对象，基本数据类型不是。</li><li>声明和使用方式不同，包装类使用new初始化，有些集合类的定义不能使用基本数据类型，例如 ArrayList<Integer></li><li>初始值不同。包装类默认值为null，基本数据类型则不同的类型值不一样</li><li>存储方式和位置不同，从而性能不同。基本数据类型存储在栈(stack)中，包装类则分成引用和实列，引用在栈(stack)中，具体实例在推(heap)中。</li></ol><h1 id="什么是装箱与拆箱？"><a href="#什么是装箱与拆箱？" class="headerlink" title="什么是装箱与拆箱？"></a>什么是装箱与拆箱？</h1><p>将基本数据类型变为包装器类，便是装箱，将包装器类转为基本数据类型就是拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//手动装箱</span></span><br><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line"><span class="comment">// 拆箱（floatValue是number的方法，number是基本数据类型的父类除了boolean和char，基本数据类型都有）</span></span><br><span class="line"><span class="keyword">float</span> f = i.floatValue();<span class="comment">//手动拆箱</span></span><br><span class="line"><span class="comment">//输出结果：123.0</span></span><br><span class="line">System.out.println(f);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//JDK1.5之后支持自动装箱、自动拆箱</span></span><br><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line">Integer a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line"><span class="keyword">int</span> b = a;</span><br><span class="line"></span><br><span class="line">Integer c = <span class="number">200</span>;</span><br><span class="line">Integer d = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//结果返回：false (==不会触发自动拆箱)</span></span><br><span class="line">System.out.println(c == d);</span><br><span class="line"><span class="comment">//结果返回：true</span></span><br><span class="line">System.out.println(c.equals(d));</span><br></pre></td></tr></table></figure><h1 id="什么时候用包装类？"><a href="#什么时候用包装类？" class="headerlink" title="什么时候用包装类？"></a>什么时候用包装类？</h1><p>看基本的业务来定：这个字段允不允许null值，如果允许null值，则必然要用封装类，否则值类型就可以了，用到比如泛型和反射调用函数.，就需要用包装类！</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>理解：  </p><ol><li><code>Integer派别：Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的,它们的默认最大值是128，最小值-128,如果超过就会重新实例化对象，如果超过值用等于等于比较就为false，没超过就为true。</code></li><li><code>Double派别：Double、Float的valueOf方法的实现是类似的。每次都返回不同的对象。</code>    </li><li><code>当一个基础数据类型与封装类进行等于等于、+、-、*、/运算时，会将封装类进行拆箱，对基础数据类型进行运算</code></li><li><p><code>equals比较是是本身</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">200</span>;</span><br><span class="line">System.out.println(i==i1);  <span class="comment">//true</span></span><br><span class="line">System.out.println(i.equals(i1));  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">重点：</span><br><span class="line"><span class="number">1.</span> 基本数据类型和包装类比较</span><br><span class="line">    <span class="number">1.1</span> 使用 == ，Java会自动把包装类拆箱，进行值比较，</span><br><span class="line">    <span class="number">1.2</span> 使用equals进行比较也会自动拆箱，然后比较值</span><br><span class="line"><span class="number">2.</span> 包装类型和包装类型比较</span><br><span class="line">    <span class="number">2.1</span> 使用 == 比较，这里如果包装类的值没有超出于取值范围 并且值是一样为<span class="keyword">true</span>，如果超出取值范围就是<span class="keyword">false</span>（这时候与值无关）；</span><br><span class="line">    <span class="number">2.2</span> 使用equals比较,会自动拆箱,然后比较值。值相同为<span class="keyword">true</span>，不同为<span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">Integer i5 = <span class="number">100</span>;</span><br><span class="line">Integer i6 = <span class="number">100</span>;</span><br><span class="line">Long i7 = <span class="number">100L</span>;</span><br><span class="line"><span class="keyword">long</span> i8 = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//编译报错 不同类型的包装类不能使用==比较</span></span><br><span class="line"><span class="comment">//System.out.println(i7==i6); </span></span><br><span class="line"><span class="comment">//不同类型使用equals进行比较 返回false</span></span><br><span class="line">System.out.println(i6.equals(i8)); </span><br><span class="line"><span class="comment">//不同的包装类和基本数据类型使用==比较，只要不超过取值范围为true</span></span><br><span class="line">System.out.println(i6==i8); </span><br></pre></td></tr></table></figure></li></ol><h2 id="取值范围"><a href="#取值范围" class="headerlink" title="取值范围"></a>取值范围</h2><div class="table-container"><table><thead><tr><th>类型</th><th>相同对象范围</th><th>不同对象范围</th></tr></thead><tbody><tr><td>Integer</td><td>-128,127</td><td>i &gt; 127,i &lt; -128</td></tr><tr><td>Short</td><td>-128,127</td><td>i &gt; 127,i &lt; -128</td></tr><tr><td>Character</td><td>0,127</td><td>i &gt; 128</td></tr><tr><td>Long</td><td>-128,127</td><td>i &gt; 127,i &lt; -128</td></tr></tbody></table></div><h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    Integer i1 </span>= <span class="number">100</span>;</span><br><span class="line">    Integer i2 = <span class="number">100</span>;</span><br><span class="line">    Integer i3 = <span class="number">200</span>;</span><br><span class="line">    Integer i4 = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">//从源码上来看Integer默认的最大值是127，最小值为-128都是final修饰的不可变，所以这里的i1==i2是true</span></span><br><span class="line">    System.out.println(i1==i2);  <span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//如果Integer的值最小超过-128或者最大值超过128，它就会重新创建对象，而i3和i4存的引用就是堆里面的引用所以这里返回false</span></span><br><span class="line">    System.out.println(i3==i4);  <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面为源码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">            i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">            <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">            h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> j = low;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Double i1 = <span class="number">100.0</span>;</span><br><span class="line">    Double i2 = <span class="number">100.0</span>;</span><br><span class="line">    Double i3 = <span class="number">200.0</span>;</span><br><span class="line">    Double i4 = <span class="number">200.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//因为Double每次都会去new对象所以这里返回都是false</span></span><br><span class="line">    System.out.println(i1==i2); <span class="comment">//false</span></span><br><span class="line">    System.out.println(i3==i4); <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面为源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Double(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Boolean i1 = <span class="keyword">false</span>;</span><br><span class="line">    Boolean i2 = <span class="keyword">false</span>;</span><br><span class="line">    Boolean i3 = <span class="keyword">true</span>;</span><br><span class="line">    Boolean i4 = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//源码可见true和false是static final的</span></span><br><span class="line">    System.out.println(i1==i2);<span class="comment">//true</span></span><br><span class="line">    System.out.println(i3==i4);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面为源码</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@code</span> Boolean&#125; object corresponding to the primitive</span></span><br><span class="line"><span class="comment"> * value &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean TRUE = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@code</span> Boolean&#125; object corresponding to the primitive</span></span><br><span class="line"><span class="comment"> * value &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean FALSE = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Integer num1 = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">400</span>;</span><br><span class="line">    <span class="comment">//这里== 进行了自动拆箱 所以为true        </span></span><br><span class="line">    System.out.println(num1 == num2); <span class="comment">//true</span></span><br><span class="line">    <span class="comment">//我们知道equal比较的是内容本身，并且我们也可以看到equal的参数是一个Object对象，我们传入的是一个int类型，所以首先会进行装箱，然后比较，之所以返回true，是由于它比较的是对象里面的value值。</span></span><br><span class="line">    System.out.println(num1.equals(num2));  <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面为源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">包装类</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="基础" scheme="https://www.isfate.xyz/categories/java/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://www.isfate.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java访问控制权限</title>
    <link href="https://www.isfate.xyz/article/df717f7d.html"/>
    <id>https://www.isfate.xyz/article/df717f7d.html</id>
    <published>2020-12-14T12:24:21.000Z</published>
    <updated>2022-01-27T14:49:10.438Z</updated>
    
    <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th>修饰符</th><th>类的内部</th><th>同一包</th><th>子类</th><th>任何地方</th></tr></thead><tbody><tr><td>private</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr><tr><td>default</td><td>yes</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>protected</td><td>yes</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>public</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td></tr></tbody></table></div><p>访问控制权限修饰符可以修饰什么？</p><ul><li>属性（4个都能用）</li><li>方法（4个都能用）</li><li>类（public和默认能用，其他不行）</li><li>接口（public和默认能用，其他不行）</li></ul>]]></content>
    
    
    <summary type="html">Java访问控制权限</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="基础" scheme="https://www.isfate.xyz/categories/java/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://www.isfate.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>类型与类型之间的关系</title>
    <link href="https://www.isfate.xyz/article/7acf6980.html"/>
    <id>https://www.isfate.xyz/article/7acf6980.html</id>
    <published>2020-12-14T12:24:21.000Z</published>
    <updated>2022-01-27T14:49:19.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="is-a"><a href="#is-a" class="headerlink" title="is a"></a>is a</h1><p>cat is a Animal  （猫是一只动物）<br>凡是能够满足is a的表示“继承关系”<br>A extends B  </p><h1 id="has-a"><a href="#has-a" class="headerlink" title="has a"></a>has a</h1><p>I has a Pen （我有一支笔）<br>凡是能够满足has a 关系的表示“关联关系”<br>关联关系通过以“属性”的形式存在。<br>A{<br>    B b;<br>}</p><h1 id="like-a"><a href="#like-a" class="headerlink" title="like a"></a>like a</h1><p>Cooker like a FoodMenu（厨司像一个菜单一样）<br>凡是能够满足like a 关系的表示“实现关系”<br>实现关系通常是：类实现接口。<br>A implement B  </p>]]></content>
    
    
    <summary type="html">类型与类型之间的关系</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="基础" scheme="https://www.isfate.xyz/categories/java/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://www.isfate.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>String、StringBuffer、StringBuilder区别</title>
    <link href="https://www.isfate.xyz/article/88b1c03b.html"/>
    <id>https://www.isfate.xyz/article/88b1c03b.html</id>
    <published>2020-12-13T11:33:11.000Z</published>
    <updated>2022-01-27T14:50:16.902Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">思考：</span><br><span class="line">我们在实际的开发中，如果需要进行字符串的频繁拼接，会有什么问题？  </span><br><span class="line">因为java中的字符串是不可变的，每一次拼接都会产生新字符串。</span><br><span class="line">这样会占用大量的方法区内存，造成内存空间浪费。</span><br><span class="line">例如：</span><br><span class="line">    String s = &quot;abc&quot;;</span><br><span class="line">    s += &quot;hello&quot;;</span><br><span class="line">    就以上两行代码，就导致在方法区字符串常量池当中创建了3个对象：</span><br><span class="line">    “abc”  &quot;hello&quot; &quot;abchello&quot;</span><br><span class="line"></span><br><span class="line">所以在大量的字符串拼接中，我们可以采用JDK自带的：</span><br><span class="line">    java.long.StringBuffer</span><br><span class="line">    java.long.StringBuilder</span><br></pre></td></tr></table></figure><h1 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h1><ol><li>StringBuffer、StringBuilder底层实际上是一个byte[]数组，往StringBuffer、StringBuilder中放字符串，实际上是放在byte数组当中的</li><li>StringBuffer、StringBuilder的初始容量是16。</li><li>StringBuffer、StringBuilder调用append()方法进行追加，如果容量不够，会自动扩容。底层实现原理通过System.arraycopy()方法进行扩容处理。</li><li>String的底层也是byte[]数组只不过是final修饰过的，所以不能改变。</li><li>如何优化StringBuffer、StringBuilder的性能？<br> <code>在创建StringBuffer、StringBuilder的时候尽可能的给定一个合适的初始容量，最好减少底层数组的扩容次数。</code></li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>String、StringBuffer、StringBuilder的区别？<ul><li>StringBuffer中所有方法都有：synchronized关键字修饰，表示线程安全，在多线程下是安全的，但是效率较低，长度可变。</li><li>StringBuilder没有synchronized关键字修饰，表示不线程安全，在多线程下是不安全的,但是效率高，长度可变。</li><li>String是不可变的，因为String的底层也是byte[]数组只不过是final修饰过的，所以不能改变。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">String、StringBuffer、StringBuilder区别</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="基础" scheme="https://www.isfate.xyz/categories/java/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://www.isfate.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>String类</title>
    <link href="https://www.isfate.xyz/article/5cf35ca9.html"/>
    <id>https://www.isfate.xyz/article/5cf35ca9.html</id>
    <published>2020-12-12T13:17:01.000Z</published>
    <updated>2022-01-27T14:50:32.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String是上面"><a href="#String是上面" class="headerlink" title="String是上面"></a>String是上面</h1><ol><li>String表示字符串类型，属于引用数据类型，不属于基本数据类型。</li><li>Java中规定，双引号括起来的字符串，是不可变的，也就是说“abc”自出生到最终死亡，都是不能改变的。</li><li>在JDK当中双引号括起来的字符串，例如：“abc” 都是直接存储在方法区的字符串常量池当中的。</li></ol><p>内存分析：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//s1 和s2 一共创建了3个字符串对象，都在字符串常量池当做</span></span><br><span class="line">        String s1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;abcdef&quot;</span>+<span class="string">&quot;xy&quot;</span>;</span><br><span class="line">        <span class="comment">//凡是使用双引号括起来的都在字符串常量池中有一份.</span></span><br><span class="line">        <span class="comment">//new对象的时候一定在堆内存当中开辟空间</span></span><br><span class="line">        <span class="comment">//所以 栈当中s3存的是 推内存的地址 ，而堆内存当做存的是xy在字符串常量池中的地址</span></span><br><span class="line">        String s3 = <span class="keyword">new</span> String(<span class="string">&quot;xy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>内存图：<br><img src="https://img-blog.csdnimg.cn/20200917140308302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTE0NzY2,size_16,color_FFFFFF,t_70" alt="image"></p><h1 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**(掌握)1. charAt(index) **/</span></span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">&quot;中国人&quot;</span>.charAt(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//输出国</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)2. int compareTo(String anotherString)</span></span><br><span class="line"><span class="comment">         * 按照字典顺序比较两个字符串</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="string">&quot;a&quot;</span>.compareTo(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="comment">//输出0 前后一致 举例：10 - 10 = 0</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">int</span> result2 = <span class="string">&quot;d&quot;</span>.compareTo(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        <span class="comment">//输出-1 前小后大 举例：10 - 11 = -1</span></span><br><span class="line">        System.out.println(result2);</span><br><span class="line">        <span class="keyword">int</span> result3 = <span class="string">&quot;e&quot;</span>.compareTo(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        <span class="comment">//输出0 前大后小  举例：11 - 10 = 1</span></span><br><span class="line">        System.out.println(result3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)3. boolean contains(CharSequence s)</span></span><br><span class="line"><span class="comment">         * 当且仅当此字符串包含指定的char值序列是，返回true</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//如果包含就为true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.contains(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        <span class="comment">//不包含为false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.contains(<span class="string">&quot;d&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)4. boolean endsWith(Sting suffix)</span></span><br><span class="line"><span class="comment">         * 判断当前字符串是否以某个字符串结尾。</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//返回false 结尾不是以.java结尾的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;test.txt&quot;</span>.endsWith(<span class="string">&quot;.java&quot;</span>));</span><br><span class="line">        <span class="comment">//返回true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;test.txt&quot;</span>.endsWith(<span class="string">&quot;.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)5. boolean startWith(Sting suffix)</span></span><br><span class="line"><span class="comment">         * 判断当前字符串是否以某个字符串开始</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//返回true 因为这个字符串就是以test开始的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;test.txt&quot;</span>.endsWith(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">        <span class="comment">//返回false 因为字符串不是以a开始的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;test.txt&quot;</span>.endsWith(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)6. boolean equals(Object anObject)</span></span><br><span class="line"><span class="comment">         * 比较两个字符串必须使用equals方法，不能使用“==”</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//返回true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.equals(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">        <span class="comment">//返回false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.equals(<span class="string">&quot;abcd&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)7. boolean equalsIgnoreCase(String antherString)</span></span><br><span class="line"><span class="comment">         * 判断两个字符串是否相等，并且忽略大小写</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//返回true 因为忽略了大小写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.equalsIgnoreCase(<span class="string">&quot;ABc&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)8. byte[] getBytes()</span></span><br><span class="line"><span class="comment">         * 将字符串对象转换成字节数组</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="string">&quot;abcdef&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">//输出结果 97 98 99 100 101 102</span></span><br><span class="line">        <span class="comment">//把每个字符串都拆分 并且转换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;bytes.length ; i++) &#123;</span><br><span class="line">            System.out.print(bytes[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)9. int indexOf(String str)</span></span><br><span class="line"><span class="comment">         * 判断某个字符串在当前字符串第一次出现处的索引</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//输出下标1,因为b在这个字符串的下标1，第一次出现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abcbef&quot;</span>.indexOf(<span class="string">&quot;b&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)10. int lastIndexOf(String str)</span></span><br><span class="line"><span class="comment">         * 判断某个字符串在当前字符串最后一次次出现处的索引</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//输出结果：3 ,因为b在当前字符串最后一次出现的索引是3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abcbef&quot;</span>.lastIndexOf(<span class="string">&quot;b&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)11. boolean isEmpty()</span></span><br><span class="line"><span class="comment">         * 判断某个字符串是否为空</span></span><br><span class="line"><span class="comment">         * 这里判断的是空字符串“”，而不是null，如果s=null的话 调用此方法会出现空指针异常</span></span><br><span class="line"><span class="comment">         * 这个方法底层调用的就是string的length方法。</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//返回true 因为是空字符串</span></span><br><span class="line">        System.out.println(s.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)12. int length()</span></span><br><span class="line"><span class="comment">         * 判断某个字符串的长度</span></span><br><span class="line"><span class="comment">         * 面试题：判断数组长度和判断字符串长度不一样</span></span><br><span class="line"><span class="comment">         * 判断数组长度用的是length属性，判断字符串长度是length()方法</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//输出结果：3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)13. String replace(CharSequence target,CharSequence replacement)</span></span><br><span class="line"><span class="comment">         * 字符串替换</span></span><br><span class="line"><span class="comment">         * String的父接口就是：CharSequence</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//输出结果：https://myiszhb.cn ,把字符串中的http替换成https</span></span><br><span class="line">        System.out.println(<span class="string">&quot;http://myiszhb.cn&quot;</span>.replace(<span class="string">&quot;http&quot;</span>,<span class="string">&quot;https&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)14. String[] split(String regex)</span></span><br><span class="line"><span class="comment">         *  字符串切割</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        String[] vs = <span class="string">&quot;avcdefg&quot;</span>.split(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="comment">//输出结果av defg ，因为是按照c进行分割的</span></span><br><span class="line">        <span class="keyword">for</span> (String v : vs) &#123;</span><br><span class="line">            System.out.print(v+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)15. String substring(int beginIndex)</span></span><br><span class="line"><span class="comment">         *  截取字符串</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//输出结果：ttps://myiszhb.cn 因为是从索引1还是截取的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;https://myiszhb.cn&quot;</span>.substring(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)16. String substring(int beginIndex，int endIndex)</span></span><br><span class="line"><span class="comment">         *  截取字符串 substring的重载方法</span></span><br><span class="line"><span class="comment">         *  参数： beginIndex - 起始索引（包括）</span></span><br><span class="line"><span class="comment">         *         endIndex  -  结束索引（不包括）</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//输出结果：tt 因为是从索引1开始截取，到索引3结束</span></span><br><span class="line">        System.out.println(<span class="string">&quot;https://myiszhb.cn&quot;</span>.substring(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)17. char[] toCharArray()</span></span><br><span class="line"><span class="comment">         *  将字符串转换成char数组</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="string">&quot;我是四川人&quot;</span>.toCharArray();</span><br><span class="line">        <span class="comment">//输出结果： 我 是 四 川 人</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> aChar : chars) &#123;</span><br><span class="line">            System.out.print(aChar+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)18. String toLowerCase()</span></span><br><span class="line"><span class="comment">         *  将字符串转换成小写</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//输出结果：abc</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ABC&quot;</span>.toLowerCase());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)19. String toUpperCase()</span></span><br><span class="line"><span class="comment">         *  将字符串转换成大写</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//输出结果：ABC</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.toUpperCase());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)20. String trim()</span></span><br><span class="line"><span class="comment">         *  忽略字符串前面和尾部的空白</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//输出结果：asf f 前面后面的空白就去除了 中间的不会去除</span></span><br><span class="line">        System.out.println(<span class="string">&quot; asf f &quot;</span>.trim());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**(掌握)21. valueOf()</span></span><br><span class="line"><span class="comment">         * String中只有一个方法是静态的，不需要new对象 那就是valueOf()方法</span></span><br><span class="line"><span class="comment">         *  将非字符串（不是字符串的）转换成字符串</span></span><br><span class="line"><span class="comment">         * **/</span></span><br><span class="line">        <span class="comment">//输出结果:1 ,而这里输出出来的1已经变成字符串的1了，而不是int类型的1</span></span><br><span class="line">        System.out.println(String.valueOf(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">String</summary>
    
    
    
    <category term="java" scheme="https://www.isfate.xyz/categories/java/"/>
    
    <category term="基础" scheme="https://www.isfate.xyz/categories/java/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://www.isfate.xyz/tags/java/"/>
    
  </entry>
  
</feed>
